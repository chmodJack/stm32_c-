; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_wwdg.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_wwdg.crf ..\STM32F10x_FWLIB\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WWDG_DeInit PROC
;;;101      */
;;;102    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  e8bd4010          POP      {r4,lr}
00000e  2100              MOVS     r1,#0
000010  f44f6000          MOV      r0,#0x800
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;106    }
;;;107    
                          ENDP

                  WWDG_SetPrescaler PROC
;;;117      */
;;;118    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000018  4914              LDR      r1,|L1.108|
;;;119    {
;;;120      uint32_t tmpreg = 0;
;;;121      /* Check the parameters */
;;;122      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;123      /* Clear WDGTB[1:0] bits */
;;;124      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
00001a  680a              LDR      r2,[r1,#0]
00001c  f42272c0          BIC      r2,r2,#0x180
;;;125      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;126      tmpreg |= WWDG_Prescaler;
000020  4310              ORRS     r0,r0,r2
;;;127      /* Store the new value */
;;;128      WWDG->CFR = tmpreg;
000022  6008              STR      r0,[r1,#0]
;;;129    }
000024  4770              BX       lr
;;;130    
                          ENDP

                  WWDG_SetWindowValue PROC
;;;136      */
;;;137    void WWDG_SetWindowValue(uint8_t WindowValue)
000026  4911              LDR      r1,|L1.108|
;;;138    {
000028  b081              SUB      sp,sp,#4
;;;139      __IO uint32_t tmpreg = 0;
;;;140    
;;;141      /* Check the parameters */
;;;142      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;143      /* Clear W[6:0] bits */
;;;144    
;;;145      tmpreg = WWDG->CFR & CFR_W_Mask;
00002a  680a              LDR      r2,[r1,#0]
;;;146    
;;;147      /* Set W[6:0] bits according to WindowValue value */
;;;148      tmpreg |= WindowValue & (uint32_t) BIT_Mask;
00002c  f000007f          AND      r0,r0,#0x7f
000030  f022027f          BIC      r2,r2,#0x7f           ;145
000034  4310              ORRS     r0,r0,r2
;;;149    
;;;150      /* Store the new value */
;;;151      WWDG->CFR = tmpreg;
000036  9000              STR      r0,[sp,#0]
000038  6008              STR      r0,[r1,#0]
;;;152    }
00003a  b001              ADD      sp,sp,#4
00003c  4770              BX       lr
;;;153    
                          ENDP

                  WWDG_EnableIT PROC
;;;158      */
;;;159    void WWDG_EnableIT(void)
00003e  490c              LDR      r1,|L1.112|
;;;160    {
;;;161      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000040  2001              MOVS     r0,#1
000042  f8c100a4          STR      r0,[r1,#0xa4]
;;;162    }
000046  4770              BX       lr
;;;163    
                          ENDP

                  WWDG_SetCounter PROC
;;;169      */
;;;170    void WWDG_SetCounter(uint8_t Counter)
000048  490a              LDR      r1,|L1.116|
;;;171    {
;;;172      /* Check the parameters */
;;;173      assert_param(IS_WWDG_COUNTER(Counter));
;;;174      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;175         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;176      WWDG->CR = Counter & BIT_Mask;
00004a  f000007f          AND      r0,r0,#0x7f
00004e  6008              STR      r0,[r1,#0]
;;;177    }
000050  4770              BX       lr
;;;178    
                          ENDP

                  WWDG_Enable PROC
;;;184      */
;;;185    void WWDG_Enable(uint8_t Counter)
000052  4908              LDR      r1,|L1.116|
;;;186    {
;;;187      /* Check the parameters */
;;;188      assert_param(IS_WWDG_COUNTER(Counter));
;;;189      WWDG->CR = CR_WDGA_Set | Counter;
000054  f0400080          ORR      r0,r0,#0x80
000058  6008              STR      r0,[r1,#0]
;;;190    }
00005a  4770              BX       lr
;;;191    
                          ENDP

                  WWDG_GetFlagStatus PROC
;;;196      */
;;;197    FlagStatus WWDG_GetFlagStatus(void)
00005c  4806              LDR      r0,|L1.120|
;;;198    {
;;;199      return (FlagStatus)(WWDG->SR);
00005e  6800              LDR      r0,[r0,#0]
000060  b2c0              UXTB     r0,r0
;;;200    }
000062  4770              BX       lr
;;;201    
                          ENDP

                  WWDG_ClearFlag PROC
;;;206      */
;;;207    void WWDG_ClearFlag(void)
000064  4904              LDR      r1,|L1.120|
;;;208    {
;;;209      WWDG->SR = (uint32_t)RESET;
000066  2000              MOVS     r0,#0
000068  6008              STR      r0,[r1,#0]
;;;210    }
00006a  4770              BX       lr
;;;211    
                          ENDP

                  |L1.108|
                          DCD      0x40002c04
                  |L1.112|
                          DCD      0x42058000
                  |L1.116|
                          DCD      0x40002c00
                  |L1.120|
                          DCD      0x40002c08
