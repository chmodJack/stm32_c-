; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_exti.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_exti.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_exti.crf ..\STM32F10x_FWLIB\src\stm32f10x_exti.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;84       */
;;;85     void EXTI_DeInit(void)
000000  493b              LDR      r1,|L1.240|
;;;86     {
;;;87       EXTI->IMR = 0x00000000;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;88       EXTI->EMR = 0x00000000;
000006  1d09              ADDS     r1,r1,#4
000008  6008              STR      r0,[r1,#0]
;;;89       EXTI->RTSR = 0x00000000; 
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;90       EXTI->FTSR = 0x00000000; 
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;91       EXTI->PR = 0x000FFFFF;
000012  4939              LDR      r1,|L1.248|
000014  4837              LDR      r0,|L1.244|
000016  6008              STR      r0,[r1,#0]
;;;92     }
000018  4770              BX       lr
;;;93     
                          ENDP

                  EXTI_Init PROC
;;;100      */
;;;101    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
00001a  7982              LDRB     r2,[r0,#6]
;;;102    {
;;;103      uint32_t tmp = 0;
;;;104    
;;;105      /* Check the parameters */
;;;106      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;107      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;108      assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;109      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;110    
;;;111      tmp = (uint32_t)EXTI_BASE;
;;;112         
;;;113      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
00001c  6801              LDR      r1,[r0,#0]
00001e  2a00              CMP      r2,#0
000020  d035              BEQ      |L1.142|
;;;114      {
;;;115        /* Clear EXTI line configuration */
;;;116        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
000022  4a33              LDR      r2,|L1.240|
000024  6813              LDR      r3,[r2,#0]
000026  ea230101          BIC      r1,r3,r1
00002a  6011              STR      r1,[r2,#0]
;;;117        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
00002c  1d11              ADDS     r1,r2,#4
00002e  680a              LDR      r2,[r1,#0]
000030  6803              LDR      r3,[r0,#0]
000032  439a              BICS     r2,r2,r3
000034  600a              STR      r2,[r1,#0]
;;;118        
;;;119        tmp += EXTI_InitStruct->EXTI_Mode;
000036  7901              LDRB     r1,[r0,#4]
000038  f1014180          ADD      r1,r1,#0x40000000
00003c  f5013182          ADD      r1,r1,#0x10400
;;;120    
;;;121        *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
000040  680a              LDR      r2,[r1,#0]
000042  6803              LDR      r3,[r0,#0]
000044  431a              ORRS     r2,r2,r3
000046  600a              STR      r2,[r1,#0]
;;;122    
;;;123        /* Clear Rising Falling edge configuration */
;;;124        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
000048  492c              LDR      r1,|L1.252|
00004a  680a              LDR      r2,[r1,#0]
00004c  6803              LDR      r3,[r0,#0]
00004e  439a              BICS     r2,r2,r3
000050  600a              STR      r2,[r1,#0]
;;;125        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
000052  1d0b              ADDS     r3,r1,#4
000054  681a              LDR      r2,[r3,#0]
000056  f8d0c000          LDR      r12,[r0,#0]
00005a  ea22020c          BIC      r2,r2,r12
00005e  601a              STR      r2,[r3,#0]
;;;126        
;;;127        /* Select the trigger for the selected external interrupts */
;;;128        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
000060  7942              LDRB     r2,[r0,#5]
000062  2a10              CMP      r2,#0x10
000064  d008              BEQ      |L1.120|
000066  f1024280          ADD      r2,r2,#0x40000000
00006a  f5023282          ADD      r2,r2,#0x10400
;;;129        {
;;;130          /* Rising Falling edge */
;;;131          EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
;;;132          EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
;;;133        }
;;;134        else
;;;135        {
;;;136          tmp = (uint32_t)EXTI_BASE;
;;;137          tmp += EXTI_InitStruct->EXTI_Trigger;
;;;138    
;;;139          *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
00006e  6811              LDR      r1,[r2,#0]
000070  6800              LDR      r0,[r0,#0]
000072  4308              ORRS     r0,r0,r1
000074  6010              STR      r0,[r2,#0]
;;;140        }
;;;141      }
;;;142      else
;;;143      {
;;;144        tmp += EXTI_InitStruct->EXTI_Mode;
;;;145    
;;;146        /* Disable the selected external lines */
;;;147        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
;;;148      }
;;;149    }
000076  4770              BX       lr
                  |L1.120|
000078  680a              LDR      r2,[r1,#0]            ;131
00007a  f8d0c000          LDR      r12,[r0,#0]           ;131
00007e  ea42020c          ORR      r2,r2,r12             ;131
000082  600a              STR      r2,[r1,#0]            ;131
000084  6819              LDR      r1,[r3,#0]            ;132
000086  6800              LDR      r0,[r0,#0]            ;132
000088  4308              ORRS     r0,r0,r1              ;132
00008a  6018              STR      r0,[r3,#0]            ;132
00008c  4770              BX       lr
                  |L1.142|
00008e  7900              LDRB     r0,[r0,#4]            ;144
000090  f1004080          ADD      r0,r0,#0x40000000     ;144
000094  f5003082          ADD      r0,r0,#0x10400        ;144
000098  6802              LDR      r2,[r0,#0]            ;147
00009a  ea220101          BIC      r1,r2,r1              ;147
00009e  6001              STR      r1,[r0,#0]            ;147
0000a0  4770              BX       lr
;;;150    
                          ENDP

                  EXTI_StructInit PROC
;;;156      */
;;;157    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
0000a2  2100              MOVS     r1,#0
;;;158    {
;;;159      EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
;;;160      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
0000a4  6001              STR      r1,[r0,#0]
0000a6  7101              STRB     r1,[r0,#4]
;;;161      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
0000a8  220c              MOVS     r2,#0xc
0000aa  7142              STRB     r2,[r0,#5]
;;;162      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
0000ac  7181              STRB     r1,[r0,#6]
;;;163    }
0000ae  4770              BX       lr
;;;164    
                          ENDP

                  EXTI_GenerateSWInterrupt PROC
;;;170      */
;;;171    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
0000b0  4913              LDR      r1,|L1.256|
;;;172    {
;;;173      /* Check the parameters */
;;;174      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;175      
;;;176      EXTI->SWIER |= EXTI_Line;
0000b2  680a              LDR      r2,[r1,#0]
0000b4  4310              ORRS     r0,r0,r2
0000b6  6008              STR      r0,[r1,#0]
;;;177    }
0000b8  4770              BX       lr
;;;178    
                          ENDP

                  EXTI_GetFlagStatus PROC
;;;185      */
;;;186    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
0000ba  4a0f              LDR      r2,|L1.248|
;;;187    {
0000bc  4601              MOV      r1,r0
;;;188      FlagStatus bitstatus = RESET;
0000be  2000              MOVS     r0,#0
;;;189      /* Check the parameters */
;;;190      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;191      
;;;192      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
0000c0  6812              LDR      r2,[r2,#0]
0000c2  420a              TST      r2,r1
;;;193      {
;;;194        bitstatus = SET;
0000c4  bf18              IT       NE
0000c6  2001              MOVNE    r0,#1
;;;195      }
;;;196      else
;;;197      {
;;;198        bitstatus = RESET;
;;;199      }
;;;200      return bitstatus;
;;;201    }
0000c8  4770              BX       lr
;;;202    
                          ENDP

                  EXTI_ClearFlag PROC
;;;208      */
;;;209    void EXTI_ClearFlag(uint32_t EXTI_Line)
0000ca  490b              LDR      r1,|L1.248|
;;;210    {
;;;211      /* Check the parameters */
;;;212      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;213      
;;;214      EXTI->PR = EXTI_Line;
0000cc  6008              STR      r0,[r1,#0]
;;;215    }
0000ce  4770              BX       lr
;;;216    
                          ENDP

                  EXTI_GetITStatus PROC
;;;223      */
;;;224    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
0000d0  4a07              LDR      r2,|L1.240|
;;;225    {
;;;226      ITStatus bitstatus = RESET;
0000d2  2100              MOVS     r1,#0
;;;227      uint32_t enablestatus = 0;
;;;228      /* Check the parameters */
;;;229      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;230      
;;;231      enablestatus =  EXTI->IMR & EXTI_Line;
0000d4  6812              LDR      r2,[r2,#0]
;;;232      if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
0000d6  4b08              LDR      r3,|L1.248|
0000d8  4002              ANDS     r2,r2,r0              ;231
0000da  681b              LDR      r3,[r3,#0]
0000dc  4203              TST      r3,r0
0000de  bf1c              ITT      NE
0000e0  2a00              CMPNE    r2,#0
;;;233      {
;;;234        bitstatus = SET;
0000e2  2101              MOVNE    r1,#1
;;;235      }
;;;236      else
;;;237      {
;;;238        bitstatus = RESET;
;;;239      }
;;;240      return bitstatus;
0000e4  4608              MOV      r0,r1
;;;241    }
0000e6  4770              BX       lr
;;;242    
                          ENDP

                  EXTI_ClearITPendingBit PROC
;;;248      */
;;;249    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
0000e8  4903              LDR      r1,|L1.248|
;;;250    {
;;;251      /* Check the parameters */
;;;252      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;253      
;;;254      EXTI->PR = EXTI_Line;
0000ea  6008              STR      r0,[r1,#0]
;;;255    }
0000ec  4770              BX       lr
;;;256    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L1.240|
                          DCD      0x40010400
                  |L1.244|
                          DCD      0x000fffff
                  |L1.248|
                          DCD      0x40010414
                  |L1.252|
                          DCD      0x40010408
                  |L1.256|
                          DCD      0x40010410
