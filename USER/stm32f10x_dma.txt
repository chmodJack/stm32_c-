; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_dma.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_dma.crf ..\STM32F10x_FWLIB\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;107      */
;;;108    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;109    {
;;;110      /* Check the parameters */
;;;111      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;112      
;;;113      /* Disable the selected DMAy Channelx */
;;;114      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;115      
;;;116      /* Reset DMAy Channelx control register */
;;;117      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;118      
;;;119      /* Reset DMAy Channelx remaining bytes register */
;;;120      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;121      
;;;122      /* Reset DMAy Channelx peripheral address register */
;;;123      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;124      
;;;125      /* Reset DMAy Channelx memory address register */
;;;126      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;127      
;;;128      if (DMAy_Channelx == DMA1_Channel1)
000014  4a68              LDR      r2,|L1.440|
;;;129      {
;;;130        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;131        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000016  4969              LDR      r1,|L1.444|
000018  4290              CMP      r0,r2                 ;128
00001a  bf04              ITT      EQ
00001c  6848              LDREQ    r0,[r1,#4]
00001e  f040000f          ORREQ    r0,r0,#0xf
000022  d022              BEQ      |L1.106|
;;;132      }
;;;133      else if (DMAy_Channelx == DMA1_Channel2)
000024  4a66              LDR      r2,|L1.448|
000026  4290              CMP      r0,r2
;;;134      {
;;;135        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
000028  bf04              ITT      EQ
00002a  6848              LDREQ    r0,[r1,#4]
00002c  f04000f0          ORREQ    r0,r0,#0xf0
000030  d01b              BEQ      |L1.106|
;;;137      }
;;;138      else if (DMAy_Channelx == DMA1_Channel3)
000032  4a64              LDR      r2,|L1.452|
000034  4290              CMP      r0,r2
;;;139      {
;;;140        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;141        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
000036  bf04              ITT      EQ
000038  6848              LDREQ    r0,[r1,#4]
00003a  f4406070          ORREQ    r0,r0,#0xf00
00003e  d014              BEQ      |L1.106|
;;;142      }
;;;143      else if (DMAy_Channelx == DMA1_Channel4)
000040  4a61              LDR      r2,|L1.456|
000042  4290              CMP      r0,r2
;;;144      {
;;;145        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;146        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
000044  bf04              ITT      EQ
000046  6848              LDREQ    r0,[r1,#4]
000048  f4404070          ORREQ    r0,r0,#0xf000
00004c  d00d              BEQ      |L1.106|
;;;147      }
;;;148      else if (DMAy_Channelx == DMA1_Channel5)
00004e  4a5f              LDR      r2,|L1.460|
000050  4290              CMP      r0,r2
;;;149      {
;;;150        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;151        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
000052  bf04              ITT      EQ
000054  6848              LDREQ    r0,[r1,#4]
000056  f4402070          ORREQ    r0,r0,#0xf0000
00005a  d006              BEQ      |L1.106|
;;;152      }
;;;153      else if (DMAy_Channelx == DMA1_Channel6)
00005c  4a5c              LDR      r2,|L1.464|
00005e  4290              CMP      r0,r2
;;;154      {
;;;155        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;156        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
000060  bf04              ITT      EQ
000062  6848              LDREQ    r0,[r1,#4]
000064  f4400070          ORREQ    r0,r0,#0xf00000
000068  d101              BNE      |L1.110|
                  |L1.106|
00006a  6048              STR      r0,[r1,#4]            ;151
;;;157      }
;;;158      else if (DMAy_Channelx == DMA1_Channel7)
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;161        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
;;;162      }
;;;163      else if (DMAy_Channelx == DMA2_Channel1)
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;166        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
;;;167      }
;;;168      else if (DMAy_Channelx == DMA2_Channel2)
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;171        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
;;;172      }
;;;173      else if (DMAy_Channelx == DMA2_Channel3)
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;176        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
;;;177      }
;;;178      else if (DMAy_Channelx == DMA2_Channel4)
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;181        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
;;;182      }
;;;183      else
;;;184      { 
;;;185        if (DMAy_Channelx == DMA2_Channel5)
;;;186        {
;;;187          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;188          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
;;;189        }
;;;190      }
;;;191    }
00006c  4770              BX       lr
                  |L1.110|
00006e  4a59              LDR      r2,|L1.468|
000070  4290              CMP      r0,r2                 ;158
000072  d104              BNE      |L1.126|
000074  6848              LDR      r0,[r1,#4]            ;161
000076  f0406070          ORR      r0,r0,#0xf000000      ;161
00007a  6048              STR      r0,[r1,#4]            ;161
00007c  4770              BX       lr
                  |L1.126|
00007e  4a56              LDR      r2,|L1.472|
000080  1f11              SUBS     r1,r2,#4              ;166
000082  4290              CMP      r0,r2                 ;163
000084  bf04              ITT      EQ                    ;166
000086  6808              LDREQ    r0,[r1,#0]            ;166
000088  f040000f          ORREQ    r0,r0,#0xf            ;166
00008c  d014              BEQ      |L1.184|
00008e  4a53              LDR      r2,|L1.476|
000090  4290              CMP      r0,r2                 ;168
000092  bf04              ITT      EQ                    ;171
000094  6808              LDREQ    r0,[r1,#0]            ;171
000096  f04000f0          ORREQ    r0,r0,#0xf0           ;171
00009a  d00d              BEQ      |L1.184|
00009c  4a50              LDR      r2,|L1.480|
00009e  4290              CMP      r0,r2                 ;173
0000a0  bf04              ITT      EQ                    ;176
0000a2  6808              LDREQ    r0,[r1,#0]            ;176
0000a4  f4406070          ORREQ    r0,r0,#0xf00          ;176
0000a8  d006              BEQ      |L1.184|
0000aa  4a4e              LDR      r2,|L1.484|
0000ac  4290              CMP      r0,r2                 ;178
0000ae  bf04              ITT      EQ                    ;181
0000b0  6808              LDREQ    r0,[r1,#0]            ;181
0000b2  f4404070          ORREQ    r0,r0,#0xf000         ;181
0000b6  d101              BNE      |L1.188|
                  |L1.184|
0000b8  6008              STR      r0,[r1,#0]            ;176
0000ba  4770              BX       lr
                  |L1.188|
0000bc  4a4a              LDR      r2,|L1.488|
0000be  4290              CMP      r0,r2                 ;185
0000c0  bf18              IT       NE
0000c2  4770              BXNE     lr
0000c4  6808              LDR      r0,[r1,#0]            ;188
0000c6  f4402070          ORR      r0,r0,#0xf0000        ;188
0000ca  6008              STR      r0,[r1,#0]            ;188
0000cc  4770              BX       lr
;;;192    
                          ENDP

                  DMA_Init PROC
;;;201      */
;;;202    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
0000ce  b410              PUSH     {r4}
;;;203    {
;;;204      uint32_t tmpreg = 0;
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;208      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;209      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;210      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;211      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;212      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;213      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;214      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;215      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;216      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;217    
;;;218    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;219      /* Get the DMAy_Channelx CCR value */
;;;220      tmpreg = DMAy_Channelx->CCR;
0000d0  6802              LDR      r2,[r0,#0]
;;;221      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;222      tmpreg &= CCR_CLEAR_Mask;
;;;223      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;224      /* Set DIR bit according to DMA_DIR value */
;;;225      /* Set CIRC bit according to DMA_Mode value */
;;;226      /* Set PINC bit according to DMA_PeripheralInc value */
;;;227      /* Set MINC bit according to DMA_MemoryInc value */
;;;228      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;229      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;230      /* Set PL bits according to DMA_Priority value */
;;;231      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;232      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
0000d2  f8d1c020          LDR      r12,[r1,#0x20]
0000d6  688b              LDR      r3,[r1,#8]
0000d8  f36f120e          BFC      r2,#4,#11             ;222
0000dc  ea43030c          ORR      r3,r3,r12
0000e0  e9d1c404          LDRD     r12,r4,[r1,#0x10]
0000e4  ea4c0c04          ORR      r12,r12,r4
0000e8  ea43030c          ORR      r3,r3,r12
0000ec  f8d1c018          LDR      r12,[r1,#0x18]
0000f0  ea43030c          ORR      r3,r3,r12
0000f4  f8d1c01c          LDR      r12,[r1,#0x1c]
0000f8  ea43030c          ORR      r3,r3,r12
0000fc  f8d1c024          LDR      r12,[r1,#0x24]
000100  ea43030c          ORR      r3,r3,r12
000104  f8d1c028          LDR      r12,[r1,#0x28]
000108  ea43030c          ORR      r3,r3,r12
00010c  431a              ORRS     r2,r2,r3
;;;233                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;234                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;235                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;236    
;;;237      /* Write to DMAy Channelx CCR */
;;;238      DMAy_Channelx->CCR = tmpreg;
00010e  6002              STR      r2,[r0,#0]
;;;239    
;;;240    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;241      /* Write to DMAy Channelx CNDTR */
;;;242      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
000110  68ca              LDR      r2,[r1,#0xc]
000112  6042              STR      r2,[r0,#4]
;;;243    
;;;244    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;245      /* Write to DMAy Channelx CPAR */
;;;246      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000114  680a              LDR      r2,[r1,#0]
000116  6082              STR      r2,[r0,#8]
;;;247    
;;;248    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;249      /* Write to DMAy Channelx CMAR */
;;;250      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000118  6849              LDR      r1,[r1,#4]
00011a  60c1              STR      r1,[r0,#0xc]
;;;251    }
00011c  bc10              POP      {r4}
00011e  4770              BX       lr
;;;252    
                          ENDP

                  DMA_StructInit PROC
;;;258      */
;;;259    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000120  2100              MOVS     r1,#0
;;;260    {
;;;261    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;262      /* Initialize the DMA_PeripheralBaseAddr member */
;;;263      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;264      /* Initialize the DMA_MemoryBaseAddr member */
;;;265      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000122  6001              STR      r1,[r0,#0]
;;;266      /* Initialize the DMA_DIR member */
;;;267      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000124  6041              STR      r1,[r0,#4]
;;;268      /* Initialize the DMA_BufferSize member */
;;;269      DMA_InitStruct->DMA_BufferSize = 0;
000126  6081              STR      r1,[r0,#8]
;;;270      /* Initialize the DMA_PeripheralInc member */
;;;271      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000128  60c1              STR      r1,[r0,#0xc]
;;;272      /* Initialize the DMA_MemoryInc member */
;;;273      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00012a  6101              STR      r1,[r0,#0x10]
;;;274      /* Initialize the DMA_PeripheralDataSize member */
;;;275      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00012c  6141              STR      r1,[r0,#0x14]
;;;276      /* Initialize the DMA_MemoryDataSize member */
;;;277      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00012e  6181              STR      r1,[r0,#0x18]
;;;278      /* Initialize the DMA_Mode member */
;;;279      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000130  61c1              STR      r1,[r0,#0x1c]
;;;280      /* Initialize the DMA_Priority member */
;;;281      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000132  6201              STR      r1,[r0,#0x20]
;;;282      /* Initialize the DMA_M2M member */
;;;283      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000134  6241              STR      r1,[r0,#0x24]
000136  6281              STR      r1,[r0,#0x28]
;;;284    }
000138  4770              BX       lr
;;;285    
                          ENDP

                  DMA_Cmd PROC
;;;293      */
;;;294    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
00013a  2900              CMP      r1,#0
;;;295    {
;;;296      /* Check the parameters */
;;;297      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;298      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;299    
;;;300      if (NewState != DISABLE)
;;;301      {
;;;302        /* Enable the selected DMAy Channelx */
;;;303        DMAy_Channelx->CCR |= DMA_CCR1_EN;
;;;304      }
;;;305      else
;;;306      {
;;;307        /* Disable the selected DMAy Channelx */
;;;308        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
00013c  6801              LDR      r1,[r0,#0]
00013e  bf12              ITEE     NE                    ;303
000140  f0410101          ORRNE    r1,r1,#1              ;303
000144  f64f72fe          MOVEQ    r2,#0xfffe
000148  4011              ANDEQ    r1,r1,r2
00014a  6001              STR      r1,[r0,#0]            ;303
;;;309      }
;;;310    }
00014c  4770              BX       lr
;;;311    
                          ENDP

                  DMA_ITConfig PROC
;;;325      */
;;;326    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
00014e  2a00              CMP      r2,#0
;;;327    {
;;;328      /* Check the parameters */
;;;329      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;330      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;331      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;332      if (NewState != DISABLE)
;;;333      {
;;;334        /* Enable the selected DMA interrupts */
;;;335        DMAy_Channelx->CCR |= DMA_IT;
;;;336      }
;;;337      else
;;;338      {
;;;339        /* Disable the selected DMA interrupts */
;;;340        DMAy_Channelx->CCR &= ~DMA_IT;
000150  6802              LDR      r2,[r0,#0]
000152  bf14              ITE      NE                    ;335
000154  4311              ORRNE    r1,r1,r2              ;335
000156  ea220101          BICEQ    r1,r2,r1
00015a  6001              STR      r1,[r0,#0]            ;335
;;;341      }
;;;342    }
00015c  4770              BX       lr
;;;343    
                          ENDP

                  DMA_SetCurrDataCounter PROC
;;;352      */
;;;353    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
00015e  6041              STR      r1,[r0,#4]
;;;354    {
;;;355      /* Check the parameters */
;;;356      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;357      
;;;358    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;359      /* Write to DMAy Channelx CNDTR */
;;;360      DMAy_Channelx->CNDTR = DataNumber;  
;;;361    }
000160  4770              BX       lr
;;;362    
                          ENDP

                  DMA_GetCurrDataCounter PROC
;;;370      */
;;;371    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000162  6840              LDR      r0,[r0,#4]
;;;372    {
;;;373      /* Check the parameters */
;;;374      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;375      /* Return the number of remaining data units for DMAy Channelx */
;;;376      return ((uint16_t)(DMAy_Channelx->CNDTR));
000164  b280              UXTH     r0,r0
;;;377    }
000166  4770              BX       lr
;;;378    
                          ENDP

                  DMA_GetFlagStatus PROC
;;;432      */
;;;433    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000168  2100              MOVS     r1,#0
;;;434    {
;;;435      FlagStatus bitstatus = RESET;
;;;436      uint32_t tmpreg = 0;
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;440    
;;;441      /* Calculate the used DMAy */
;;;442      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
00016a  f0105f80          TST      r0,#0x10000000
;;;443      {
;;;444        /* Get DMA2 ISR register value */
;;;445        tmpreg = DMA2->ISR ;
00016e  bf14              ITE      NE
000170  4a1e              LDRNE    r2,|L1.492|
;;;446      }
;;;447      else
;;;448      {
;;;449        /* Get DMA1 ISR register value */
;;;450        tmpreg = DMA1->ISR ;
000172  4a12              LDREQ    r2,|L1.444|
000174  6812              LDR      r2,[r2,#0]
;;;451      }
;;;452    
;;;453      /* Check the status of the specified DMAy flag */
;;;454      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000176  4202              TST      r2,r0
;;;455      {
;;;456        /* DMAy_FLAG is set */
;;;457        bitstatus = SET;
000178  bf18              IT       NE
00017a  2101              MOVNE    r1,#1
;;;458      }
;;;459      else
;;;460      {
;;;461        /* DMAy_FLAG is reset */
;;;462        bitstatus = RESET;
;;;463      }
;;;464      
;;;465      /* Return the DMAy_FLAG status */
;;;466      return  bitstatus;
00017c  4608              MOV      r0,r1
;;;467    }
00017e  4770              BX       lr
;;;468    
                          ENDP

                  DMA_ClearFlag PROC
;;;522      */
;;;523    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000180  f0105f80          TST      r0,#0x10000000
;;;524    {
;;;525      /* Check the parameters */
;;;526      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;527    
;;;528      /* Calculate the used DMAy */
;;;529      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;530      {
;;;531        /* Clear the selected DMAy flags */
;;;532        DMA2->IFCR = DMAy_FLAG;
000184  bf19              ITTEE    NE
000186  491a              LDRNE    r1,|L1.496|
000188  6008              STRNE    r0,[r1,#0]
;;;533      }
;;;534      else
;;;535      {
;;;536        /* Clear the selected DMAy flags */
;;;537        DMA1->IFCR = DMAy_FLAG;
00018a  490c              LDREQ    r1,|L1.444|
00018c  6048              STREQ    r0,[r1,#4]
;;;538      }
;;;539    }
00018e  4770              BX       lr
;;;540    
                          ENDP

                  DMA_GetITStatus PROC
;;;594      */
;;;595    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000190  2100              MOVS     r1,#0
;;;596    {
;;;597      ITStatus bitstatus = RESET;
;;;598      uint32_t tmpreg = 0;
;;;599    
;;;600      /* Check the parameters */
;;;601      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;602    
;;;603      /* Calculate the used DMA */
;;;604      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
000192  f0105f80          TST      r0,#0x10000000
;;;605      {
;;;606        /* Get DMA2 ISR register value */
;;;607        tmpreg = DMA2->ISR;
000196  bf14              ITE      NE
000198  4a14              LDRNE    r2,|L1.492|
;;;608      }
;;;609      else
;;;610      {
;;;611        /* Get DMA1 ISR register value */
;;;612        tmpreg = DMA1->ISR;
00019a  4a08              LDREQ    r2,|L1.444|
00019c  6812              LDR      r2,[r2,#0]
;;;613      }
;;;614    
;;;615      /* Check the status of the specified DMAy interrupt */
;;;616      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
00019e  4202              TST      r2,r0
;;;617      {
;;;618        /* DMAy_IT is set */
;;;619        bitstatus = SET;
0001a0  bf18              IT       NE
0001a2  2101              MOVNE    r1,#1
;;;620      }
;;;621      else
;;;622      {
;;;623        /* DMAy_IT is reset */
;;;624        bitstatus = RESET;
;;;625      }
;;;626      /* Return the DMA_IT status */
;;;627      return  bitstatus;
0001a4  4608              MOV      r0,r1
;;;628    }
0001a6  4770              BX       lr
;;;629    
                          ENDP

                  DMA_ClearITPendingBit PROC
;;;683      */
;;;684    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
0001a8  f0105f80          TST      r0,#0x10000000
;;;685    {
;;;686      /* Check the parameters */
;;;687      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;688    
;;;689      /* Calculate the used DMAy */
;;;690      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;691      {
;;;692        /* Clear the selected DMAy interrupt pending bits */
;;;693        DMA2->IFCR = DMAy_IT;
0001ac  bf19              ITTEE    NE
0001ae  4910              LDRNE    r1,|L1.496|
0001b0  6008              STRNE    r0,[r1,#0]
;;;694      }
;;;695      else
;;;696      {
;;;697        /* Clear the selected DMAy interrupt pending bits */
;;;698        DMA1->IFCR = DMAy_IT;
0001b2  4902              LDREQ    r1,|L1.444|
0001b4  6048              STREQ    r0,[r1,#4]
;;;699      }
;;;700    }
0001b6  4770              BX       lr
;;;701    
                          ENDP

                  |L1.440|
                          DCD      0x40020008
                  |L1.444|
                          DCD      0x40020000
                  |L1.448|
                          DCD      0x4002001c
                  |L1.452|
                          DCD      0x40020030
                  |L1.456|
                          DCD      0x40020044
                  |L1.460|
                          DCD      0x40020058
                  |L1.464|
                          DCD      0x4002006c
                  |L1.468|
                          DCD      0x40020080
                  |L1.472|
                          DCD      0x40020408
                  |L1.476|
                          DCD      0x4002041c
                  |L1.480|
                          DCD      0x40020430
                  |L1.484|
                          DCD      0x40020444
                  |L1.488|
                          DCD      0x40020458
                  |L1.492|
                          DCD      0x40020400
                  |L1.496|
                          DCD      0x40020404
