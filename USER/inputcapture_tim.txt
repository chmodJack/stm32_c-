; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o..\obj\inputcapture_tim.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\inputcapture_tim.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\inputcapture_tim.crf ..\C++LIB\OnChip\InputCapture\InputCapture_TIM.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN16InputCapture_TIMC2EP11TIM_TypeDeftbbbbhhh                  ; Alternate entry point ; InputCapture_TIM::InputCapture_TIM__sub_object(TIM_TypeDef*, unsigned short, bool, bool, bool, bool, unsigned char, unsigned char, unsigned char)
                  _ZN16InputCapture_TIMC1EP11TIM_TypeDeftbbbbhhh PROC ; InputCapture_TIM::InputCapture_TIM(TIM_TypeDef*, unsigned short, bool, bool, bool, bool, unsigned char, unsigned char, unsigned char)
;;;4      //constructor, initialize: rcc, gpio, timer, NVIC
;;;5      InputCapture_TIM::InputCapture_TIM(TIM_TypeDef *TIMx, u16 minHz, bool enCh1, bool enCh2, bool enCh3, bool enCh4, u8 intGroup,u8 prePriority,u8 subPriority)
;;;6      {
;;;7      	_TIMx = TIMx;   //timer selected for input capture
;;;8      	_enCh1 = enCh1;
;;;9      	_enCh2 = enCh2;
;;;10     	_enCh3 = enCh3;
;;;11     	_enCh4 = enCh4;
;;;12     	
;;;13     	_ch1Cnt = _ch2Cnt = _ch3Cnt = _ch4Cnt = 0;
;;;14     	
;;;15     	//get gpio, rcc, and irq
;;;16     	if(TIMx==TIM1)      //Timer 1	
;;;17     	{
;;;18     		_port = _port2 = GPIOA;             //gpio port 
;;;19     		_ch1Pin = GPIO_Pin_8;               //gpio pin for ch1
;;;20     		_ch2Pin = GPIO_Pin_9;               //gpio pin for ch2
;;;21     		_ch3Pin = GPIO_Pin_10;              //gpio pin for ch3
;;;22     		_ch4Pin = GPIO_Pin_11;              //gpio pin for ch4
;;;23     		_IRQn = TIM1_CC_IRQn;               //timer IRQ channel
;;;24     		_timer_rcc = RCC_APB2Periph_TIM1;   //clock for timer
;;;25     		_gpio_rcc = RCC_APB2Periph_GPIOA;   //clock for gpio
;;;26     		
;;;27     		#ifdef USE_CAPTURE_TIM1
;;;28     		pICP1 = this;
;;;29     		#endif
;;;30     	}
;;;31     	else if(_TIMx==TIM2)//Timer 2
;;;32     	{
;;;33     		_port = _port2 = GPIOA;            //gpio port 
;;;34     		_ch1Pin = GPIO_Pin_0;              //gpio pin for ch1
;;;35     		_ch2Pin = GPIO_Pin_1;              //gpio pin for ch2
;;;36     		_ch3Pin = GPIO_Pin_1;              //gpio pin for ch3
;;;37     		_ch4Pin = GPIO_Pin_3;              //gpio pin for ch4
;;;38     		_IRQn = TIM2_IRQn;                 //timer IRQ channel
;;;39     		_timer_rcc = RCC_APB1Periph_TIM2;  //clock for timer
;;;40     		_gpio_rcc = RCC_APB2Periph_GPIOA;  //clock for gpio
;;;41     		
;;;42     		#ifdef USE_CAPTURE_TIM2
;;;43     		pICP2 = this;
;;;44     		#endif
;;;45     	}
;;;46     	else if(_TIMx==TIM3)//Timer 3
;;;47     	{
;;;48     		_port = GPIOA;                     //gpio port
;;;49     		_port2 = GPIOB;                    //gpio port 
;;;50     		_ch1Pin = GPIO_Pin_6;              //gpio pin for ch1
;;;51     		_ch2Pin = GPIO_Pin_7;              //gpio pin for ch2
;;;52     		_ch3Pin = GPIO_Pin_0;              //gpio pin for ch3
;;;53     		_ch4Pin = GPIO_Pin_1;              //gpio pin for ch4
;;;54     		_IRQn = TIM3_IRQn;                 //timer IRQ channel
;;;55     		_timer_rcc = RCC_APB1Periph_TIM3;  //clock for timer
;;;56     		_gpio_rcc = RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB;  //clock for gpio		
;;;57     		
;;;58     		#ifdef USE_CAPTURE_TIM3
;;;59     		pICP3 = this;
;;;60     		#endif
;;;61     	}
;;;62     	else if(_TIMx==TIM4)//Timer 4
;;;63     	{
;;;64     		_port = _port2 = GPIOB;            //gpio port 
;;;65     		_ch1Pin = GPIO_Pin_6;              //gpio pin for ch1
;;;66     		_ch2Pin = GPIO_Pin_7;              //gpio pin for ch2
;;;67     		_ch3Pin = GPIO_Pin_8;              //gpio pin for ch3
;;;68     		_ch4Pin = GPIO_Pin_9;              //gpio pin for ch4
;;;69     		_IRQn = TIM4_IRQn;                 //timer IRQ channel
;;;70     		_timer_rcc = RCC_APB1Periph_TIM4;  //clock for timer
;;;71     		_gpio_rcc = RCC_APB2Periph_GPIOB;  //clock for gpio
;;;72     		
;;;73     		#ifdef USE_CAPTURE_TIM4
;;;74     		pICP4 = this;
;;;75     		#endif
;;;76     	}
;;;77     	//RCC Initialize
;;;78     	if(_TIMx==TIM1) //advance timer
;;;79     	{
;;;80     		RCC_APB2PeriphClockCmd(_timer_rcc | _gpio_rcc, ENABLE);
;;;81     	}
;;;82     	else //normal timer
;;;83     	{
;;;84     		RCC_APB1PeriphClockCmd(_timer_rcc, ENABLE);
;;;85     		RCC_APB2PeriphClockCmd(_gpio_rcc, ENABLE);
;;;86     	}
;;;87     	//GPIO Initialize
;;;88     	if(!enCh1) _ch1Pin = 0;
;;;89     	if(!enCh2) _ch2Pin = 0;
;;;90     	if(!enCh3) _ch3Pin = 0;
;;;91     	if(!enCh4) _ch4Pin = 0;
;;;92     	GPIO_InitTypeDef GPIO_InitStructure;	
;;;93     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;94     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; 
;;;95     
;;;96     	GPIO_InitStructure.GPIO_Pin = _ch1Pin | _ch2Pin; 
;;;97     	GPIO_Init(_port, &GPIO_InitStructure);
;;;98     	GPIO_InitStructure.GPIO_Pin = _ch3Pin | _ch4Pin; 
;;;99     	GPIO_Init(_port2, &GPIO_InitStructure);
;;;100    
;;;101    	
;;;102    	//Timer Initialize
;;;103    	u32 res = 72000000 % minHz;	
;;;104    	u32 multi = 72000000/minHz;
;;;105    	if(res>minHz/2) multi++;
;;;106    	_prescaler = 1;
;;;107    	_period = multi;
;;;108    	while(_period>=65535)
;;;109    	{
;;;110    		_period = multi/(++_prescaler);
;;;111    	}
;;;112    	_resolution = 1000.0 / (minHz*_period);
;;;113    	TIM_DeInit(_TIMx);                                         //default setting
;;;114    	TIM_TimeBaseInitTypeDef TIM_BaseInitStructure;
;;;115    	TIM_BaseInitStructure.TIM_Period = _period-1;               //period 
;;;116    	TIM_BaseInitStructure.TIM_Prescaler = _prescaler-1;          //Prescaler
;;;117    	TIM_BaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;    //clock divsion
;;;118    	TIM_BaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//count direction
;;;119    	TIM_TimeBaseInit(_TIMx,&TIM_BaseInitStructure);	
;;;120    	TIM_ClearFlag(_TIMx, TIM_FLAG_Update);//clear 
;;;121    
;;;122    	//Input Capture Initialize
;;;123    	TIM_ICInitTypeDef  TIM_ICInitStructure;	
;;;124    	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;   //both rising and falling edge
;;;125    	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;	
;;;126    	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;     
;;;127    	TIM_ICInitStructure.TIM_ICFilter = 0x0; 
;;;128    	TIM_ICInitStructure.TIM_Channel = TIM_Channel_1; //channel 1    
;;;129    	TIM_ICInit(_TIMx, &TIM_ICInitStructure);
;;;130    	TIM_ITConfig(_TIMx, TIM_IT_CC1, _enCh1?ENABLE:DISABLE);
;;;131    	TIM_ICInitStructure.TIM_Channel = TIM_Channel_2; //channel 2   
;;;132    	TIM_ICInit(_TIMx, &TIM_ICInitStructure);
;;;133    	TIM_ITConfig(_TIMx, TIM_IT_CC2, _enCh2?ENABLE:DISABLE);
;;;134    	TIM_ICInitStructure.TIM_Channel = TIM_Channel_3; //channel 3   
;;;135    	TIM_ICInit(_TIMx, &TIM_ICInitStructure);
;;;136    	TIM_ITConfig(_TIMx, TIM_IT_CC3, _enCh3?ENABLE:DISABLE);
;;;137    	TIM_ICInitStructure.TIM_Channel = TIM_Channel_4; //channel 4   
;;;138    	TIM_ICInit(_TIMx, &TIM_ICInitStructure);
;;;139    	TIM_ITConfig(_TIMx, TIM_IT_CC4, _enCh4?ENABLE:DISABLE);	
;;;140      //NVIC Initialize	
;;;141    	switch(intGroup)// interrupt group setting
;;;142    	{
;;;143    		case 0:		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);		break;
;;;144    		case 1:		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);		break;
;;;145    		case 2:		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);		break;
;;;146    		case 3:		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_3);		break;
;;;147    		case 4:		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);		break;
;;;148    	}
;;;149    	NVIC_InitTypeDef NVIC_InitStructure;
;;;150    	NVIC_InitStructure.NVIC_IRQChannel = _IRQn;
;;;151    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = prePriority; 
;;;152    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = subPriority; 
;;;153    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;154    	NVIC_Init(&NVIC_InitStructure); 
;;;155    	
;;;156    	TIM_Cmd(_TIMx, ENABLE);
;;;157    }
;;;158    
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  2500              MOVS     r5,#0
000008  e9dda913          LDRD     r10,r9,[sp,#0x4c]
00000c  f8ddb048          LDR      r11,[sp,#0x48]
000010  6001              STR      r1,[r0,#0]
000012  f8803020          STRB     r3,[r0,#0x20]
000016  f880b021          STRB     r11,[r0,#0x21]
00001a  f880a022          STRB     r10,[r0,#0x22]
00001e  f8809023          STRB     r9,[r0,#0x23]
000022  82c5              STRH     r5,[r0,#0x16]
000024  8285              STRH     r5,[r0,#0x14]
000026  8245              STRH     r5,[r0,#0x12]
000028  4617              MOV      r7,r2
00002a  4604              MOV      r4,r0
00002c  8205              STRH     r5,[r0,#0x10]
00002e  48ff              LDR      r0,|L1.1068|
000030  2604              MOVS     r6,#4
000032  f1a14280          SUB      r2,r1,#0x40000000
000036  4698              MOV      r8,r3
000038  f5b23296          SUBS     r2,r2,#0x12c00
00003c  d00f              BEQ      |L1.94|
00003e  2302              MOVS     r3,#2
000040  f1b14f80          CMP      r1,#0x40000000
000044  d02c              BEQ      |L1.160|
000046  4afa              LDR      r2,|L1.1072|
000048  f1a14e80          SUB      lr,r1,#0x40000000
00004c  f04f0c40          MOV      r12,#0x40
000050  f5be6e80          SUBS     lr,lr,#0x400
000054  d014              BEQ      |L1.128|
000056  f5be6080          SUBS     r0,lr,#0x400
00005a  d02f              BEQ      |L1.188|
00005c  e03e              B        |L1.220|
                  |L1.94|
00005e  62a0              STR      r0,[r4,#0x28]
000060  6260              STR      r0,[r4,#0x24]
000062  f44f7080          MOV      r0,#0x100
000066  8320              STRH     r0,[r4,#0x18]
000068  0040              LSLS     r0,r0,#1
00006a  8360              STRH     r0,[r4,#0x1a]
00006c  0040              LSLS     r0,r0,#1
00006e  83a0              STRH     r0,[r4,#0x1c]
000070  0040              LSLS     r0,r0,#1
000072  83e0              STRH     r0,[r4,#0x1e]
000074  221b              MOVS     r2,#0x1b
000076  f884202c          STRB     r2,[r4,#0x2c]
00007a  e9c4060c          STRD     r0,r6,[r4,#0x30]
00007e  e02d              B        |L1.220|
                  |L1.128|
000080  e9c40209          STRD     r0,r2,[r4,#0x24]
000084  f8a4c018          STRH     r12,[r4,#0x18]
000088  2080              MOVS     r0,#0x80
00008a  8360              STRH     r0,[r4,#0x1a]
00008c  2001              MOVS     r0,#1
00008e  83a0              STRH     r0,[r4,#0x1c]
000090  83e3              STRH     r3,[r4,#0x1e]
000092  201d              MOVS     r0,#0x1d
000094  f884002c          STRB     r0,[r4,#0x2c]
000098  200c              MOVS     r0,#0xc
00009a  e9c4300c          STRD     r3,r0,[r4,#0x30]
00009e  e01d              B        |L1.220|
                  |L1.160|
0000a0  62a0              STR      r0,[r4,#0x28]
0000a2  6260              STR      r0,[r4,#0x24]
0000a4  2001              MOVS     r0,#1
0000a6  8320              STRH     r0,[r4,#0x18]
0000a8  8363              STRH     r3,[r4,#0x1a]
0000aa  83a3              STRH     r3,[r4,#0x1c]
0000ac  2108              MOVS     r1,#8
0000ae  83e1              STRH     r1,[r4,#0x1e]
0000b0  211c              MOVS     r1,#0x1c
0000b2  f884102c          STRB     r1,[r4,#0x2c]
0000b6  e9c4060c          STRD     r0,r6,[r4,#0x30]
0000ba  e015              B        |L1.232|
                  |L1.188|
0000bc  62a2              STR      r2,[r4,#0x28]
0000be  6262              STR      r2,[r4,#0x24]
0000c0  f8a4c018          STRH     r12,[r4,#0x18]
0000c4  2080              MOVS     r0,#0x80
0000c6  8360              STRH     r0,[r4,#0x1a]
0000c8  0040              LSLS     r0,r0,#1
0000ca  83a0              STRH     r0,[r4,#0x1c]
0000cc  0040              LSLS     r0,r0,#1
0000ce  83e0              STRH     r0,[r4,#0x1e]
0000d0  201e              MOVS     r0,#0x1e
0000d2  f884002c          STRB     r0,[r4,#0x2c]
0000d6  2008              MOVS     r0,#8
0000d8  e9c4600c          STRD     r6,r0,[r4,#0x30]
                  |L1.220|
0000dc  f1a14080          SUB      r0,r1,#0x40000000
0000e0  f5b03096          SUBS     r0,r0,#0x12c00
0000e4  f00080be          BEQ.W    |L1.612|
                  |L1.232|
0000e8  2101              MOVS     r1,#1
0000ea  6b20              LDR      r0,[r4,#0x30]
0000ec  f7fffffe          BL       RCC_APB1PeriphClockCmd
0000f0  2101              MOVS     r1,#1
0000f2  6b60              LDR      r0,[r4,#0x34]
0000f4  f7fffffe          BL       RCC_APB2PeriphClockCmd
                  |L1.248|
0000f8  f1b80f00          CMP      r8,#0
0000fc  bf08              IT       EQ
0000fe  8325              STRHEQ   r5,[r4,#0x18]
000100  f1bb0f00          CMP      r11,#0
000104  bf08              IT       EQ
000106  8365              STRHEQ   r5,[r4,#0x1a]
000108  f1ba0f00          CMP      r10,#0
00010c  bf08              IT       EQ
00010e  83a5              STRHEQ   r5,[r4,#0x1c]
000110  f1b90f00          CMP      r9,#0
000114  bf08              IT       EQ
000116  83e5              STRHEQ   r5,[r4,#0x1e]
000118  2003              MOVS     r0,#3
00011a  f88d000e          STRB     r0,[sp,#0xe]
00011e  f88d600f          STRB     r6,[sp,#0xf]
000122  8b20              LDRH     r0,[r4,#0x18]
000124  8b61              LDRH     r1,[r4,#0x1a]
000126  4308              ORRS     r0,r0,r1
000128  f8ad000c          STRH     r0,[sp,#0xc]
00012c  a903              ADD      r1,sp,#0xc
00012e  6a60              LDR      r0,[r4,#0x24]
000130  f7fffffe          BL       GPIO_Init
000134  8ba0              LDRH     r0,[r4,#0x1c]
000136  8be1              LDRH     r1,[r4,#0x1e]
000138  4308              ORRS     r0,r0,r1
00013a  f8ad000c          STRH     r0,[sp,#0xc]
00013e  a903              ADD      r1,sp,#0xc
000140  6aa0              LDR      r0,[r4,#0x28]
000142  f7fffffe          BL       GPIO_Init
000146  49bb              LDR      r1,|L1.1076|
000148  fbb1f0f7          UDIV     r0,r1,r7
00014c  fb071110          MLS      r1,r7,r0,r1
000150  ebb10f57          CMP      r1,r7,LSR #1
000154  bf88              IT       HI
000156  1c40              ADDHI    r0,r0,#1
000158  f04f0801          MOV      r8,#1
00015c  e9c4800e          STRD     r8,r0,[r4,#0x38]
000160  f64f71ff          MOV      r1,#0xffff
000164  4288              CMP      r0,r1
000166  d307              BCC      |L1.376|
                  |L1.360|
000168  6ba2              LDR      r2,[r4,#0x38]
00016a  1c52              ADDS     r2,r2,#1
00016c  63a2              STR      r2,[r4,#0x38]
00016e  fbb0f2f2          UDIV     r2,r0,r2
000172  63e2              STR      r2,[r4,#0x3c]
000174  428a              CMP      r2,r1
000176  d2f7              BCS      |L1.360|
                  |L1.376|
000178  6be0              LDR      r0,[r4,#0x3c]
00017a  4378              MULS     r0,r7,r0
00017c  f7fffffe          BL       __aeabi_ui2d
000180  4602              MOV      r2,r0
000182  460b              MOV      r3,r1
000184  2000              MOVS     r0,#0
000186  49ac              LDR      r1,|L1.1080|
000188  f7fffffe          BL       __aeabi_ddiv
00018c  e9c40102          STRD     r0,r1,[r4,#8]
000190  6820              LDR      r0,[r4,#0]
000192  f7fffffe          BL       TIM_DeInit
000196  8fa0              LDRH     r0,[r4,#0x3c]
000198  a904              ADD      r1,sp,#0x10
00019a  1e40              SUBS     r0,r0,#1
00019c  f8ad0014          STRH     r0,[sp,#0x14]
0001a0  8f20              LDRH     r0,[r4,#0x38]
0001a2  f8ad5016          STRH     r5,[sp,#0x16]
0001a6  1e40              SUBS     r0,r0,#1
0001a8  f8ad0010          STRH     r0,[sp,#0x10]
0001ac  f8ad5012          STRH     r5,[sp,#0x12]
0001b0  6820              LDR      r0,[r4,#0]
0001b2  f7fffffe          BL       TIM_TimeBaseInit
0001b6  2101              MOVS     r1,#1
0001b8  6820              LDR      r0,[r4,#0]
0001ba  f7fffffe          BL       TIM_ClearFlag
0001be  200a              MOVS     r0,#0xa
0001c0  f8ad0002          STRH     r0,[sp,#2]
0001c4  f8ad8004          STRH     r8,[sp,#4]
0001c8  f8ad5006          STRH     r5,[sp,#6]
0001cc  f8ad5008          STRH     r5,[sp,#8]
0001d0  f8ad5000          STRH     r5,[sp,#0]
0001d4  4669              MOV      r1,sp
0001d6  6820              LDR      r0,[r4,#0]
0001d8  f7fffffe          BL       TIM_ICInit
0001dc  f8940020          LDRB     r0,[r4,#0x20]
0001e0  2800              CMP      r0,#0
0001e2  bf14              ITE      NE
0001e4  2201              MOVNE    r2,#1
0001e6  2200              MOVEQ    r2,#0
0001e8  2102              MOVS     r1,#2
0001ea  6820              LDR      r0,[r4,#0]
0001ec  f7fffffe          BL       TIM_ITConfig
0001f0  f8ad6000          STRH     r6,[sp,#0]
0001f4  4669              MOV      r1,sp
0001f6  6820              LDR      r0,[r4,#0]
0001f8  f7fffffe          BL       TIM_ICInit
0001fc  f8940021          LDRB     r0,[r4,#0x21]
000200  2800              CMP      r0,#0
000202  bf14              ITE      NE
000204  2201              MOVNE    r2,#1
000206  2200              MOVEQ    r2,#0
000208  2104              MOVS     r1,#4
00020a  6820              LDR      r0,[r4,#0]
00020c  f7fffffe          BL       TIM_ITConfig
000210  2008              MOVS     r0,#8
000212  f8ad0000          STRH     r0,[sp,#0]
000216  4669              MOV      r1,sp
000218  6820              LDR      r0,[r4,#0]
00021a  f7fffffe          BL       TIM_ICInit
00021e  f8940022          LDRB     r0,[r4,#0x22]
000222  2800              CMP      r0,#0
000224  bf14              ITE      NE
000226  2201              MOVNE    r2,#1
000228  2200              MOVEQ    r2,#0
00022a  2108              MOVS     r1,#8
00022c  6820              LDR      r0,[r4,#0]
00022e  f7fffffe          BL       TIM_ITConfig
000232  200c              MOVS     r0,#0xc
000234  f8ad0000          STRH     r0,[sp,#0]
000238  4669              MOV      r1,sp
00023a  6820              LDR      r0,[r4,#0]
00023c  f7fffffe          BL       TIM_ICInit
000240  f8940023          LDRB     r0,[r4,#0x23]
000244  2800              CMP      r0,#0
000246  bf14              ITE      NE
000248  2201              MOVNE    r2,#1
00024a  2200              MOVEQ    r2,#0
00024c  2110              MOVS     r1,#0x10
00024e  6820              LDR      r0,[r4,#0]
000250  f7fffffe          BL       TIM_ITConfig
000254  9815              LDR      r0,[sp,#0x54]
000256  2805              CMP      r0,#5
000258  d21d              BCS      |L1.662|
00025a  e8dff000          TBB      [pc,r0]
00025e  0a0d              DCB      0x0a,0x0d
000260  10131800          DCB      0x10,0x13,0x18,0x00
                  |L1.612|
000264  e9d4010c          LDRD     r0,r1,[r4,#0x30]
000268  4308              ORRS     r0,r0,r1
00026a  2101              MOVS     r1,#1
00026c  f7fffffe          BL       RCC_APB2PeriphClockCmd
000270  e742              B        |L1.248|
000272  f44f60e0          MOV      r0,#0x700
000276  e007              B        |L1.648|
000278  f44f60c0          MOV      r0,#0x600
00027c  e004              B        |L1.648|
00027e  f44f60a0          MOV      r0,#0x500
000282  e001              B        |L1.648|
000284  f44f6080          MOV      r0,#0x400
                  |L1.648|
000288  f7fffffe          BL       NVIC_PriorityGroupConfig
00028c  e003              B        |L1.662|
00028e  f44f7040          MOV      r0,#0x300
000292  f7fffffe          BL       NVIC_PriorityGroupConfig
                  |L1.662|
000296  f894002c          LDRB     r0,[r4,#0x2c]
00029a  f88d001c          STRB     r0,[sp,#0x1c]
00029e  9816              LDR      r0,[sp,#0x58]
0002a0  f88d001d          STRB     r0,[sp,#0x1d]
0002a4  9817              LDR      r0,[sp,#0x5c]
0002a6  f88d001e          STRB     r0,[sp,#0x1e]
0002aa  f88d801f          STRB     r8,[sp,#0x1f]
0002ae  a807              ADD      r0,sp,#0x1c
0002b0  f7fffffe          BL       NVIC_Init
0002b4  2101              MOVS     r1,#1
0002b6  6820              LDR      r0,[r4,#0]
0002b8  f7fffffe          BL       TIM_Cmd
0002bc  b009              ADD      sp,sp,#0x24
0002be  4620              MOV      r0,r4
0002c0  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  _ZN16InputCapture_TIM5StartEv PROC ; InputCapture_TIM::Start()
;;;159    //start work
;;;160    void InputCapture_TIM::Start()
0002c4  6800              LDR      r0,[r0,#0]
;;;161    {
;;;162    	TIM_Cmd(_TIMx, ENABLE);//start timer
0002c6  2101              MOVS     r1,#1
0002c8  f7ffbffe          B.W      TIM_Cmd
;;;163    }
;;;164    //stop work
                          ENDP

                  _ZN16InputCapture_TIM4StopEv PROC ; InputCapture_TIM::Stop()
;;;165    void InputCapture_TIM::Stop()
0002cc  6800              LDR      r0,[r0,#0]
;;;166    {
;;;167    	TIM_Cmd(_TIMx,DISABLE);//stop timer
0002ce  2100              MOVS     r1,#0
0002d0  f7ffbffe          B.W      TIM_Cmd
;;;168    }
;;;169    //input capture interrupt response function
                          ENDP

                  _ZN16InputCapture_TIM3IRQEv PROC ; InputCapture_TIM::IRQ()
;;;170    void InputCapture_TIM::IRQ()
0002d4  6802              LDR      r2,[r0,#0]
;;;171    {
;;;172      static u16 cnt1, cnt2, cnt3, cnt4, ccr;
;;;173    	//channel 1
;;;174    	if(_TIMx->SR & TIM_IT_CC1)//
0002d6  8a11              LDRH     r1,[r2,#0x10]
0002d8  f0110f02          TST      r1,#2
;;;175    	{
;;;176    		ccr = _TIMx->CCR1;         //read capture counter register, clear intterupt flag
0002dc  4957              LDR      r1,|L1.1084|
0002de  d023              BEQ      |L1.808|
0002e0  8e93              LDRH     r3,[r2,#0x34]
0002e2  810b              STRH     r3,[r1,#8]
;;;177    		_TIMx->SR &= ~TIM_FLAG_CC1OF;  //clear capture flag
0002e4  8a13              LDRH     r3,[r2,#0x10]
0002e6  f4237300          BIC      r3,r3,#0x200
0002ea  8213              STRH     r3,[r2,#0x10]
;;;178    		if(_port->IDR & _ch1Pin) 		   //rising edge interrupt
0002ec  6a42              LDR      r2,[r0,#0x24]
0002ee  6892              LDR      r2,[r2,#8]
0002f0  8b03              LDRH     r3,[r0,#0x18]
0002f2  421a              TST      r2,r3
0002f4  d007              BEQ      |L1.774|
;;;179    		{
;;;180    			cnt1 = ccr;            //start tick
0002f6  890a              LDRH     r2,[r1,#8]  ; ccr
0002f8  800a              STRH     r2,[r1,#0]
;;;181    			_TIMx->CCER |= (1<<1); //
0002fa  6802              LDR      r2,[r0,#0]
0002fc  8c13              LDRH     r3,[r2,#0x20]
0002fe  f0430302          ORR      r3,r3,#2
000302  8413              STRH     r3,[r2,#0x20]
000304  e010              B        |L1.808|
                  |L1.774|
;;;182    		}		
;;;183    		else                          //falling edge interrupt
;;;184    		{
;;;185    			_TIMx->CCER &= ~(1<<1);
000306  6802              LDR      r2,[r0,#0]
000308  8c13              LDRH     r3,[r2,#0x20]
00030a  f0230302          BIC      r3,r3,#2
00030e  8413              STRH     r3,[r2,#0x20]
;;;186    			if(ccr >= cnt1)        //within one period
000310  890a              LDRH     r2,[r1,#8]  ; ccr
000312  880b              LDRH     r3,[r1,#0]  ; cnt1
000314  429a              CMP      r2,r3
;;;187    			{
;;;188    				_ch1Cnt = ccr - cnt1;
000316  bf28              IT       CS
000318  1ad2              SUBCS    r2,r2,r3
00031a  d204              BCS      |L1.806|
;;;189    			}
;;;190    			else                   //cross two period
;;;191    			{
;;;192    				_ch1Cnt = _period - cnt1 + ccr;
00031c  f8b0c03c          LDRH     r12,[r0,#0x3c]
000320  ebac0303          SUB      r3,r12,r3
000324  441a              ADD      r2,r2,r3
                  |L1.806|
000326  8202              STRH     r2,[r0,#0x10]         ;188
                  |L1.808|
;;;193    			}
;;;194    		}
;;;195    	}
;;;196    	//channel 2
;;;197    	if(_TIMx->SR & TIM_IT_CC2)//
000328  6802              LDR      r2,[r0,#0]
00032a  8a13              LDRH     r3,[r2,#0x10]
00032c  f0130f04          TST      r3,#4
000330  d01f              BEQ      |L1.882|
;;;198    	{
;;;199    		ccr = _TIMx->CCR2;         //read capture counter register, clear intterupt flag
000332  8f13              LDRH     r3,[r2,#0x38]
000334  810b              STRH     r3,[r1,#8]
;;;200    		if(_port->IDR & _ch2Pin) 		   //rising edge interrupt
000336  6a43              LDR      r3,[r0,#0x24]
000338  689b              LDR      r3,[r3,#8]
00033a  f8b0c01a          LDRH     r12,[r0,#0x1a]
00033e  ea130f0c          TST      r3,r12
000342  d006              BEQ      |L1.850|
;;;201    		{
;;;202    			cnt2 = ccr;            //start tick
000344  890b              LDRH     r3,[r1,#8]  ; ccr
000346  804b              STRH     r3,[r1,#2]
;;;203    			_TIMx->CCER |= (1<<5); //
000348  8c13              LDRH     r3,[r2,#0x20]
00034a  f0430320          ORR      r3,r3,#0x20
00034e  8413              STRH     r3,[r2,#0x20]
000350  e00f              B        |L1.882|
                  |L1.850|
;;;204    		}		
;;;205    		else                          //falling edge interrupt
;;;206    		{
;;;207    			_TIMx->CCER &= ~(1<<5);
000352  8c13              LDRH     r3,[r2,#0x20]
000354  f0230320          BIC      r3,r3,#0x20
000358  8413              STRH     r3,[r2,#0x20]
;;;208    			if(ccr >= cnt2)        //within one period
00035a  890a              LDRH     r2,[r1,#8]  ; ccr
00035c  884b              LDRH     r3,[r1,#2]  ; cnt2
00035e  429a              CMP      r2,r3
;;;209    			{
;;;210    				_ch2Cnt = ccr - cnt2;
000360  bf28              IT       CS
000362  1ad2              SUBCS    r2,r2,r3
000364  d204              BCS      |L1.880|
;;;211    			}
;;;212    			else                   //cross two period
;;;213    			{
;;;214    				_ch2Cnt = _period - cnt2 + ccr;
000366  f8b0c03c          LDRH     r12,[r0,#0x3c]
00036a  ebac0303          SUB      r3,r12,r3
00036e  441a              ADD      r2,r2,r3
                  |L1.880|
000370  8242              STRH     r2,[r0,#0x12]         ;210
                  |L1.882|
;;;215    			}
;;;216    		}
;;;217    	}
;;;218    	//channel 3
;;;219    	if(_TIMx->SR & TIM_IT_CC3)//
000372  6802              LDR      r2,[r0,#0]
000374  8a13              LDRH     r3,[r2,#0x10]
000376  f0130f08          TST      r3,#8
00037a  d01f              BEQ      |L1.956|
;;;220    	{
;;;221    		ccr = _TIMx->CCR3;         //read capture counter register, clear intterupt flag
00037c  8f93              LDRH     r3,[r2,#0x3c]
00037e  810b              STRH     r3,[r1,#8]
;;;222    		if(_port2->IDR & _ch3Pin) 		   //rising edge interrupt
000380  6a83              LDR      r3,[r0,#0x28]
000382  689b              LDR      r3,[r3,#8]
000384  f8b0c01c          LDRH     r12,[r0,#0x1c]
000388  ea130f0c          TST      r3,r12
00038c  d006              BEQ      |L1.924|
;;;223    		{
;;;224    			cnt3 = ccr;            //start tick
00038e  890b              LDRH     r3,[r1,#8]  ; ccr
000390  808b              STRH     r3,[r1,#4]
;;;225    			_TIMx->CCER |= (1<<9); //
000392  8c13              LDRH     r3,[r2,#0x20]
000394  f4437300          ORR      r3,r3,#0x200
000398  8413              STRH     r3,[r2,#0x20]
00039a  e00f              B        |L1.956|
                  |L1.924|
;;;226    		}		
;;;227    		else                          //falling edge interrupt
;;;228    		{
;;;229    			_TIMx->CCER &= ~(1<<9);
00039c  8c13              LDRH     r3,[r2,#0x20]
00039e  f4237300          BIC      r3,r3,#0x200
0003a2  8413              STRH     r3,[r2,#0x20]
;;;230    			if(ccr >= cnt3)        //within one period
0003a4  890a              LDRH     r2,[r1,#8]  ; ccr
0003a6  888b              LDRH     r3,[r1,#4]  ; cnt3
0003a8  429a              CMP      r2,r3
;;;231    			{
;;;232    				_ch3Cnt = ccr - cnt3;
0003aa  bf28              IT       CS
0003ac  1ad2              SUBCS    r2,r2,r3
0003ae  d204              BCS      |L1.954|
;;;233    			}
;;;234    			else                   //cross two period
;;;235    			{
;;;236    				_ch3Cnt = _period - cnt3 + ccr;
0003b0  f8b0c03c          LDRH     r12,[r0,#0x3c]
0003b4  ebac0303          SUB      r3,r12,r3
0003b8  441a              ADD      r2,r2,r3
                  |L1.954|
0003ba  8282              STRH     r2,[r0,#0x14]         ;232
                  |L1.956|
;;;237    			}
;;;238    		}
;;;239    	}
;;;240    	//channel 4
;;;241    	if(_TIMx->SR & TIM_IT_CC4)//
0003bc  6802              LDR      r2,[r0,#0]
0003be  8a13              LDRH     r3,[r2,#0x10]
0003c0  f0130f10          TST      r3,#0x10
;;;242    	{
;;;243    		ccr = _TIMx->CCR4;         //read capture counter register, clear intterupt flag
;;;244    		if(_port2->IDR & _ch4Pin) 		   //rising edge interrupt
;;;245    		{
;;;246    			cnt4 = ccr;            //start tick
;;;247    			_TIMx->CCER |= (1<<13); //
;;;248    		}		
;;;249    		else                          //falling edge interrupt
;;;250    		{
;;;251    			_TIMx->CCER &= ~(1<<13);
;;;252    			if(ccr >= cnt4)        //within one period
;;;253    			{
;;;254    				_ch4Cnt = ccr - cnt4;//falling count - rising count
;;;255    			}
;;;256    			else                   //cross two period
;;;257    			{
;;;258    				_ch4Cnt = _period - cnt4 + ccr; //T - rising count + falling count
;;;259    			}
;;;260    		}
;;;261    	}
;;;262    }//return caputre channel value, unit: ms
0003c4  bf08              IT       EQ
0003c6  4770              BXEQ     lr
0003c8  f8b23040          LDRH     r3,[r2,#0x40]         ;243
0003cc  810b              STRH     r3,[r1,#8]            ;243
0003ce  6a83              LDR      r3,[r0,#0x28]         ;244
0003d0  689b              LDR      r3,[r3,#8]            ;244
0003d2  f8b0c01e          LDRH     r12,[r0,#0x1e]        ;244
0003d6  ea130f0c          TST      r3,r12                ;244
0003da  d006              BEQ      |L1.1002|
0003dc  8908              LDRH     r0,[r1,#8]            ;246  ; ccr
0003de  80c8              STRH     r0,[r1,#6]            ;246
0003e0  8c10              LDRH     r0,[r2,#0x20]         ;247
0003e2  f4405000          ORR      r0,r0,#0x2000         ;247
0003e6  8410              STRH     r0,[r2,#0x20]         ;247
0003e8  4770              BX       lr
                  |L1.1002|
0003ea  8c13              LDRH     r3,[r2,#0x20]         ;251
0003ec  f4235300          BIC      r3,r3,#0x2000         ;251
0003f0  8413              STRH     r3,[r2,#0x20]         ;251
0003f2  890a              LDRH     r2,[r1,#8]            ;252  ; ccr
0003f4  88c9              LDRH     r1,[r1,#6]            ;252  ; cnt4
0003f6  428a              CMP      r2,r1                 ;252
0003f8  bf2f              ITEEE    CS                    ;254
0003fa  1a51              SUBCS    r1,r2,r1              ;254
0003fc  8f83              LDRHCC   r3,[r0,#0x3c]         ;258
0003fe  1a59              SUBCC    r1,r3,r1              ;258
000400  4411              ADDCC    r1,r2                 ;258
000402  82c1              STRH     r1,[r0,#0x16]         ;258
000404  4770              BX       lr
;;;263    double InputCapture_TIM::operator[](u8 chNum)
                          ENDP

                  _ZN16InputCapture_TIMixEh PROC ; InputCapture_TIM::operator [](unsigned char)
000406  b510              PUSH     {r4,lr}
;;;264    {
000408  4604              MOV      r4,r0
;;;265    	if(chNum==1)
00040a  2901              CMP      r1,#1
00040c  d01c              BEQ      |L1.1096|
;;;266    		return _ch1Cnt*_resolution;
;;;267    	else if(chNum==2)
00040e  2902              CMP      r1,#2
000410  d023              BEQ      |L1.1114|
;;;268    		return _ch2Cnt*_resolution;
;;;269      else if(chNum==3)
000412  2903              CMP      r1,#3
000414  d02a              BEQ      |L1.1132|
;;;270    		return _ch3Cnt*_resolution;	
;;;271    	else if(chNum==4)
000416  2904              CMP      r1,#4
;;;272    		return _ch4Cnt*_resolution;
;;;273    	else
;;;274    		return 0;
000418  bf1e              ITTT     NE
00041a  2000              MOVNE    r0,#0
00041c  4601              MOVNE    r1,r0
;;;275    }
00041e  bd10              POPNE    {r4,pc}
000420  8ae0              LDRH     r0,[r4,#0x16]         ;272
000422  f7fffffe          BL       __aeabi_ui2d
000426  e9d42302          LDRD     r2,r3,[r4,#8]         ;272
00042a  e009              B        |L1.1088|
                  |L1.1068|
                          DCD      0x40010800
                  |L1.1072|
                          DCD      0x40010c00
                  |L1.1076|
                          DCD      0x044aa200
                  |L1.1080|
                          DCD      0x408f4000
                  |L1.1084|
                          DCD      ||.data||
                  |L1.1088|
000440  e8bd4010          POP      {r4,lr}               ;272
000444  f7ffbffe          B.W      __aeabi_dmul
                  |L1.1096|
000448  8a20              LDRH     r0,[r4,#0x10]         ;266
00044a  f7fffffe          BL       __aeabi_ui2d
00044e  e9d42302          LDRD     r2,r3,[r4,#8]         ;266
000452  e8bd4010          POP      {r4,lr}               ;266
000456  f7ffbffe          B.W      __aeabi_dmul
                  |L1.1114|
00045a  8a60              LDRH     r0,[r4,#0x12]         ;268
00045c  f7fffffe          BL       __aeabi_ui2d
000460  e9d42302          LDRD     r2,r3,[r4,#8]         ;268
000464  e8bd4010          POP      {r4,lr}               ;268
000468  f7ffbffe          B.W      __aeabi_dmul
                  |L1.1132|
00046c  8aa0              LDRH     r0,[r4,#0x14]         ;270
00046e  f7fffffe          BL       __aeabi_ui2d
000472  e9d42302          LDRD     r2,r3,[r4,#8]         ;270
000476  e8bd4010          POP      {r4,lr}               ;270
00047a  f7ffbffe          B.W      __aeabi_dmul
;;;276    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=1

                  cnt1
000000  0000              DCB      0x00,0x00
                  cnt2
000002  0000              DCB      0x00,0x00
                  cnt3
000004  0000              DCB      0x00,0x00
                  cnt4
000006  0000              DCB      0x00,0x00
                  ||ccr||
000008  0000              DCB      0x00,0x00
