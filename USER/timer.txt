; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o..\obj\timer.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\timer.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\timer.crf ..\C++LIB\OnChip\Timer\Timer.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN5Timer10ConversionEttt PROC ; Timer::Conversion(unsigned short, unsigned short, unsigned short)
;;;96     */	
;;;97     void Timer::Conversion(u16 s,u16 ms,u16 us) //将时分秒转化为预分频和初值
000000  b410              PUSH     {r4}
;;;98     {
;;;99     	u32 time;
;;;100    	u16 tempPsc;//用于暂存计算值
;;;101    	u32 tempArr=0xfffff;
;;;102    	
;;;103    	
;;;104    	time=s*1000000+ms*1000+us; //计算总时间 单位us
000002  4c7c              LDR      r4,|L1.500|
000004  f8dfc1e8          LDR      r12,|L1.496|
000008  4361              MULS     r1,r4,r1
00000a  eb020442          ADD      r4,r2,r2,LSL #1
00000e  ebc412c2          RSB      r2,r4,r2,LSL #7
000012  eb0101c2          ADD      r1,r1,r2,LSL #3
000016  4419              ADD      r1,r1,r3
;;;105    	if(time<COEFFICIENT) //如果一分频可以满足
000018  f240328f          MOV      r2,#0x38f
00001c  4291              CMP      r1,r2
;;;106    		mPsc=1;
00001e  bf34              ITE      CC
000020  2201              MOVCC    r2,#1
;;;107    	else
;;;108    		mPsc=time/COEFFICIENT; //计算出最相近的预分频
000022  fbb1f2f2          UDIVCS   r2,r1,r2
000026  8042              STRH     r2,[r0,#2]
;;;109    	
;;;110    	tempPsc=mPsc;	//保存初次计算结果
;;;111    	
;;;112    //	当计算出的ARR没有小数且ARR小于0xffff时退出循环，如果mps大于了65535 也退出
;;;113    	while( ((time*72)% mPsc!=0  ||  tempArr>0xffff ) && mPsc<=65535)//如果计算的初值是个整数，或者没有找到可以计算出整数的分频数
;;;114    	{
;;;115    		mPsc++;	
;;;116    		tempArr=(time*72)/mPsc; //计算出初值
000028  eb0101c1          ADD      r1,r1,r1,LSL #3
00002c  b293              UXTH     r3,r2                 ;110
00002e  00c9              LSLS     r1,r1,#3
000030  e004              B        |L1.60|
                  |L1.50|
000032  1c52              ADDS     r2,r2,#1              ;98
000034  b292              UXTH     r2,r2                 ;115
000036  fbb1fcf2          UDIV     r12,r1,r2
00003a  8042              STRH     r2,[r0,#2]            ;115
                  |L1.60|
00003c  b292              UXTH     r2,r2
00003e  fbb1f4f2          UDIV     r4,r1,r2
000042  fb021414          MLS      r4,r2,r4,r1
000046  2c00              CMP      r4,#0
000048  d1f3              BNE      |L1.50|
00004a  f5bc3f80          CMP      r12,#0x10000
00004e  d2f0              BCS      |L1.50|
;;;117    	}
;;;118    	
;;;119    	if(mPsc>=65535) //如果找到能够整除的分频值，则选用精度最大的分频值
000050  b291              UXTH     r1,r2
000052  f64f72ff          MOV      r2,#0xffff
000056  4291              CMP      r1,r2
;;;120    	{
;;;121    		mPsc=tempPsc;
000058  bf2c              ITE      CS
00005a  8043              STRHCS   r3,[r0,#2]
;;;122    		tempArr=(time*72)/mPsc; //计算出初值
;;;123    	}
;;;124    	else
;;;125    		mArr=tempArr;
00005c  f8a0c000          STRHCC   r12,[r0,#0]
;;;126    	
;;;127    	
;;;128    	
;;;129    }
000060  bc10              POP      {r4}
000062  4770              BX       lr
;;;130    
                          ENDP

                  _ZN5TimerC2EP11TIM_TypeDefttthhh                  ; Alternate entry point ; Timer::Timer__sub_object(TIM_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
                  _ZN5TimerC1EP11TIM_TypeDefttthhh PROC ; Timer::Timer(TIM_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
;;;2      
;;;3      Timer::Timer(TIM_TypeDef *timer,u16 second,u16 millisecond,u16 microsecond,u8 Prioritygroup,u8 preemprionPriority,u8 subPriority)
;;;4      {
;;;5      
;;;6      	//通过计算的出了ARR PSC
;;;7      	uint8_t timerIrqChannel;
;;;8      	TIM_TimeBaseInitTypeDef TIM_BaseInitStructure;
;;;9      	mTempTimer=timer;
;;;10     	NVIC_InitTypeDef NVIC_InitStructure;
;;;11         Conversion(second,millisecond,microsecond);
;;;12     	
;;;13     	if(timer==TIM1)
;;;14     	{
;;;15     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
;;;16     		timerIrqChannel=TIM1_UP_IRQn;
;;;17     		
;;;18     	}
;;;19     	else if(timer==TIM2)
;;;20     	{
;;;21     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;22     		timerIrqChannel=TIM2_IRQn;
;;;23     	}
;;;24     	else if(timer==TIM3)
;;;25     	{
;;;26     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;27     		timerIrqChannel=TIM3_IRQn;
;;;28     	}
;;;29     	else if(timer==TIM4)
;;;30     	{
;;;31     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
;;;32     		timerIrqChannel=TIM4_IRQn;
;;;33     	}
;;;34     	else
;;;35     	{
;;;36     	
;;;37     	}
;;;38     		//TIM_InternalClockConfig(timer);
;;;39     	
;;;40     //		TIM_DeInit(timer);//将寄存器重设为缺省值
;;;41     		TIM_BaseInitStructure.TIM_Period = mArr-1; //设置初值
;;;42     		TIM_BaseInitStructure.TIM_Prescaler =mPsc-1;//设置预分频
;;;43     		TIM_BaseInitStructure.TIM_ClockDivision = 0;//设置时钟分割
;;;44     	  TIM_BaseInitStructure.TIM_RepetitionCounter=0;
;;;45     		TIM_BaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//设置计数方式
;;;46     		TIM_TimeBaseInit(timer,&TIM_BaseInitStructure);
;;;47     		TIM_ClearFlag(timer, TIM_FLAG_Update);//清空中断标识   写了就进不了中断了
;;;48     		TIM_ITConfig(timer, TIM_IT_Update, ENABLE); //使能中断
;;;49     	
;;;50     	switch(Prioritygroup)//中断分组
;;;51     	{
;;;52     		case 0:
;;;53     			NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
;;;54     			break;
;;;55     		case 1:
;;;56     			NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
;;;57     			break;
;;;58     		case 2:
;;;59     			NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
;;;60     			break;
;;;61     		default:
;;;62     			NVIC_PriorityGroupConfig(NVIC_PriorityGroup_3);
;;;63     			break;
;;;64     		case 4:
;;;65     			NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
;;;66     			break;
;;;67     	}
;;;68     		NVIC_InitStructure.NVIC_IRQChannel =timerIrqChannel;
;;;69     		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemprionPriority;  //先占优先
;;;70     		NVIC_InitStructure.NVIC_IRQChannelSubPriority = subPriority;  //从优先
;;;71     		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
;;;72     		NVIC_Init(&NVIC_InitStructure);  //初始化NVIC寄存器
;;;73     	TIM_Cmd(mTempTimer, ENABLE);//开启定时器
;;;74     	/**/
;;;75     }
;;;76     
000064  e92d47f0          PUSH     {r4-r10,lr}
000068  b084              SUB      sp,sp,#0x10
00006a  460d              MOV      r5,r1
00006c  f8dfc184          LDR      r12,|L1.500|
000070  e9dd1a0c          LDRD     r1,r10,[sp,#0x30]
000074  fb02f20c          MUL      r2,r2,r12
000078  e9dd980e          LDRD     r9,r8,[sp,#0x38]
00007c  eb030c43          ADD      r12,r3,r3,LSL #1
000080  ebcc13c3          RSB      r3,r12,r3,LSL #7
000084  eb0202c3          ADD      r2,r2,r3,LSL #3
000088  4604              MOV      r4,r0
00008a  6045              STR      r5,[r0,#4]
00008c  4411              ADD      r1,r1,r2
00008e  4858              LDR      r0,|L1.496|
000090  f240328f          MOV      r2,#0x38f
000094  2701              MOVS     r7,#1
000096  4291              CMP      r1,r2
000098  bf32              ITEE     CC
00009a  8067              STRHCC   r7,[r4,#2]
00009c  fbb1f2f2          UDIVCS   r2,r1,r2
0000a0  8062              STRHCS   r2,[r4,#2]
0000a2  8863              LDRH     r3,[r4,#2]
0000a4  eb0101c1          ADD      r1,r1,r1,LSL #3
0000a8  00c9              LSLS     r1,r1,#3
0000aa  e004              B        |L1.182|
                  |L1.172|
0000ac  1c50              ADDS     r0,r2,#1
0000ae  b280              UXTH     r0,r0
0000b0  8060              STRH     r0,[r4,#2]
0000b2  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.182|
0000b6  8862              LDRH     r2,[r4,#2]
0000b8  fbb1fcf2          UDIV     r12,r1,r2
0000bc  fb021c1c          MLS      r12,r2,r12,r1
0000c0  f1bc0f00          CMP      r12,#0
0000c4  d1f2              BNE      |L1.172|
0000c6  f5b03f80          CMP      r0,#0x10000
0000ca  d2ef              BCS      |L1.172|
0000cc  8861              LDRH     r1,[r4,#2]
0000ce  f64f72ff          MOV      r2,#0xffff
0000d2  4291              CMP      r1,r2
0000d4  bf2c              ITE      CS
0000d6  8063              STRHCS   r3,[r4,#2]
0000d8  8020              STRHCC   r0,[r4,#0]
0000da  f1a54080          SUB      r0,r5,#0x40000000
0000de  f5b03096          SUBS     r0,r0,#0x12c00
0000e2  d009              BEQ      |L1.248|
0000e4  f1b54f80          CMP      r5,#0x40000000
0000e8  d012              BEQ      |L1.272|
0000ea  f5103094          ADDS     r0,r0,#0x12800
0000ee  d009              BEQ      |L1.260|
0000f0  f5b06080          SUBS     r0,r0,#0x400
0000f4  d012              BEQ      |L1.284|
0000f6  e016              B        |L1.294|
                  |L1.248|
0000f8  2101              MOVS     r1,#1
0000fa  02c8              LSLS     r0,r1,#11
0000fc  f7fffffe          BL       RCC_APB2PeriphClockCmd
000100  2619              MOVS     r6,#0x19
000102  e010              B        |L1.294|
                  |L1.260|
000104  2101              MOVS     r1,#1
000106  2002              MOVS     r0,#2
000108  f7fffffe          BL       RCC_APB1PeriphClockCmd
00010c  261d              MOVS     r6,#0x1d
00010e  e00a              B        |L1.294|
                  |L1.272|
000110  2101              MOVS     r1,#1
000112  4608              MOV      r0,r1
000114  f7fffffe          BL       RCC_APB1PeriphClockCmd
000118  261c              MOVS     r6,#0x1c
00011a  e004              B        |L1.294|
                  |L1.284|
00011c  2101              MOVS     r1,#1
00011e  2004              MOVS     r0,#4
000120  f7fffffe          BL       RCC_APB1PeriphClockCmd
000124  261e              MOVS     r6,#0x1e
                  |L1.294|
000126  8820              LDRH     r0,[r4,#0]
000128  4669              MOV      r1,sp
00012a  1e40              SUBS     r0,r0,#1
00012c  f8ad0004          STRH     r0,[sp,#4]
000130  8860              LDRH     r0,[r4,#2]
000132  1e40              SUBS     r0,r0,#1
000134  f8ad0000          STRH     r0,[sp,#0]
000138  2000              MOVS     r0,#0
00013a  f8ad0006          STRH     r0,[sp,#6]
00013e  f88d0008          STRB     r0,[sp,#8]
000142  f8ad0002          STRH     r0,[sp,#2]
000146  4628              MOV      r0,r5
000148  f7fffffe          BL       TIM_TimeBaseInit
00014c  2101              MOVS     r1,#1
00014e  4628              MOV      r0,r5
000150  f7fffffe          BL       TIM_ClearFlag
000154  2201              MOVS     r2,#1
000156  4611              MOV      r1,r2
000158  4628              MOV      r0,r5
00015a  f7fffffe          BL       TIM_ITConfig
00015e  f1ba0f00          CMP      r10,#0
000162  bf08              IT       EQ
000164  f44f60e0          MOVEQ    r0,#0x700
000168  d011              BEQ      |L1.398|
00016a  f1ba0f01          CMP      r10,#1
00016e  bf08              IT       EQ
000170  f44f60c0          MOVEQ    r0,#0x600
000174  d00b              BEQ      |L1.398|
000176  f1ba0f02          CMP      r10,#2
00017a  bf08              IT       EQ
00017c  f44f60a0          MOVEQ    r0,#0x500
000180  d005              BEQ      |L1.398|
000182  f1ba0f04          CMP      r10,#4
000186  bf18              IT       NE
000188  f44f6080          MOVNE    r0,#0x400
00018c  d002              BEQ      |L1.404|
                  |L1.398|
00018e  f7fffffe          BL       NVIC_PriorityGroupConfig
000192  e003              B        |L1.412|
                  |L1.404|
000194  f44f7040          MOV      r0,#0x300
000198  f7fffffe          BL       NVIC_PriorityGroupConfig
                  |L1.412|
00019c  f88d600c          STRB     r6,[sp,#0xc]
0001a0  f88d900d          STRB     r9,[sp,#0xd]
0001a4  f88d800e          STRB     r8,[sp,#0xe]
0001a8  f88d700f          STRB     r7,[sp,#0xf]
0001ac  a803              ADD      r0,sp,#0xc
0001ae  f7fffffe          BL       NVIC_Init
0001b2  2101              MOVS     r1,#1
0001b4  6860              LDR      r0,[r4,#4]
0001b6  f7fffffe          BL       TIM_Cmd
0001ba  b004              ADD      sp,sp,#0x10
0001bc  4620              MOV      r0,r4
0001be  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

                  _ZN5Timer5StartEv PROC ; Timer::Start()
;;;77     void Timer::Start()
0001c2  6840              LDR      r0,[r0,#4]
;;;78     {
;;;79     	TIM_Cmd(mTempTimer, ENABLE);//开启定时器
0001c4  2101              MOVS     r1,#1
0001c6  f7ffbffe          B.W      TIM_Cmd
;;;80     }
;;;81     
                          ENDP

                  _ZN5Timer4StopEv PROC ; Timer::Stop()
;;;82     void Timer::Stop()
0001ca  6840              LDR      r0,[r0,#4]
;;;83     {
;;;84     	TIM_Cmd(mTempTimer,DISABLE);//关闭定时器
0001cc  2100              MOVS     r1,#0
0001ce  f7ffbffe          B.W      TIM_Cmd
;;;85     }
;;;86     
                          ENDP

                  _ZN5Timer10OnOrOffIrqEb PROC ; Timer::OnOrOffIrq(bool)
;;;130    
;;;131    void Timer::OnOrOffIrq(bool Switch)
0001d2  6840              LDR      r0,[r0,#4]
;;;132    {
;;;133       if (Switch==true)
0001d4  2900              CMP      r1,#0
;;;134    	   mTempTimer->DIER|=1<<0; //使能更新中断
;;;135       else 
;;;136    	   mTempTimer->DIER&=0<<0;  //关闭更新中断
0001d6  8981              LDRH     r1,[r0,#0xc]
0001d8  bf14              ITE      NE                    ;134
0001da  f0410101          ORRNE    r1,r1,#1              ;134
0001de  2100              MOVEQ    r1,#0
0001e0  8181              STRH     r1,[r0,#0xc]          ;134
;;;137    }
0001e2  4770              BX       lr
;;;138    
                          ENDP

                  _ZN5Timer8ClearCNTEv PROC ; Timer::ClearCNT()
;;;139    void Timer::ClearCNT(void)
0001e4  6840              LDR      r0,[r0,#4]
;;;140    {
;;;141       mTempTimer->CNT &=0;
0001e6  8c81              LDRH     r1,[r0,#0x24]
0001e8  2100              MOVS     r1,#0
0001ea  8481              STRH     r1,[r0,#0x24]
;;;142    }
0001ec  4770              BX       lr
;;;143    
                          ENDP

0001ee  0000              DCW      0x0000
                  |L1.496|
                          DCD      0x000fffff
                  |L1.500|
                          DCD      0x000f4240

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001
