; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_fsmc.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_fsmc.crf ..\STM32F10x_FWLIB\src\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMDeInit PROC
;;;101      */
;;;102    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  0081              LSLS     r1,r0,#2
;;;103    {
000002  f1a141c0          SUB      r1,r1,#0x60000000
;;;104      /* Check the parameter */
;;;105      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;106      
;;;107      /* FSMC_Bank1_NORSRAM1 */
;;;108      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
000006  2800              CMP      r0,#0
;;;109      {
;;;110        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000008  bf03              ITTTE    EQ
00000a  f24300db          MOVEQ    r0,#0x30db
00000e  f04f4220          MOVEQ    r2,#0xa0000000
000012  6010              STREQ    r0,[r2,#0]
;;;111      }
;;;112      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;113      else
;;;114      {   
;;;115        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000014  f24300d2          MOVNE    r0,#0x30d2
000018  bf18              IT       NE
00001a  6008              STRNE    r0,[r1,#0]
;;;116      }
;;;117      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4070          MVN      r0,#0xf0000000
000020  6048              STR      r0,[r1,#4]
;;;118      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
000022  f8c10104          STR      r0,[r1,#0x104]
;;;119    }
000026  4770              BX       lr
;;;120    
                          ENDP

                  FSMC_NANDDeInit PROC
;;;128      */
;;;129    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000028  2340              MOVS     r3,#0x40
;;;130    {
;;;131      /* Check the parameter */
;;;132      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;133      
;;;134      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;135      {
;;;136        /* Set the FSMC_Bank2 registers to their reset values */
;;;137        FSMC_Bank2->PCR2 = 0x00000018;
00002a  f04f0c18          MOV      r12,#0x18
00002e  f04f4120          MOV      r1,#0xa0000000
;;;138        FSMC_Bank2->SR2 = 0x00000040;
;;;139        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
000032  f04f32fc          MOV      r2,#0xfcfcfcfc
000036  2810              CMP      r0,#0x10              ;134
000038  d008              BEQ      |L1.76|
;;;140        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
;;;141      }
;;;142      /* FSMC_Bank3_NAND */  
;;;143      else
;;;144      {
;;;145        /* Set the FSMC_Bank3 registers to their reset values */
;;;146        FSMC_Bank3->PCR3 = 0x00000018;
00003a  f8c1c080          STR      r12,[r1,#0x80]
;;;147        FSMC_Bank3->SR3 = 0x00000040;
00003e  f8c13084          STR      r3,[r1,#0x84]
;;;148        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
000042  f8c12088          STR      r2,[r1,#0x88]
;;;149        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
000046  f8c1208c          STR      r2,[r1,#0x8c]
;;;150      }  
;;;151    }
00004a  4770              BX       lr
                  |L1.76|
00004c  f8c1c060          STR      r12,[r1,#0x60]        ;137
000050  664b              STR      r3,[r1,#0x64]         ;138
000052  668a              STR      r2,[r1,#0x68]         ;139
000054  66ca              STR      r2,[r1,#0x6c]         ;140
000056  4770              BX       lr
;;;152    
                          ENDP

                  FSMC_PCCARDDeInit PROC
;;;157      */
;;;158    void FSMC_PCCARDDeInit(void)
000058  f04f4020          MOV      r0,#0xa0000000
;;;159    {
;;;160      /* Set the FSMC_Bank4 registers to their reset values */
;;;161      FSMC_Bank4->PCR4 = 0x00000018; 
00005c  2118              MOVS     r1,#0x18
00005e  f8401fa0          STR      r1,[r0,#0xa0]!
;;;162      FSMC_Bank4->SR4 = 0x00000000;	
000062  2100              MOVS     r1,#0
000064  6041              STR      r1,[r0,#4]
;;;163      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
000066  f04f31fc          MOV      r1,#0xfcfcfcfc
00006a  6081              STR      r1,[r0,#8]
;;;164      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
00006c  60c1              STR      r1,[r0,#0xc]
;;;165      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
00006e  6101              STR      r1,[r0,#0x10]
;;;166    }
000070  4770              BX       lr
;;;167    
                          ENDP

                  FSMC_NORSRAMInit PROC
;;;175      */
;;;176    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000072  e9d01201          LDRD     r1,r2,[r0,#4]
;;;177    { 
;;;178      /* Check the parameters */
;;;179      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;180      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;181      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;182      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;183      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;184      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
;;;185      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;186      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;187      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;188      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;189      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;190      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;191      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;192      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;193      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;194      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;195      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;196      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;197      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;198      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;199      
;;;200      /* Bank1 NOR/SRAM control register configuration */ 
;;;201      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000076  4311              ORRS     r1,r1,r2
000078  e9d02303          LDRD     r2,r3,[r0,#0xc]
00007c  431a              ORRS     r2,r2,r3
00007e  4311              ORRS     r1,r1,r2
000080  6942              LDR      r2,[r0,#0x14]
000082  4311              ORRS     r1,r1,r2
000084  6982              LDR      r2,[r0,#0x18]
000086  4311              ORRS     r1,r1,r2
000088  69c2              LDR      r2,[r0,#0x1c]
00008a  4311              ORRS     r1,r1,r2
00008c  6a02              LDR      r2,[r0,#0x20]
00008e  4311              ORRS     r1,r1,r2
000090  6a42              LDR      r2,[r0,#0x24]
000092  4311              ORRS     r1,r1,r2
000094  6a82              LDR      r2,[r0,#0x28]
000096  4311              ORRS     r1,r1,r2
000098  6ac2              LDR      r2,[r0,#0x2c]
00009a  4311              ORRS     r1,r1,r2
00009c  6b02              LDR      r2,[r0,#0x30]
00009e  430a              ORRS     r2,r2,r1
0000a0  6801              LDR      r1,[r0,#0]
0000a2  0089              LSLS     r1,r1,#2
0000a4  f1a141c0          SUB      r1,r1,#0x60000000
0000a8  600a              STR      r2,[r1,#0]
;;;202                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;203                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;204                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;205                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;206                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;207                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;208                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;209                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;210                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;211                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;212                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;213                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;214    
;;;215      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
0000aa  6881              LDR      r1,[r0,#8]
0000ac  2908              CMP      r1,#8
0000ae  d107              BNE      |L1.192|
;;;216      {
;;;217        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
0000b0  6801              LDR      r1,[r0,#0]
0000b2  0089              LSLS     r1,r1,#2
0000b4  f1a141c0          SUB      r1,r1,#0x60000000
0000b8  680a              LDR      r2,[r1,#0]
0000ba  f0420240          ORR      r2,r2,#0x40
0000be  600a              STR      r2,[r1,#0]
                  |L1.192|
;;;218      }
;;;219      
;;;220      /* Bank1 NOR/SRAM timing register configuration */
;;;221      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
0000c0  6b41              LDR      r1,[r0,#0x34]
0000c2  e9d12300          LDRD     r2,r3,[r1,#0]
0000c6  ea421203          ORR      r2,r2,r3,LSL #4
0000ca  688b              LDR      r3,[r1,#8]
0000cc  f8b1c00c          LDRH     r12,[r1,#0xc]
0000d0  021b              LSLS     r3,r3,#8
0000d2  ea43430c          ORR      r3,r3,r12,LSL #16
0000d6  431a              ORRS     r2,r2,r3
0000d8  8a0b              LDRH     r3,[r1,#0x10]
0000da  ea425203          ORR      r2,r2,r3,LSL #20
0000de  7d0b              LDRB     r3,[r1,#0x14]
0000e0  6989              LDR      r1,[r1,#0x18]
0000e2  ea426203          ORR      r2,r2,r3,LSL #24
0000e6  4311              ORRS     r1,r1,r2
0000e8  6802              LDR      r2,[r0,#0]
0000ea  0092              LSLS     r2,r2,#2
0000ec  f1a242c0          SUB      r2,r2,#0x60000000
0000f0  6051              STR      r1,[r2,#4]
;;;222                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;223                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;224                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;225                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;226                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;227                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;228                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;229                
;;;230        
;;;231      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;232      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
0000f2  6ac1              LDR      r1,[r0,#0x2c]
0000f4  f5b14f80          CMP      r1,#0x4000
0000f8  d008              BEQ      |L1.268|
;;;233      {
;;;234        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;235        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;236        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;237        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;238        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;239        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;240        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
;;;241                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;242                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;243                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;244                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;245                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;246                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;247      }
;;;248      else
;;;249      {
;;;250        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
0000fa  6800              LDR      r0,[r0,#0]
0000fc  f06f4170          MVN      r1,#0xf0000000
000100  0080              LSLS     r0,r0,#2
000102  f1a040c0          SUB      r0,r0,#0x60000000
000106  f8c01104          STR      r1,[r0,#0x104]
;;;251      }
;;;252    }
00010a  4770              BX       lr
                  |L1.268|
00010c  6b81              LDR      r1,[r0,#0x38]         ;240
00010e  e9d12300          LDRD     r2,r3,[r1,#0]         ;240
000112  ea421203          ORR      r2,r2,r3,LSL #4       ;240
000116  688b              LDR      r3,[r1,#8]            ;240
000118  f8b1c010          LDRH     r12,[r1,#0x10]        ;240
00011c  021b              LSLS     r3,r3,#8              ;240
00011e  ea43530c          ORR      r3,r3,r12,LSL #20     ;240
000122  431a              ORRS     r2,r2,r3              ;240
000124  7d0b              LDRB     r3,[r1,#0x14]         ;240
000126  6989              LDR      r1,[r1,#0x18]         ;240
000128  ea426203          ORR      r2,r2,r3,LSL #24      ;240
00012c  6800              LDR      r0,[r0,#0]            ;240
00012e  4311              ORRS     r1,r1,r2              ;240
000130  0080              LSLS     r0,r0,#2              ;240
000132  f1a040c0          SUB      r0,r0,#0x60000000     ;240
000136  f8c01104          STR      r1,[r0,#0x104]        ;240
00013a  4770              BX       lr
;;;253    
                          ENDP

                  FSMC_NANDInit PROC
;;;261      */
;;;262    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
00013c  b410              PUSH     {r4}
;;;263    {
00013e  e9d01201          LDRD     r1,r2,[r0,#4]
;;;264      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
;;;265        
;;;266      /* Check the parameters */
;;;267      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;268      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;269      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;270      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;271      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;272      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;273      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;274      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;275      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;276      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;277      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;278      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;279      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;280      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;281      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;282      
;;;283      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;284      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000142  4311              ORRS     r1,r1,r2
000144  e9d02303          LDRD     r2,r3,[r0,#0xc]
000148  431a              ORRS     r2,r2,r3
00014a  4311              ORRS     r1,r1,r2
00014c  6942              LDR      r2,[r0,#0x14]
00014e  ea412142          ORR      r1,r1,r2,LSL #9
000152  6982              LDR      r2,[r0,#0x18]
000154  ea413142          ORR      r1,r1,r2,LSL #13
000158  f0410208          ORR      r2,r1,#8
;;;285                PCR_MemoryType_NAND |
;;;286                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;287                FSMC_NANDInitStruct->FSMC_ECC |
;;;288                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;289                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;290                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;291                
;;;292      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;293      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
00015c  69c1              LDR      r1,[r0,#0x1c]
00015e  e9d13c00          LDRD     r3,r12,[r1,#0]
000162  ea43230c          ORR      r3,r3,r12,LSL #8
000166  f8b1c008          LDRH     r12,[r1,#8]
00016a  7b09              LDRB     r1,[r1,#0xc]
00016c  ea4f4c0c          LSL      r12,r12,#16
000170  ea4c6101          ORR      r1,r12,r1,LSL #24
000174  430b              ORRS     r3,r3,r1
;;;294                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;295                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;296                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;297                
;;;298      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;299      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000176  6a01              LDR      r1,[r0,#0x20]
000178  e9d1c400          LDRD     r12,r4,[r1,#0]
00017c  ea4c2c04          ORR      r12,r12,r4,LSL #8
000180  890c              LDRH     r4,[r1,#8]
000182  7b09              LDRB     r1,[r1,#0xc]
000184  0424              LSLS     r4,r4,#16
000186  ea446101          ORR      r1,r4,r1,LSL #24
00018a  ea4c0101          ORR      r1,r12,r1
;;;300                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;301                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;302                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;303      
;;;304      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
;;;305      {
;;;306        /* FSMC_Bank2_NAND registers configuration */
;;;307        FSMC_Bank2->PCR2 = tmppcr;
00018e  f8d0c000          LDR      r12,[r0,#0]
000192  f04f4020          MOV      r0,#0xa0000000
000196  f1bc0f10          CMP      r12,#0x10             ;304
00019a  d007              BEQ      |L1.428|
;;;308        FSMC_Bank2->PMEM2 = tmppmem;
;;;309        FSMC_Bank2->PATT2 = tmppatt;
;;;310      }
;;;311      else
;;;312      {
;;;313        /* FSMC_Bank3_NAND registers configuration */
;;;314        FSMC_Bank3->PCR3 = tmppcr;
00019c  f8c02080          STR      r2,[r0,#0x80]
;;;315        FSMC_Bank3->PMEM3 = tmppmem;
0001a0  f8c03088          STR      r3,[r0,#0x88]
;;;316        FSMC_Bank3->PATT3 = tmppatt;
0001a4  f8c0108c          STR      r1,[r0,#0x8c]
;;;317      }
;;;318    }
0001a8  bc10              POP      {r4}
0001aa  4770              BX       lr
                  |L1.428|
0001ac  6602              STR      r2,[r0,#0x60]         ;307
0001ae  6683              STR      r3,[r0,#0x68]         ;308
0001b0  66c1              STR      r1,[r0,#0x6c]         ;309
0001b2  bc10              POP      {r4}
0001b4  4770              BX       lr
;;;319    
                          ENDP

                  FSMC_PCCARDInit PROC
;;;327      */
;;;328    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
0001b6  e9d01200          LDRD     r1,r2,[r0,#0]
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;332      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;333      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;334     
;;;335      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;336      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;337      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;338      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;339      
;;;340      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;341      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;342      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;343      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;344      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;345      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;346      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;347      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;348      
;;;349      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;350      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
0001ba  ea412142          ORR      r1,r1,r2,LSL #9
0001be  6882              LDR      r2,[r0,#8]
0001c0  2310              MOVS     r3,#0x10
0001c2  ea433242          ORR      r2,r3,r2,LSL #13
0001c6  430a              ORRS     r2,r2,r1
0001c8  f04f4120          MOV      r1,#0xa0000000
0001cc  f8412fa0          STR      r2,[r1,#0xa0]!
;;;351                         FSMC_MemoryDataWidth_16b |  
;;;352                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;353                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;354                
;;;355      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;356      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
0001d0  68c2              LDR      r2,[r0,#0xc]
0001d2  e9d23c00          LDRD     r3,r12,[r2,#0]
0001d6  ea43230c          ORR      r3,r3,r12,LSL #8
0001da  f8b2c008          LDRH     r12,[r2,#8]
0001de  7b12              LDRB     r2,[r2,#0xc]
0001e0  ea4f4c0c          LSL      r12,r12,#16
0001e4  ea4c6202          ORR      r2,r12,r2,LSL #24
0001e8  431a              ORRS     r2,r2,r3
0001ea  608a              STR      r2,[r1,#8]
;;;357                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;358                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;359                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;360                
;;;361      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;362      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
0001ec  6902              LDR      r2,[r0,#0x10]
0001ee  e9d23c00          LDRD     r3,r12,[r2,#0]
0001f2  ea43230c          ORR      r3,r3,r12,LSL #8
0001f6  f8b2c008          LDRH     r12,[r2,#8]
0001fa  7b12              LDRB     r2,[r2,#0xc]
0001fc  ea4f4c0c          LSL      r12,r12,#16
000200  ea4c6202          ORR      r2,r12,r2,LSL #24
000204  431a              ORRS     r2,r2,r3
000206  60ca              STR      r2,[r1,#0xc]
;;;363                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;364                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;365                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;366                
;;;367      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;368      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000208  6940              LDR      r0,[r0,#0x14]
00020a  e9d02300          LDRD     r2,r3,[r0,#0]
00020e  ea422203          ORR      r2,r2,r3,LSL #8
000212  8903              LDRH     r3,[r0,#8]
000214  7b00              LDRB     r0,[r0,#0xc]
000216  041b              LSLS     r3,r3,#16
000218  ea436000          ORR      r0,r3,r0,LSL #24
00021c  4310              ORRS     r0,r0,r2
00021e  6108              STR      r0,[r1,#0x10]
;;;369                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;370                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;371                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;372    }
000220  4770              BX       lr
;;;373    
                          ENDP

                  FSMC_NORSRAMStructInit PROC
;;;379      */
;;;380    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000222  2100              MOVS     r1,#0
;;;381    {  
;;;382      /* Reset NOR/SRAM Init structure parameters values */
;;;383      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
;;;384      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000224  2202              MOVS     r2,#2
000226  e9c01200          STRD     r1,r2,[r0,#0]
;;;385      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
;;;386      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00022a  6081              STR      r1,[r0,#8]
;;;387      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00022c  60c1              STR      r1,[r0,#0xc]
;;;388      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
00022e  6101              STR      r1,[r0,#0x10]
;;;389      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000230  6141              STR      r1,[r0,#0x14]
;;;390      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000232  6181              STR      r1,[r0,#0x18]
;;;391      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
;;;392      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000234  02d2              LSLS     r2,r2,#11
000236  61c1              STR      r1,[r0,#0x1c]
000238  e9c01208          STRD     r1,r2,[r0,#0x20]
;;;393      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00023c  0052              LSLS     r2,r2,#1
00023e  e9c0210a          STRD     r2,r1,[r0,#0x28]
;;;394      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
;;;395      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
;;;396      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000242  6301              STR      r1,[r0,#0x30]
000244  6b43              LDR      r3,[r0,#0x34]
000246  220f              MOVS     r2,#0xf
;;;397      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000248  601a              STR      r2,[r3,#0]
00024a  6b43              LDR      r3,[r0,#0x34]
;;;398      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
00024c  605a              STR      r2,[r3,#4]
00024e  f8d0c034          LDR      r12,[r0,#0x34]
000252  23ff              MOVS     r3,#0xff
;;;399      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000254  f8cc3008          STR      r3,[r12,#8]
000258  f8d0c034          LDR      r12,[r0,#0x34]
;;;400      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
00025c  f8cc200c          STR      r2,[r12,#0xc]
000260  f8d0c034          LDR      r12,[r0,#0x34]
;;;401      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
000264  f8cc2010          STR      r2,[r12,#0x10]
000268  f8d0c034          LDR      r12,[r0,#0x34]
;;;402      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
00026c  f8cc2014          STR      r2,[r12,#0x14]
000270  f8d0c034          LDR      r12,[r0,#0x34]
;;;403      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000274  f8cc1018          STR      r1,[r12,#0x18]
000278  f8d0c038          LDR      r12,[r0,#0x38]
;;;404      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
00027c  f8cc2000          STR      r2,[r12,#0]
000280  f8d0c038          LDR      r12,[r0,#0x38]
;;;405      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000284  f8cc2004          STR      r2,[r12,#4]
000288  f8d0c038          LDR      r12,[r0,#0x38]
;;;406      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00028c  f8cc3008          STR      r3,[r12,#8]
000290  6b83              LDR      r3,[r0,#0x38]
;;;407      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000292  60da              STR      r2,[r3,#0xc]
000294  6b83              LDR      r3,[r0,#0x38]
;;;408      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000296  611a              STR      r2,[r3,#0x10]
000298  6b83              LDR      r3,[r0,#0x38]
;;;409      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00029a  615a              STR      r2,[r3,#0x14]
00029c  6b80              LDR      r0,[r0,#0x38]
00029e  6181              STR      r1,[r0,#0x18]
;;;410    }
0002a0  4770              BX       lr
;;;411    
                          ENDP

                  FSMC_NANDStructInit PROC
;;;417      */
;;;418    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
0002a2  2110              MOVS     r1,#0x10
;;;419    { 
;;;420      /* Reset NAND Init structure parameters values */
;;;421      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
;;;422      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
0002a4  6001              STR      r1,[r0,#0]
0002a6  2100              MOVS     r1,#0
;;;423      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
0002a8  6041              STR      r1,[r0,#4]
;;;424      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
0002aa  6081              STR      r1,[r0,#8]
;;;425      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
0002ac  60c1              STR      r1,[r0,#0xc]
;;;426      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
0002ae  6101              STR      r1,[r0,#0x10]
;;;427      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
0002b0  6141              STR      r1,[r0,#0x14]
;;;428      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0002b2  6181              STR      r1,[r0,#0x18]
0002b4  69c2              LDR      r2,[r0,#0x1c]
0002b6  21fc              MOVS     r1,#0xfc
;;;429      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
0002b8  6011              STR      r1,[r2,#0]
0002ba  69c2              LDR      r2,[r0,#0x1c]
;;;430      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
0002bc  6051              STR      r1,[r2,#4]
0002be  69c2              LDR      r2,[r0,#0x1c]
;;;431      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
0002c0  6091              STR      r1,[r2,#8]
0002c2  69c2              LDR      r2,[r0,#0x1c]
;;;432      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0002c4  60d1              STR      r1,[r2,#0xc]
0002c6  6a02              LDR      r2,[r0,#0x20]
;;;433      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
0002c8  6011              STR      r1,[r2,#0]
0002ca  6a02              LDR      r2,[r0,#0x20]
;;;434      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
0002cc  6051              STR      r1,[r2,#4]
0002ce  6a02              LDR      r2,[r0,#0x20]
;;;435      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
0002d0  6091              STR      r1,[r2,#8]
0002d2  6a00              LDR      r0,[r0,#0x20]
0002d4  60c1              STR      r1,[r0,#0xc]
;;;436    }
0002d6  4770              BX       lr
;;;437    
                          ENDP

                  FSMC_PCCARDStructInit PROC
;;;443      */
;;;444    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
0002d8  2100              MOVS     r1,#0
;;;445    {
;;;446      /* Reset PCCARD Init structure parameters values */
;;;447      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
;;;448      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
0002da  6001              STR      r1,[r0,#0]
;;;449      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
0002dc  6041              STR      r1,[r0,#4]
;;;450      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0002de  6081              STR      r1,[r0,#8]
0002e0  68c2              LDR      r2,[r0,#0xc]
0002e2  21fc              MOVS     r1,#0xfc
;;;451      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
0002e4  6011              STR      r1,[r2,#0]
0002e6  68c2              LDR      r2,[r0,#0xc]
;;;452      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
0002e8  6051              STR      r1,[r2,#4]
0002ea  68c2              LDR      r2,[r0,#0xc]
;;;453      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
0002ec  6091              STR      r1,[r2,#8]
0002ee  68c2              LDR      r2,[r0,#0xc]
;;;454      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0002f0  60d1              STR      r1,[r2,#0xc]
0002f2  6902              LDR      r2,[r0,#0x10]
;;;455      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
0002f4  6011              STR      r1,[r2,#0]
0002f6  6902              LDR      r2,[r0,#0x10]
;;;456      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
0002f8  6051              STR      r1,[r2,#4]
0002fa  6902              LDR      r2,[r0,#0x10]
;;;457      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
0002fc  6091              STR      r1,[r2,#8]
0002fe  6902              LDR      r2,[r0,#0x10]
;;;458      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000300  60d1              STR      r1,[r2,#0xc]
000302  6942              LDR      r2,[r0,#0x14]
;;;459      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000304  6011              STR      r1,[r2,#0]
000306  6942              LDR      r2,[r0,#0x14]
;;;460      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000308  6051              STR      r1,[r2,#4]
00030a  6942              LDR      r2,[r0,#0x14]
;;;461      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00030c  6091              STR      r1,[r2,#8]
00030e  6940              LDR      r0,[r0,#0x14]
000310  60c1              STR      r1,[r0,#0xc]
;;;462    }
000312  4770              BX       lr
;;;463    
                          ENDP

                  FSMC_NORSRAMCmd PROC
;;;474      */
;;;475    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000314  0080              LSLS     r0,r0,#2
;;;476    {
;;;477      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;478      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;479      
;;;480      if (NewState != DISABLE)
;;;481      {
;;;482        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;483        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
000316  f1a040c0          SUB      r0,r0,#0x60000000
00031a  2900              CMP      r1,#0                 ;480
;;;484      }
;;;485      else
;;;486      {
;;;487        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;488        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
00031c  6801              LDR      r1,[r0,#0]
00031e  bf12              ITEE     NE                    ;483
000320  f0410101          ORRNE    r1,r1,#1              ;483
000324  4a67              LDREQ    r2,|L1.1220|
000326  4011              ANDEQ    r1,r1,r2
000328  6001              STR      r1,[r0,#0]            ;483
;;;489      }
;;;490    }
00032a  4770              BX       lr
;;;491    
                          ENDP

                  FSMC_NANDCmd PROC
;;;500      */
;;;501    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
00032c  f04f4220          MOV      r2,#0xa0000000
;;;502    {
000330  b159              CBZ      r1,|L1.842|
;;;503      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;504      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;505      
;;;506      if (NewState != DISABLE)
;;;507      {
;;;508        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;509        if(FSMC_Bank == FSMC_Bank2_NAND)
000332  2810              CMP      r0,#0x10
;;;510        {
;;;511          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
000334  bf0c              ITE      EQ
000336  6e10              LDREQ    r0,[r2,#0x60]
;;;512        }
;;;513        else
;;;514        {
;;;515          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
000338  f8d20080          LDRNE    r0,[r2,#0x80]
00033c  f0400004          ORR      r0,r0,#4
000340  d00c              BEQ      |L1.860|
000342  bf00              NOP      
                  |L1.836|
000344  f8c20080          STR      r0,[r2,#0x80]
;;;516        }
;;;517      }
;;;518      else
;;;519      {
;;;520        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;521        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;522        {
;;;523          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
;;;524        }
;;;525        else
;;;526        {
;;;527          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
;;;528        }
;;;529      }
;;;530    }
000348  4770              BX       lr
                  |L1.842|
00034a  495f              LDR      r1,|L1.1224|
00034c  2810              CMP      r0,#0x10              ;521
00034e  bf14              ITE      NE                    ;527
000350  f8d20080          LDRNE    r0,[r2,#0x80]         ;527
000354  6e10              LDREQ    r0,[r2,#0x60]         ;523
000356  ea000001          AND      r0,r0,r1              ;523
00035a  d1f3              BNE      |L1.836|
                  |L1.860|
00035c  6610              STR      r0,[r2,#0x60]         ;511
00035e  4770              BX       lr
;;;531    
                          ENDP

                  FSMC_PCCARDCmd PROC
;;;537      */
;;;538    void FSMC_PCCARDCmd(FunctionalState NewState)
000360  f04f4120          MOV      r1,#0xa0000000
;;;539    {
;;;540      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;541      
;;;542      if (NewState != DISABLE)
000364  2800              CMP      r0,#0
;;;543      {
;;;544        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;545        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;550        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
000366  f8d100a0          LDR      r0,[r1,#0xa0]
00036a  bf12              ITEE     NE                    ;545
00036c  f0400004          ORRNE    r0,r0,#4              ;545
000370  4a55              LDREQ    r2,|L1.1224|
000372  4010              ANDEQ    r0,r0,r2
000374  f8c100a0          STR      r0,[r1,#0xa0]         ;545
;;;551      }
;;;552    }
000378  4770              BX       lr
;;;553    
                          ENDP

                  FSMC_NANDECCCmd PROC
;;;563      */
;;;564    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
00037a  f04f4220          MOV      r2,#0xa0000000
;;;565    {
00037e  b151              CBZ      r1,|L1.918|
;;;566      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;567      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;568      
;;;569      if (NewState != DISABLE)
;;;570      {
;;;571        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;572        if(FSMC_Bank == FSMC_Bank2_NAND)
000380  2810              CMP      r0,#0x10
;;;573        {
;;;574          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
000382  bf0c              ITE      EQ
000384  6e10              LDREQ    r0,[r2,#0x60]
;;;575        }
;;;576        else
;;;577        {
;;;578          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
000386  f8d20080          LDRNE    r0,[r2,#0x80]
00038a  f0400040          ORR      r0,r0,#0x40
00038e  d00b              BEQ      |L1.936|
                  |L1.912|
000390  f8c20080          STR      r0,[r2,#0x80]
;;;579        }
;;;580      }
;;;581      else
;;;582      {
;;;583        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;584        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;585        {
;;;586          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
;;;587        }
;;;588        else
;;;589        {
;;;590          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
;;;591        }
;;;592      }
;;;593    }
000394  4770              BX       lr
                  |L1.918|
000396  494d              LDR      r1,|L1.1228|
000398  2810              CMP      r0,#0x10              ;584
00039a  bf14              ITE      NE                    ;590
00039c  f8d20080          LDRNE    r0,[r2,#0x80]         ;590
0003a0  6e10              LDREQ    r0,[r2,#0x60]         ;586
0003a2  ea000001          AND      r0,r0,r1              ;586
0003a6  d1f3              BNE      |L1.912|
                  |L1.936|
0003a8  6610              STR      r0,[r2,#0x60]         ;574
0003aa  4770              BX       lr
;;;594    
                          ENDP

                  FSMC_GetECC PROC
;;;602      */
;;;603    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
0003ac  f04f4120          MOV      r1,#0xa0000000
;;;604    {
;;;605      uint32_t eccval = 0x00000000;
;;;606      
;;;607      if(FSMC_Bank == FSMC_Bank2_NAND)
0003b0  2810              CMP      r0,#0x10
;;;608      {
;;;609        /* Get the ECCR2 register value */
;;;610        eccval = FSMC_Bank2->ECCR2;
0003b2  bf0c              ITE      EQ
0003b4  6f48              LDREQ    r0,[r1,#0x74]
;;;611      }
;;;612      else
;;;613      {
;;;614        /* Get the ECCR3 register value */
;;;615        eccval = FSMC_Bank3->ECCR3;
0003b6  f8d10094          LDRNE    r0,[r1,#0x94]
;;;616      }
;;;617      /* Return the error correction code value */
;;;618      return(eccval);
;;;619    }
0003ba  4770              BX       lr
;;;620    
                          ENDP

                  FSMC_ITConfig PROC
;;;636      */
;;;637    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
0003bc  f04f4320          MOV      r3,#0xa0000000
;;;638    {
0003c0  b18a              CBZ      r2,|L1.998|
;;;639      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;640      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;641      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;642      
;;;643      if (NewState != DISABLE)
;;;644      {
;;;645        /* Enable the selected FSMC_Bank2 interrupts */
;;;646        if(FSMC_Bank == FSMC_Bank2_NAND)
0003c2  2810              CMP      r0,#0x10
;;;647        {
;;;648          FSMC_Bank2->SR2 |= FSMC_IT;
0003c4  bf04              ITT      EQ
0003c6  6e58              LDREQ    r0,[r3,#0x64]
0003c8  4308              ORREQ    r0,r0,r1
0003ca  d01e              BEQ      |L1.1034|
;;;649        }
;;;650        /* Enable the selected FSMC_Bank3 interrupts */
;;;651        else if (FSMC_Bank == FSMC_Bank3_NAND)
0003cc  f5b07f80          CMP      r0,#0x100
;;;652        {
;;;653          FSMC_Bank3->SR3 |= FSMC_IT;
0003d0  bf0c              ITE      EQ
0003d2  f8d30084          LDREQ    r0,[r3,#0x84]
;;;654        }
;;;655        /* Enable the selected FSMC_Bank4 interrupts */
;;;656        else
;;;657        {
;;;658          FSMC_Bank4->SR4 |= FSMC_IT;    
0003d6  f8d300a4          LDRNE    r0,[r3,#0xa4]
0003da  ea400001          ORR      r0,r0,r1
0003de  d011              BEQ      |L1.1028|
                  |L1.992|
0003e0  f8c300a4          STR      r0,[r3,#0xa4]
;;;659        }
;;;660      }
;;;661      else
;;;662      {
;;;663        /* Disable the selected FSMC_Bank2 interrupts */
;;;664        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;665        {
;;;666          
;;;667          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
;;;668        }
;;;669        /* Disable the selected FSMC_Bank3 interrupts */
;;;670        else if (FSMC_Bank == FSMC_Bank3_NAND)
;;;671        {
;;;672          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
;;;673        }
;;;674        /* Disable the selected FSMC_Bank4 interrupts */
;;;675        else
;;;676        {
;;;677          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
;;;678        }
;;;679      }
;;;680    }
0003e4  4770              BX       lr
                  |L1.998|
0003e6  2810              CMP      r0,#0x10              ;664
0003e8  bf04              ITT      EQ                    ;667
0003ea  6e58              LDREQ    r0,[r3,#0x64]         ;667
0003ec  4388              BICEQ    r0,r0,r1              ;667
0003ee  d00c              BEQ      |L1.1034|
0003f0  f5b07f80          CMP      r0,#0x100             ;670
0003f4  bf0c              ITE      EQ                    ;672
0003f6  f8d30084          LDREQ    r0,[r3,#0x84]         ;672
0003fa  f8d300a4          LDRNE    r0,[r3,#0xa4]         ;677
0003fe  ea200001          BIC      r0,r0,r1              ;677
000402  d1ed              BNE      |L1.992|
                  |L1.1028|
000404  f8c30084          STR      r0,[r3,#0x84]         ;653
000408  4770              BX       lr
                  |L1.1034|
00040a  6658              STR      r0,[r3,#0x64]         ;648
00040c  4770              BX       lr
;;;681    
                          ENDP

                  FSMC_GetFlagStatus PROC
;;;696      */
;;;697    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
00040e  4602              MOV      r2,r0
;;;698    {
;;;699      FlagStatus bitstatus = RESET;
000410  2000              MOVS     r0,#0
;;;700      uint32_t tmpsr = 0x00000000;
;;;701      
;;;702      /* Check the parameters */
;;;703      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;704      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;705      
;;;706      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;707      {
;;;708        tmpsr = FSMC_Bank2->SR2;
000412  f04f4320          MOV      r3,#0xa0000000
000416  2a10              CMP      r2,#0x10              ;706
000418  bf08              IT       EQ
00041a  6e5a              LDREQ    r2,[r3,#0x64]
00041c  d006              BEQ      |L1.1068|
;;;709      }  
;;;710      else if(FSMC_Bank == FSMC_Bank3_NAND)
00041e  f5b27f80          CMP      r2,#0x100
;;;711      {
;;;712        tmpsr = FSMC_Bank3->SR3;
000422  bf0c              ITE      EQ
000424  f8d32084          LDREQ    r2,[r3,#0x84]
;;;713      }
;;;714      /* FSMC_Bank4_PCCARD*/
;;;715      else
;;;716      {
;;;717        tmpsr = FSMC_Bank4->SR4;
000428  f8d320a4          LDRNE    r2,[r3,#0xa4]
                  |L1.1068|
;;;718      } 
;;;719      
;;;720      /* Get the flag status */
;;;721      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
00042c  420a              TST      r2,r1
;;;722      {
;;;723        bitstatus = SET;
00042e  bf18              IT       NE
000430  2001              MOVNE    r0,#1
;;;724      }
;;;725      else
;;;726      {
;;;727        bitstatus = RESET;
;;;728      }
;;;729      /* Return the flag status */
;;;730      return bitstatus;
;;;731    }
000432  4770              BX       lr
;;;732    
                          ENDP

                  FSMC_ClearFlag PROC
;;;746      */
;;;747    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000434  f04f4220          MOV      r2,#0xa0000000
;;;748    {
;;;749     /* Check the parameters */
;;;750      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;751      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;752        
;;;753      if(FSMC_Bank == FSMC_Bank2_NAND)
000438  2810              CMP      r0,#0x10
00043a  d008              BEQ      |L1.1102|
;;;754      {
;;;755        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
;;;756      }  
;;;757      else if(FSMC_Bank == FSMC_Bank3_NAND)
00043c  f5b07f80          CMP      r0,#0x100
000440  d009              BEQ      |L1.1110|
;;;758      {
;;;759        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
;;;760      }
;;;761      /* FSMC_Bank4_PCCARD*/
;;;762      else
;;;763      {
;;;764        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
000442  f8d200a4          LDR      r0,[r2,#0xa4]
000446  4388              BICS     r0,r0,r1
000448  f8c200a4          STR      r0,[r2,#0xa4]
;;;765      }
;;;766    }
00044c  4770              BX       lr
                  |L1.1102|
00044e  6e50              LDR      r0,[r2,#0x64]         ;755
000450  4388              BICS     r0,r0,r1              ;755
000452  6650              STR      r0,[r2,#0x64]         ;755
000454  4770              BX       lr
                  |L1.1110|
000456  f8d20084          LDR      r0,[r2,#0x84]         ;759
00045a  4388              BICS     r0,r0,r1              ;759
00045c  f8c20084          STR      r0,[r2,#0x84]         ;759
000460  4770              BX       lr
;;;767    
                          ENDP

                  FSMC_GetITStatus PROC
;;;781      */
;;;782    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000462  4602              MOV      r2,r0
;;;783    {
;;;784      ITStatus bitstatus = RESET;
000464  2000              MOVS     r0,#0
;;;785      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
;;;786      
;;;787      /* Check the parameters */
;;;788      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;789      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;790      
;;;791      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;792      {
;;;793        tmpsr = FSMC_Bank2->SR2;
000466  f04f4320          MOV      r3,#0xa0000000
00046a  2a10              CMP      r2,#0x10              ;791
00046c  bf08              IT       EQ
00046e  6e5a              LDREQ    r2,[r3,#0x64]
000470  d006              BEQ      |L1.1152|
;;;794      }  
;;;795      else if(FSMC_Bank == FSMC_Bank3_NAND)
000472  f5b27f80          CMP      r2,#0x100
;;;796      {
;;;797        tmpsr = FSMC_Bank3->SR3;
000476  bf0c              ITE      EQ
000478  f8d32084          LDREQ    r2,[r3,#0x84]
;;;798      }
;;;799      /* FSMC_Bank4_PCCARD*/
;;;800      else
;;;801      {
;;;802        tmpsr = FSMC_Bank4->SR4;
00047c  f8d320a4          LDRNE    r2,[r3,#0xa4]
                  |L1.1152|
;;;803      } 
;;;804      
;;;805      itstatus = tmpsr & FSMC_IT;
000480  420a              TST      r2,r1
;;;806      
;;;807      itenable = tmpsr & (FSMC_IT >> 3);
000482  ea0201d1          AND      r1,r2,r1,LSR #3
;;;808      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
000486  bf1c              ITT      NE
000488  2900              CMPNE    r1,#0
;;;809      {
;;;810        bitstatus = SET;
00048a  2001              MOVNE    r0,#1
;;;811      }
;;;812      else
;;;813      {
;;;814        bitstatus = RESET;
;;;815      }
;;;816      return bitstatus; 
;;;817    }
00048c  4770              BX       lr
;;;818    
                          ENDP

                  FSMC_ClearITPendingBit PROC
;;;832      */
;;;833    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
00048e  f04f4220          MOV      r2,#0xa0000000
;;;834    {
;;;835      /* Check the parameters */
;;;836      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;837      assert_param(IS_FSMC_IT(FSMC_IT));
;;;838        
;;;839      if(FSMC_Bank == FSMC_Bank2_NAND)
000492  2810              CMP      r0,#0x10
000494  d009              BEQ      |L1.1194|
;;;840      {
;;;841        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
;;;842      }  
;;;843      else if(FSMC_Bank == FSMC_Bank3_NAND)
000496  f5b07f80          CMP      r0,#0x100
00049a  d00b              BEQ      |L1.1204|
;;;844      {
;;;845        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
;;;846      }
;;;847      /* FSMC_Bank4_PCCARD*/
;;;848      else
;;;849      {
;;;850        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
00049c  f8d200a4          LDR      r0,[r2,#0xa4]
0004a0  ea2000d1          BIC      r0,r0,r1,LSR #3
0004a4  f8c200a4          STR      r0,[r2,#0xa4]
;;;851      }
;;;852    }
0004a8  4770              BX       lr
                  |L1.1194|
0004aa  6e50              LDR      r0,[r2,#0x64]         ;841
0004ac  ea2000d1          BIC      r0,r0,r1,LSR #3       ;841
0004b0  6650              STR      r0,[r2,#0x64]         ;841
0004b2  4770              BX       lr
                  |L1.1204|
0004b4  f8d20084          LDR      r0,[r2,#0x84]         ;845
0004b8  ea2000d1          BIC      r0,r0,r1,LSR #3       ;845
0004bc  f8c20084          STR      r0,[r2,#0x84]         ;845
0004c0  4770              BX       lr
;;;853    
                          ENDP

0004c2  0000              DCW      0x0000
                  |L1.1220|
                          DCD      0x000ffffe
                  |L1.1224|
                          DCD      0x000ffffb
                  |L1.1228|
                          DCD      0x000fffbf
