; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_flash.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_flash.crf ..\STM32F10x_FWLIB\src\stm32f10x_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;253      */
;;;254    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  49fe              LDR      r1,|L1.1020|
;;;255    {
;;;256      uint32_t tmpreg = 0;
;;;257      
;;;258      /* Check the parameters */
;;;259      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;260      
;;;261      /* Read the ACR register */
;;;262      tmpreg = FLASH->ACR;  
000002  680a              LDR      r2,[r1,#0]
;;;263      
;;;264      /* Sets the Latency value */
;;;265      tmpreg &= ACR_LATENCY_Mask;
000004  f0020238          AND      r2,r2,#0x38
;;;266      tmpreg |= FLASH_Latency;
000008  4310              ORRS     r0,r0,r2
;;;267      
;;;268      /* Write the ACR register */
;;;269      FLASH->ACR = tmpreg;
00000a  6008              STR      r0,[r1,#0]
;;;270    }
00000c  4770              BX       lr
;;;271    
                          ENDP

                  FLASH_HalfCycleAccessCmd PROC
;;;280      */
;;;281    void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
00000e  49fb              LDR      r1,|L1.1020|
;;;282    {
;;;283      /* Check the parameters */
;;;284      assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
;;;285      
;;;286      /* Enable or disable the Half cycle access */
;;;287      FLASH->ACR &= ACR_HLFCYA_Mask;
000010  680a              LDR      r2,[r1,#0]
000012  f0220208          BIC      r2,r2,#8
000016  600a              STR      r2,[r1,#0]
;;;288      FLASH->ACR |= FLASH_HalfCycleAccess;
000018  680a              LDR      r2,[r1,#0]
00001a  4310              ORRS     r0,r0,r2
00001c  6008              STR      r0,[r1,#0]
;;;289    }
00001e  4770              BX       lr
;;;290    
                          ENDP

                  FLASH_PrefetchBufferCmd PROC
;;;299      */
;;;300    void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
000020  49f6              LDR      r1,|L1.1020|
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
;;;304      
;;;305      /* Enable or disable the Prefetch Buffer */
;;;306      FLASH->ACR &= ACR_PRFTBE_Mask;
000022  680a              LDR      r2,[r1,#0]
000024  f0220210          BIC      r2,r2,#0x10
000028  600a              STR      r2,[r1,#0]
;;;307      FLASH->ACR |= FLASH_PrefetchBuffer;
00002a  680a              LDR      r2,[r1,#0]
00002c  4310              ORRS     r0,r0,r2
00002e  6008              STR      r0,[r1,#0]
;;;308    }
000030  4770              BX       lr
;;;309    
                          ENDP

                  FLASH_Unlock PROC
;;;318      */
;;;319    void FLASH_Unlock(void)
000032  48f2              LDR      r0,|L1.1020|
;;;320    {
;;;321      /* Authorize the FPEC of Bank1 Access */
;;;322      FLASH->KEYR = FLASH_KEY1;
000034  49f2              LDR      r1,|L1.1024|
000036  6041              STR      r1,[r0,#4]
;;;323      FLASH->KEYR = FLASH_KEY2;
000038  49f2              LDR      r1,|L1.1028|
00003a  6041              STR      r1,[r0,#4]
;;;324    
;;;325    #ifdef STM32F10X_XL
;;;326      /* Authorize the FPEC of Bank2 Access */
;;;327      FLASH->KEYR2 = FLASH_KEY1;
;;;328      FLASH->KEYR2 = FLASH_KEY2;
;;;329    #endif /* STM32F10X_XL */
;;;330    }
00003c  4770              BX       lr
;;;331    /**
                          ENDP

                  FLASH_UnlockBank1 PROC
;;;339      */
;;;340    void FLASH_UnlockBank1(void)
00003e  48ef              LDR      r0,|L1.1020|
;;;341    {
;;;342      /* Authorize the FPEC of Bank1 Access */
;;;343      FLASH->KEYR = FLASH_KEY1;
000040  49ef              LDR      r1,|L1.1024|
000042  6041              STR      r1,[r0,#4]
;;;344      FLASH->KEYR = FLASH_KEY2;
000044  49ef              LDR      r1,|L1.1028|
000046  6041              STR      r1,[r0,#4]
;;;345    }
000048  4770              BX       lr
;;;346    
                          ENDP

                  FLASH_Lock PROC
;;;371      */
;;;372    void FLASH_Lock(void)
00004a  48ec              LDR      r0,|L1.1020|
;;;373    {
;;;374      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;375      FLASH->CR |= CR_LOCK_Set;
00004c  6901              LDR      r1,[r0,#0x10]
00004e  f0410180          ORR      r1,r1,#0x80
000052  6101              STR      r1,[r0,#0x10]
;;;376    
;;;377    #ifdef STM32F10X_XL
;;;378      /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
;;;379      FLASH->CR2 |= CR_LOCK_Set;
;;;380    #endif /* STM32F10X_XL */
;;;381    }
000054  4770              BX       lr
;;;382    
                          ENDP

                  FLASH_LockBank1 PROC
;;;391      */
;;;392    void FLASH_LockBank1(void)
000056  48e9              LDR      r0,|L1.1020|
;;;393    {
;;;394      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;395      FLASH->CR |= CR_LOCK_Set;
000058  6901              LDR      r1,[r0,#0x10]
00005a  f0410180          ORR      r1,r1,#0x80
00005e  6101              STR      r1,[r0,#0x10]
;;;396    }
000060  4770              BX       lr
;;;397    
                          ENDP

                  FLASH_GetBank1Status PROC
;;;1514     */
;;;1515   FLASH_Status FLASH_GetBank1Status(void)
000062  49e6              LDR      r1,|L1.1020|
;;;1516   {
;;;1517     FLASH_Status flashstatus = FLASH_COMPLETE;
000064  2004              MOVS     r0,#4
;;;1518     
;;;1519     if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
000066  68ca              LDR      r2,[r1,#0xc]
000068  f0120f01          TST      r2,#1
;;;1520     {
;;;1521       flashstatus = FLASH_BUSY;
00006c  bf1c              ITT      NE
00006e  2001              MOVNE    r0,#1
;;;1522     }
;;;1523     else 
;;;1524     {  
;;;1525       if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
;;;1526       { 
;;;1527         flashstatus = FLASH_ERROR_PG;
;;;1528       }
;;;1529       else 
;;;1530       {
;;;1531         if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
;;;1532         {
;;;1533           flashstatus = FLASH_ERROR_WRP;
;;;1534         }
;;;1535         else
;;;1536         {
;;;1537           flashstatus = FLASH_COMPLETE;
;;;1538         }
;;;1539       }
;;;1540     }
;;;1541     /* Return the Flash Status */
;;;1542     return flashstatus;
;;;1543   }
000070  4770              BXNE     lr
000072  68ca              LDR      r2,[r1,#0xc]          ;1525
000074  f0120f04          TST      r2,#4                 ;1525
000078  bf1c              ITT      NE                    ;1527
00007a  2002              MOVNE    r0,#2                 ;1527
00007c  4770              BXNE     lr
00007e  68c9              LDR      r1,[r1,#0xc]          ;1531
000080  f0110f10          TST      r1,#0x10              ;1531
000084  bf18              IT       NE                    ;1533
000086  2003              MOVNE    r0,#3                 ;1533
000088  4770              BX       lr
;;;1544   
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;1594     */
;;;1595   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
00008a  4602              MOV      r2,r0
;;;1596   { 
;;;1597     FLASH_Status status = FLASH_COMPLETE;
00008c  2004              MOVS     r0,#4
00008e  49db              LDR      r1,|L1.1020|
000090  68cb              LDR      r3,[r1,#0xc]
000092  f0130f01          TST      r3,#1
000096  d125              BNE      |L1.228|
000098  68cb              LDR      r3,[r1,#0xc]          ;1596
00009a  f0130f04          TST      r3,#4                 ;1596
00009e  bf18              IT       NE                    ;1596
0000a0  2002              MOVNE    r0,#2                 ;1596
0000a2  d11a              BNE      |L1.218|
0000a4  68c9              LDR      r1,[r1,#0xc]          ;1596
0000a6  f0110f10          TST      r1,#0x10              ;1596
0000aa  bf18              IT       NE                    ;1596
0000ac  2003              MOVNE    r0,#3                 ;1596
0000ae  e014              B        |L1.218|
                  |L1.176|
0000b0  68cb              LDR      r3,[r1,#0xc]          ;1596
0000b2  2004              MOVS     r0,#4                 ;1596
0000b4  f0130f01          TST      r3,#1                 ;1596
0000b8  bf18              IT       NE                    ;1596
0000ba  2001              MOVNE    r0,#1                 ;1596
0000bc  d10a              BNE      |L1.212|
0000be  68cb              LDR      r3,[r1,#0xc]          ;1596
0000c0  f0130f04          TST      r3,#4                 ;1596
0000c4  bf18              IT       NE                    ;1596
0000c6  2002              MOVNE    r0,#2                 ;1596
0000c8  d104              BNE      |L1.212|
0000ca  68cb              LDR      r3,[r1,#0xc]          ;1596
0000cc  f0130f10          TST      r3,#0x10              ;1596
0000d0  bf18              IT       NE                    ;1596
0000d2  2003              MOVNE    r0,#3                 ;1596
                  |L1.212|
0000d4  1e52              SUBS     r2,r2,#1              ;1596
;;;1598      
;;;1599     /* Check for the Flash Status */
;;;1600     status = FLASH_GetBank1Status();
;;;1601     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1602     while((status == FLASH_BUSY) && (Timeout != 0x00))
;;;1603     {
;;;1604       status = FLASH_GetBank1Status();
;;;1605       Timeout--;
0000d6  2801              CMP      r0,#1
0000d8  d004              BEQ      |L1.228|
                  |L1.218|
;;;1606     }
;;;1607     if(Timeout == 0x00 )
0000da  2a00              CMP      r2,#0
;;;1608     {
;;;1609       status = FLASH_TIMEOUT;
;;;1610     }
;;;1611     /* Return the operation status */
;;;1612     return status;
;;;1613   }
0000dc  bf18              IT       NE
0000de  4770              BXNE     lr
                  |L1.224|
0000e0  2005              MOVS     r0,#5                 ;1609
0000e2  4770              BX       lr
                  |L1.228|
0000e4  2a00              CMP      r2,#0                 ;1605
0000e6  d1e3              BNE      |L1.176|
0000e8  e7fa              B        |L1.224|
;;;1614   
                          ENDP

                  FLASH_ErasePage PROC
;;;418      */
;;;419    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
0000ea  b510              PUSH     {r4,lr}
;;;420    {
0000ec  4604              MOV      r4,r0
;;;421      FLASH_Status status = FLASH_COMPLETE;
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FLASH_ADDRESS(Page_Address));
;;;424    
;;;425    #ifdef STM32F10X_XL
;;;426      if(Page_Address < FLASH_BANK1_END_ADDRESS)  
;;;427      {
;;;428        /* Wait for last operation to be completed */
;;;429        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;430        if(status == FLASH_COMPLETE)
;;;431        { 
;;;432          /* if the previous operation is completed, proceed to erase the page */
;;;433          FLASH->CR|= CR_PER_Set;
;;;434          FLASH->AR = Page_Address; 
;;;435          FLASH->CR|= CR_STRT_Set;
;;;436        
;;;437          /* Wait for last operation to be completed */
;;;438          status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;439    
;;;440          /* Disable the PER Bit */
;;;441          FLASH->CR &= CR_PER_Reset;
;;;442        }
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Wait for last operation to be completed */
;;;447        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;448        if(status == FLASH_COMPLETE)
;;;449        { 
;;;450          /* if the previous operation is completed, proceed to erase the page */
;;;451          FLASH->CR2|= CR_PER_Set;
;;;452          FLASH->AR2 = Page_Address; 
;;;453          FLASH->CR2|= CR_STRT_Set;
;;;454        
;;;455          /* Wait for last operation to be completed */
;;;456          status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;457          
;;;458          /* Disable the PER Bit */
;;;459          FLASH->CR2 &= CR_PER_Reset;
;;;460        }
;;;461      }
;;;462    #else
;;;463      /* Wait for last operation to be completed */
;;;464      status = FLASH_WaitForLastOperation(EraseTimeout);
0000ee  f44f2030          MOV      r0,#0xb0000
0000f2  f7fffffe          BL       FLASH_WaitForLastOperation
;;;465      
;;;466      if(status == FLASH_COMPLETE)
0000f6  2804              CMP      r0,#4
;;;467      { 
;;;468        /* if the previous operation is completed, proceed to erase the page */
;;;469        FLASH->CR|= CR_PER_Set;
;;;470        FLASH->AR = Page_Address; 
;;;471        FLASH->CR|= CR_STRT_Set;
;;;472        
;;;473        /* Wait for last operation to be completed */
;;;474        status = FLASH_WaitForLastOperation(EraseTimeout);
;;;475        
;;;476        /* Disable the PER Bit */
;;;477        FLASH->CR &= CR_PER_Reset;
;;;478      }
;;;479    #endif /* STM32F10X_XL */
;;;480    
;;;481      /* Return the Erase Status */
;;;482      return status;
;;;483    }
0000f8  bf18              IT       NE
0000fa  bd10              POPNE    {r4,pc}
0000fc  f8dfc2fc          LDR      r12,|L1.1020|
000100  f8dc0010          LDR      r0,[r12,#0x10]        ;469
000104  f0400002          ORR      r0,r0,#2              ;469
000108  f8cc0010          STR      r0,[r12,#0x10]        ;469
00010c  f8cc4014          STR      r4,[r12,#0x14]        ;470
000110  f8dc0010          LDR      r0,[r12,#0x10]        ;471
000114  f0400040          ORR      r0,r0,#0x40           ;471
000118  f8cc0010          STR      r0,[r12,#0x10]        ;471
00011c  f44f2030          MOV      r0,#0xb0000           ;474
000120  f7fffffe          BL       FLASH_WaitForLastOperation
000124  f8dc1010          LDR      r1,[r12,#0x10]        ;477
000128  f64172fd          MOV      r2,#0x1ffd            ;477
00012c  4011              ANDS     r1,r1,r2              ;477
00012e  f8cc1010          STR      r1,[r12,#0x10]        ;477
000132  bd10              POP      {r4,pc}
;;;484    
                          ENDP

                  FLASH_EraseAllPages PROC
;;;491      */
;;;492    FLASH_Status FLASH_EraseAllPages(void)
000134  b500              PUSH     {lr}
;;;493    {
;;;494      FLASH_Status status = FLASH_COMPLETE;
;;;495    
;;;496    #ifdef STM32F10X_XL
;;;497      /* Wait for last operation to be completed */
;;;498      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;499      
;;;500      if(status == FLASH_COMPLETE)
;;;501      {
;;;502        /* if the previous operation is completed, proceed to erase all pages */
;;;503         FLASH->CR |= CR_MER_Set;
;;;504         FLASH->CR |= CR_STRT_Set;
;;;505        
;;;506        /* Wait for last operation to be completed */
;;;507        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;508        
;;;509        /* Disable the MER Bit */
;;;510        FLASH->CR &= CR_MER_Reset;
;;;511      }    
;;;512      if(status == FLASH_COMPLETE)
;;;513      {
;;;514        /* if the previous operation is completed, proceed to erase all pages */
;;;515         FLASH->CR2 |= CR_MER_Set;
;;;516         FLASH->CR2 |= CR_STRT_Set;
;;;517        
;;;518        /* Wait for last operation to be completed */
;;;519        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;520        
;;;521        /* Disable the MER Bit */
;;;522        FLASH->CR2 &= CR_MER_Reset;
;;;523      }
;;;524    #else
;;;525      /* Wait for last operation to be completed */
;;;526      status = FLASH_WaitForLastOperation(EraseTimeout);
000136  f44f2030          MOV      r0,#0xb0000
00013a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;527      if(status == FLASH_COMPLETE)
00013e  2804              CMP      r0,#4
;;;528      {
;;;529        /* if the previous operation is completed, proceed to erase all pages */
;;;530         FLASH->CR |= CR_MER_Set;
;;;531         FLASH->CR |= CR_STRT_Set;
;;;532        
;;;533        /* Wait for last operation to be completed */
;;;534        status = FLASH_WaitForLastOperation(EraseTimeout);
;;;535    
;;;536        /* Disable the MER Bit */
;;;537        FLASH->CR &= CR_MER_Reset;
;;;538      }
;;;539    #endif /* STM32F10X_XL */
;;;540    
;;;541      /* Return the Erase Status */
;;;542      return status;
;;;543    }
000140  bf18              IT       NE
000142  bd00              POPNE    {pc}
000144  f8dfc2b4          LDR      r12,|L1.1020|
000148  f8dc0010          LDR      r0,[r12,#0x10]        ;530
00014c  f0400004          ORR      r0,r0,#4              ;530
000150  f8cc0010          STR      r0,[r12,#0x10]        ;530
000154  f8dc0010          LDR      r0,[r12,#0x10]        ;531
000158  f0400040          ORR      r0,r0,#0x40           ;531
00015c  f8cc0010          STR      r0,[r12,#0x10]        ;531
000160  f44f2030          MOV      r0,#0xb0000           ;534
000164  f7fffffe          BL       FLASH_WaitForLastOperation
000168  f8dc1010          LDR      r1,[r12,#0x10]        ;537
00016c  f64172fb          MOV      r2,#0x1ffb            ;537
000170  4011              ANDS     r1,r1,r2              ;537
000172  f8cc1010          STR      r1,[r12,#0x10]        ;537
000176  bd00              POP      {pc}
;;;544    
                          ENDP

                  FLASH_WaitForLastBank1Operation PROC
;;;1622     */
;;;1623   FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
000178  49a0              LDR      r1,|L1.1020|
;;;1624   { 
00017a  4602              MOV      r2,r0
;;;1625     FLASH_Status status = FLASH_COMPLETE;
00017c  2004              MOVS     r0,#4
00017e  68cb              LDR      r3,[r1,#0xc]
000180  f0130f01          TST      r3,#1
000184  d125              BNE      |L1.466|
000186  68cb              LDR      r3,[r1,#0xc]          ;1624
000188  f0130f04          TST      r3,#4                 ;1624
00018c  bf18              IT       NE                    ;1624
00018e  2002              MOVNE    r0,#2                 ;1624
000190  d11a              BNE      |L1.456|
000192  68c9              LDR      r1,[r1,#0xc]          ;1624
000194  f0110f10          TST      r1,#0x10              ;1624
000198  bf18              IT       NE                    ;1624
00019a  2003              MOVNE    r0,#3                 ;1624
00019c  e014              B        |L1.456|
                  |L1.414|
00019e  68cb              LDR      r3,[r1,#0xc]          ;1624
0001a0  2004              MOVS     r0,#4                 ;1624
0001a2  f0130f01          TST      r3,#1                 ;1624
0001a6  bf18              IT       NE                    ;1624
0001a8  2001              MOVNE    r0,#1                 ;1624
0001aa  d10a              BNE      |L1.450|
0001ac  68cb              LDR      r3,[r1,#0xc]          ;1624
0001ae  f0130f04          TST      r3,#4                 ;1624
0001b2  bf18              IT       NE                    ;1624
0001b4  2002              MOVNE    r0,#2                 ;1624
0001b6  d104              BNE      |L1.450|
0001b8  68cb              LDR      r3,[r1,#0xc]          ;1624
0001ba  f0130f10          TST      r3,#0x10              ;1624
0001be  bf18              IT       NE                    ;1624
0001c0  2003              MOVNE    r0,#3                 ;1624
                  |L1.450|
0001c2  1e52              SUBS     r2,r2,#1              ;1624
;;;1626      
;;;1627     /* Check for the Flash Status */
;;;1628     status = FLASH_GetBank1Status();
;;;1629     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1630     while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
;;;1631     {
;;;1632       status = FLASH_GetBank1Status();
;;;1633       Timeout--;
0001c4  2801              CMP      r0,#1
0001c6  d004              BEQ      |L1.466|
                  |L1.456|
;;;1634     }
;;;1635     if(Timeout == 0x00 )
0001c8  2a00              CMP      r2,#0
;;;1636     {
;;;1637       status = FLASH_TIMEOUT;
;;;1638     }
;;;1639     /* Return the operation status */
;;;1640     return status;
;;;1641   }
0001ca  bf18              IT       NE
0001cc  4770              BXNE     lr
                  |L1.462|
0001ce  2005              MOVS     r0,#5                 ;1637
0001d0  4770              BX       lr
                  |L1.466|
0001d2  2a00              CMP      r2,#0                 ;1633
0001d4  d1e3              BNE      |L1.414|
0001d6  e7fa              B        |L1.462|
;;;1642   
                          ENDP

                  FLASH_EraseAllBank1Pages PROC
;;;554      */
;;;555    FLASH_Status FLASH_EraseAllBank1Pages(void)
0001d8  b500              PUSH     {lr}
;;;556    {
;;;557      FLASH_Status status = FLASH_COMPLETE;
;;;558      /* Wait for last operation to be completed */
;;;559      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
0001da  f44f2030          MOV      r0,#0xb0000
0001de  f7fffffe          BL       FLASH_WaitForLastBank1Operation
;;;560      
;;;561      if(status == FLASH_COMPLETE)
0001e2  2804              CMP      r0,#4
;;;562      {
;;;563        /* if the previous operation is completed, proceed to erase all pages */
;;;564         FLASH->CR |= CR_MER_Set;
;;;565         FLASH->CR |= CR_STRT_Set;
;;;566        
;;;567        /* Wait for last operation to be completed */
;;;568        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;569        
;;;570        /* Disable the MER Bit */
;;;571        FLASH->CR &= CR_MER_Reset;
;;;572      }    
;;;573      /* Return the Erase Status */
;;;574      return status;
;;;575    }
0001e4  bf18              IT       NE
0001e6  bd00              POPNE    {pc}
0001e8  f8dfc210          LDR      r12,|L1.1020|
0001ec  f8dc0010          LDR      r0,[r12,#0x10]        ;564
0001f0  f0400004          ORR      r0,r0,#4              ;564
0001f4  f8cc0010          STR      r0,[r12,#0x10]        ;564
0001f8  f8dc0010          LDR      r0,[r12,#0x10]        ;565
0001fc  f0400040          ORR      r0,r0,#0x40           ;565
000200  f8cc0010          STR      r0,[r12,#0x10]        ;565
000204  f44f2030          MOV      r0,#0xb0000           ;568
000208  f7fffffe          BL       FLASH_WaitForLastBank1Operation
00020c  f8dc1010          LDR      r1,[r12,#0x10]        ;571
000210  f64172fb          MOV      r2,#0x1ffb            ;571
000214  4011              ANDS     r1,r1,r2              ;571
000216  f8cc1010          STR      r1,[r12,#0x10]        ;571
00021a  bd00              POP      {pc}
;;;576    
                          ENDP

                  FLASH_GetReadOutProtectionStatus PROC
;;;1239     */
;;;1240   FlagStatus FLASH_GetReadOutProtectionStatus(void)
00021c  4977              LDR      r1,|L1.1020|
;;;1241   {
;;;1242     FlagStatus readoutstatus = RESET;
00021e  2000              MOVS     r0,#0
;;;1243     if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
000220  69c9              LDR      r1,[r1,#0x1c]
000222  f0110f02          TST      r1,#2
;;;1244     {
;;;1245       readoutstatus = SET;
000226  bf18              IT       NE
000228  2001              MOVNE    r0,#1
;;;1246     }
;;;1247     else
;;;1248     {
;;;1249       readoutstatus = RESET;
;;;1250     }
;;;1251     return readoutstatus;
;;;1252   }
00022a  4770              BX       lr
;;;1253   
                          ENDP

                  FLASH_EraseOptionBytes PROC
;;;615      */
;;;616    FLASH_Status FLASH_EraseOptionBytes(void)
00022c  b530              PUSH     {r4,r5,lr}
00022e  f8dfc1cc          LDR      r12,|L1.1020|
;;;617    {
;;;618      uint16_t rdptmp = RDP_Key;
000232  24a5              MOVS     r4,#0xa5
000234  f8dc001c          LDR      r0,[r12,#0x1c]
000238  f0100f02          TST      r0,#2
;;;619    
;;;620      FLASH_Status status = FLASH_COMPLETE;
;;;621    
;;;622      /* Get the actual read protection Option Byte value */ 
;;;623      if(FLASH_GetReadOutProtectionStatus() != RESET)
;;;624      {
;;;625        rdptmp = 0x00;  
00023c  bf18              IT       NE
00023e  2400              MOVNE    r4,#0
;;;626      }
;;;627    
;;;628      /* Wait for last operation to be completed */
;;;629      status = FLASH_WaitForLastOperation(EraseTimeout);
000240  f44f2030          MOV      r0,#0xb0000
000244  f7fffffe          BL       FLASH_WaitForLastOperation
;;;630      if(status == FLASH_COMPLETE)
000248  2804              CMP      r0,#4
;;;631      {
;;;632        /* Authorize the small information block programming */
;;;633        FLASH->OPTKEYR = FLASH_KEY1;
;;;634        FLASH->OPTKEYR = FLASH_KEY2;
;;;635        
;;;636        /* if the previous operation is completed, proceed to erase the option bytes */
;;;637        FLASH->CR |= CR_OPTER_Set;
;;;638        FLASH->CR |= CR_STRT_Set;
;;;639        /* Wait for last operation to be completed */
;;;640        status = FLASH_WaitForLastOperation(EraseTimeout);
;;;641        
;;;642        if(status == FLASH_COMPLETE)
;;;643        {
;;;644          /* if the erase operation is completed, disable the OPTER Bit */
;;;645          FLASH->CR &= CR_OPTER_Reset;
;;;646           
;;;647          /* Enable the Option Bytes Programming operation */
;;;648          FLASH->CR |= CR_OPTPG_Set;
;;;649          /* Restore the last read protection Option Byte value */
;;;650          OB->RDP = (uint16_t)rdptmp; 
;;;651          /* Wait for last operation to be completed */
;;;652          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;653     
;;;654          if(status != FLASH_TIMEOUT)
;;;655          {
;;;656            /* if the program operation is completed, disable the OPTPG Bit */
;;;657            FLASH->CR &= CR_OPTPG_Reset;
;;;658          }
;;;659        }
;;;660        else
;;;661        {
;;;662          if (status != FLASH_TIMEOUT)
;;;663          {
;;;664            /* Disable the OPTPG Bit */
;;;665            FLASH->CR &= CR_OPTPG_Reset;
;;;666          }
;;;667        }  
;;;668      }
;;;669      /* Return the erase status */
;;;670      return status;
;;;671    }
00024a  bf18              IT       NE
00024c  bd30              POPNE    {r4,r5,pc}
00024e  486c              LDR      r0,|L1.1024|
000250  f8cc0008          STR      r0,[r12,#8]           ;633
000254  486b              LDR      r0,|L1.1028|
000256  f8cc0008          STR      r0,[r12,#8]           ;634
00025a  f8dc0010          LDR      r0,[r12,#0x10]        ;637
00025e  f0400020          ORR      r0,r0,#0x20           ;637
000262  f8cc0010          STR      r0,[r12,#0x10]        ;637
000266  f8dc0010          LDR      r0,[r12,#0x10]        ;638
00026a  f0400040          ORR      r0,r0,#0x40           ;638
00026e  f8cc0010          STR      r0,[r12,#0x10]        ;638
000272  f44f2030          MOV      r0,#0xb0000           ;640
000276  f7fffffe          BL       FLASH_WaitForLastOperation
00027a  f64175ef          MOV      r5,#0x1fef            ;657
00027e  2804              CMP      r0,#4                 ;642
000280  d003              BEQ      |L1.650|
000282  2805              CMP      r0,#5                 ;662
000284  bf08              IT       EQ
000286  bd30              POPEQ    {r4,r5,pc}
000288  e015              B        |L1.694|
                  |L1.650|
00028a  f8dc0010          LDR      r0,[r12,#0x10]        ;645
00028e  f64171df          MOV      r1,#0x1fdf            ;645
000292  4008              ANDS     r0,r0,r1              ;645
000294  f8cc0010          STR      r0,[r12,#0x10]        ;645
000298  f8dc0010          LDR      r0,[r12,#0x10]        ;648
00029c  f0400010          ORR      r0,r0,#0x10           ;648
0002a0  f8cc0010          STR      r0,[r12,#0x10]        ;648
0002a4  4858              LDR      r0,|L1.1032|
0002a6  8004              STRH     r4,[r0,#0]            ;650
0002a8  f44f5000          MOV      r0,#0x2000            ;652
0002ac  f7fffffe          BL       FLASH_WaitForLastOperation
0002b0  2805              CMP      r0,#5                 ;654
0002b2  bf08              IT       EQ
0002b4  bd30              POPEQ    {r4,r5,pc}
                  |L1.694|
0002b6  f8dc1010          LDR      r1,[r12,#0x10]        ;657
0002ba  4029              ANDS     r1,r1,r5              ;657
0002bc  f8cc1010          STR      r1,[r12,#0x10]        ;657
0002c0  bd30              POP      {r4,r5,pc}
;;;672    
                          ENDP

                  FLASH_ProgramWord PROC
;;;680      */
;;;681    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
0002c2  b578              PUSH     {r3-r6,lr}
;;;682    {
0002c4  4605              MOV      r5,r0
;;;683      FLASH_Status status = FLASH_COMPLETE;
;;;684      __IO uint32_t tmp = 0;
0002c6  2000              MOVS     r0,#0
;;;685    
;;;686      /* Check the parameters */
;;;687      assert_param(IS_FLASH_ADDRESS(Address));
;;;688    
;;;689    #ifdef STM32F10X_XL
;;;690      if(Address < FLASH_BANK1_END_ADDRESS - 2)
;;;691      { 
;;;692        /* Wait for last operation to be completed */
;;;693        status = FLASH_WaitForLastBank1Operation(ProgramTimeout); 
;;;694        if(status == FLASH_COMPLETE)
;;;695        {
;;;696          /* if the previous operation is completed, proceed to program the new first 
;;;697            half word */
;;;698          FLASH->CR |= CR_PG_Set;
;;;699      
;;;700          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;701          /* Wait for last operation to be completed */
;;;702          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;703     
;;;704          if(status == FLASH_COMPLETE)
;;;705          {
;;;706            /* if the previous operation is completed, proceed to program the new second 
;;;707            half word */
;;;708            tmp = Address + 2;
;;;709    
;;;710            *(__IO uint16_t*) tmp = Data >> 16;
;;;711        
;;;712            /* Wait for last operation to be completed */
;;;713            status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;714            
;;;715            /* Disable the PG Bit */
;;;716            FLASH->CR &= CR_PG_Reset;
;;;717          }
;;;718          else
;;;719          {
;;;720            /* Disable the PG Bit */
;;;721            FLASH->CR &= CR_PG_Reset;
;;;722           }
;;;723        }
;;;724      }
;;;725      else if(Address == (FLASH_BANK1_END_ADDRESS - 1))
;;;726      {
;;;727        /* Wait for last operation to be completed */
;;;728        status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;729    
;;;730        if(status == FLASH_COMPLETE)
;;;731        {
;;;732          /* if the previous operation is completed, proceed to program the new first 
;;;733            half word */
;;;734          FLASH->CR |= CR_PG_Set;
;;;735      
;;;736          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;737    
;;;738          /* Wait for last operation to be completed */
;;;739          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;740          
;;;741    	  /* Disable the PG Bit */
;;;742          FLASH->CR &= CR_PG_Reset;
;;;743        }
;;;744        else
;;;745        {
;;;746          /* Disable the PG Bit */
;;;747          FLASH->CR &= CR_PG_Reset;
;;;748        }
;;;749    
;;;750        /* Wait for last operation to be completed */
;;;751        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;752    
;;;753        if(status == FLASH_COMPLETE)
;;;754        {
;;;755          /* if the previous operation is completed, proceed to program the new second 
;;;756          half word */
;;;757          FLASH->CR2 |= CR_PG_Set;
;;;758          tmp = Address + 2;
;;;759    
;;;760          *(__IO uint16_t*) tmp = Data >> 16;
;;;761        
;;;762          /* Wait for last operation to be completed */
;;;763          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;764            
;;;765          /* Disable the PG Bit */
;;;766          FLASH->CR2 &= CR_PG_Reset;
;;;767        }
;;;768        else
;;;769        {
;;;770          /* Disable the PG Bit */
;;;771          FLASH->CR2 &= CR_PG_Reset;
;;;772        }
;;;773      }
;;;774      else
;;;775      {
;;;776        /* Wait for last operation to be completed */
;;;777        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;778    
;;;779        if(status == FLASH_COMPLETE)
;;;780        {
;;;781          /* if the previous operation is completed, proceed to program the new first 
;;;782            half word */
;;;783          FLASH->CR2 |= CR_PG_Set;
;;;784      
;;;785          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;786          /* Wait for last operation to be completed */
;;;787          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;788     
;;;789          if(status == FLASH_COMPLETE)
;;;790          {
;;;791            /* if the previous operation is completed, proceed to program the new second 
;;;792            half word */
;;;793            tmp = Address + 2;
;;;794    
;;;795            *(__IO uint16_t*) tmp = Data >> 16;
;;;796        
;;;797            /* Wait for last operation to be completed */
;;;798            status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;799            
;;;800            /* Disable the PG Bit */
;;;801            FLASH->CR2 &= CR_PG_Reset;
;;;802          }
;;;803          else
;;;804          {
;;;805            /* Disable the PG Bit */
;;;806            FLASH->CR2 &= CR_PG_Reset;
;;;807          }
;;;808        }
;;;809      }
;;;810    #else
;;;811      /* Wait for last operation to be completed */
;;;812      status = FLASH_WaitForLastOperation(ProgramTimeout);
0002c8  9000              STR      r0,[sp,#0]
0002ca  460c              MOV      r4,r1                 ;682
0002cc  f44f5000          MOV      r0,#0x2000
0002d0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;813      
;;;814      if(status == FLASH_COMPLETE)
0002d4  2804              CMP      r0,#4
;;;815      {
;;;816        /* if the previous operation is completed, proceed to program the new first 
;;;817        half word */
;;;818        FLASH->CR |= CR_PG_Set;
;;;819      
;;;820        *(__IO uint16_t*)Address = (uint16_t)Data;
;;;821        /* Wait for last operation to be completed */
;;;822        status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;823     
;;;824        if(status == FLASH_COMPLETE)
;;;825        {
;;;826          /* if the previous operation is completed, proceed to program the new second 
;;;827          half word */
;;;828          tmp = Address + 2;
;;;829    
;;;830          *(__IO uint16_t*) tmp = Data >> 16;
;;;831        
;;;832          /* Wait for last operation to be completed */
;;;833          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;834            
;;;835          /* Disable the PG Bit */
;;;836          FLASH->CR &= CR_PG_Reset;
;;;837        }
;;;838        else
;;;839        {
;;;840          /* Disable the PG Bit */
;;;841          FLASH->CR &= CR_PG_Reset;
;;;842        }
;;;843      }         
;;;844    #endif /* STM32F10X_XL */
;;;845       
;;;846      /* Return the Program Status */
;;;847      return status;
;;;848    }
0002d6  bf18              IT       NE
0002d8  bd78              POPNE    {r3-r6,pc}
0002da  f8dfc120          LDR      r12,|L1.1020|
0002de  f8dc0010          LDR      r0,[r12,#0x10]        ;818
0002e2  f0400001          ORR      r0,r0,#1              ;818
0002e6  f8cc0010          STR      r0,[r12,#0x10]        ;818
0002ea  802c              STRH     r4,[r5,#0]            ;820
0002ec  f44f5000          MOV      r0,#0x2000            ;822
0002f0  f7fffffe          BL       FLASH_WaitForLastOperation
0002f4  f64176fe          MOV      r6,#0x1ffe            ;836
0002f8  2804              CMP      r0,#4                 ;824
0002fa  d107              BNE      |L1.780|
0002fc  1ca8              ADDS     r0,r5,#2              ;828
0002fe  9000              STR      r0,[sp,#0]            ;830
000300  9900              LDR      r1,[sp,#0]            ;830
000302  0c20              LSRS     r0,r4,#16             ;830
000304  8008              STRH     r0,[r1,#0]            ;830
000306  1cb0              ADDS     r0,r6,#2              ;833
000308  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.780|
00030c  f8dc1010          LDR      r1,[r12,#0x10]        ;841
000310  4031              ANDS     r1,r1,r6              ;841
000312  f8cc1010          STR      r1,[r12,#0x10]        ;841
000316  bd78              POP      {r3-r6,pc}
;;;849    
                          ENDP

                  FLASH_ProgramHalfWord PROC
;;;857      */
;;;858    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000318  b530              PUSH     {r4,r5,lr}
;;;859    {
00031a  4605              MOV      r5,r0
00031c  460c              MOV      r4,r1
;;;860      FLASH_Status status = FLASH_COMPLETE;
;;;861      /* Check the parameters */
;;;862      assert_param(IS_FLASH_ADDRESS(Address));
;;;863    
;;;864    #ifdef STM32F10X_XL
;;;865      /* Wait for last operation to be completed */
;;;866      status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;867      
;;;868      if(Address < FLASH_BANK1_END_ADDRESS)
;;;869      {
;;;870        if(status == FLASH_COMPLETE)
;;;871        {
;;;872          /* if the previous operation is completed, proceed to program the new data */
;;;873          FLASH->CR |= CR_PG_Set;
;;;874      
;;;875          *(__IO uint16_t*)Address = Data;
;;;876          /* Wait for last operation to be completed */
;;;877          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;878    
;;;879          /* Disable the PG Bit */
;;;880          FLASH->CR &= CR_PG_Reset;
;;;881        }
;;;882      }
;;;883      else
;;;884      {
;;;885        if(status == FLASH_COMPLETE)
;;;886        {
;;;887          /* if the previous operation is completed, proceed to program the new data */
;;;888          FLASH->CR2 |= CR_PG_Set;
;;;889      
;;;890          *(__IO uint16_t*)Address = Data;
;;;891          /* Wait for last operation to be completed */
;;;892          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;893    
;;;894          /* Disable the PG Bit */
;;;895          FLASH->CR2 &= CR_PG_Reset;
;;;896        }
;;;897      }
;;;898    #else
;;;899      /* Wait for last operation to be completed */
;;;900      status = FLASH_WaitForLastOperation(ProgramTimeout);
00031e  f44f5000          MOV      r0,#0x2000
000322  f7fffffe          BL       FLASH_WaitForLastOperation
;;;901      
;;;902      if(status == FLASH_COMPLETE)
000326  2804              CMP      r0,#4
;;;903      {
;;;904        /* if the previous operation is completed, proceed to program the new data */
;;;905        FLASH->CR |= CR_PG_Set;
;;;906      
;;;907        *(__IO uint16_t*)Address = Data;
;;;908        /* Wait for last operation to be completed */
;;;909        status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;910        
;;;911        /* Disable the PG Bit */
;;;912        FLASH->CR &= CR_PG_Reset;
;;;913      } 
;;;914    #endif  /* STM32F10X_XL */
;;;915      
;;;916      /* Return the Program Status */
;;;917      return status;
;;;918    }
000328  bf18              IT       NE
00032a  bd30              POPNE    {r4,r5,pc}
00032c  f8dfc0cc          LDR      r12,|L1.1020|
000330  f8dc0010          LDR      r0,[r12,#0x10]        ;905
000334  f0400001          ORR      r0,r0,#1              ;905
000338  f8cc0010          STR      r0,[r12,#0x10]        ;905
00033c  802c              STRH     r4,[r5,#0]            ;907
00033e  f44f5000          MOV      r0,#0x2000            ;909
000342  f7fffffe          BL       FLASH_WaitForLastOperation
000346  f8dc1010          LDR      r1,[r12,#0x10]        ;912
00034a  f64172fe          MOV      r2,#0x1ffe            ;912
00034e  4011              ANDS     r1,r1,r2              ;912
000350  f8cc1010          STR      r1,[r12,#0x10]        ;912
000354  bd30              POP      {r4,r5,pc}
;;;919    
                          ENDP

                  FLASH_ProgramOptionByteData PROC
;;;928      */
;;;929    FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
000356  b530              PUSH     {r4,r5,lr}
;;;930    {
000358  4605              MOV      r5,r0
00035a  460c              MOV      r4,r1
;;;931      FLASH_Status status = FLASH_COMPLETE;
;;;932      /* Check the parameters */
;;;933      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;934      status = FLASH_WaitForLastOperation(ProgramTimeout);
00035c  f44f5000          MOV      r0,#0x2000
000360  f7fffffe          BL       FLASH_WaitForLastOperation
;;;935    
;;;936      if(status == FLASH_COMPLETE)
000364  2804              CMP      r0,#4
;;;937      {
;;;938        /* Authorize the small information block programming */
;;;939        FLASH->OPTKEYR = FLASH_KEY1;
;;;940        FLASH->OPTKEYR = FLASH_KEY2;
;;;941        /* Enables the Option Bytes Programming operation */
;;;942        FLASH->CR |= CR_OPTPG_Set; 
;;;943        *(__IO uint16_t*)Address = Data;
;;;944        
;;;945        /* Wait for last operation to be completed */
;;;946        status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;947        if(status != FLASH_TIMEOUT)
;;;948        {
;;;949          /* if the program operation is completed, disable the OPTPG Bit */
;;;950          FLASH->CR &= CR_OPTPG_Reset;
;;;951        }
;;;952      }
;;;953      /* Return the Option Byte Data Program Status */
;;;954      return status;
;;;955    }
000366  bf18              IT       NE
000368  bd30              POPNE    {r4,r5,pc}
00036a  4825              LDR      r0,|L1.1024|
00036c  f8dfc08c          LDR      r12,|L1.1020|
000370  f8cc0008          STR      r0,[r12,#8]           ;939
000374  4823              LDR      r0,|L1.1028|
000376  f8cc0008          STR      r0,[r12,#8]           ;940
00037a  f8dc0010          LDR      r0,[r12,#0x10]        ;942
00037e  f0400010          ORR      r0,r0,#0x10           ;942
000382  f8cc0010          STR      r0,[r12,#0x10]        ;942
000386  802c              STRH     r4,[r5,#0]            ;943
000388  f44f5000          MOV      r0,#0x2000            ;946
00038c  f7fffffe          BL       FLASH_WaitForLastOperation
000390  2805              CMP      r0,#5                 ;947
000392  bf08              IT       EQ
000394  bd30              POPEQ    {r4,r5,pc}
000396  f8dc1010          LDR      r1,[r12,#0x10]        ;950
00039a  f64172ef          MOV      r2,#0x1fef            ;950
00039e  4011              ANDS     r1,r1,r2              ;950
0003a0  f8cc1010          STR      r1,[r12,#0x10]        ;950
0003a4  bd30              POP      {r4,r5,pc}
;;;956    
                          ENDP

                  FLASH_EnableWriteProtection PROC
;;;974      */
;;;975    FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
0003a6  b5f0              PUSH     {r4-r7,lr}
;;;976    {
;;;977      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
;;;978      
;;;979      FLASH_Status status = FLASH_COMPLETE;
;;;980      
;;;981      /* Check the parameters */
;;;982      assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
;;;983      
;;;984      FLASH_Pages = (uint32_t)(~FLASH_Pages);
0003a8  43c0              MVNS     r0,r0
;;;985      WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
0003aa  b2c6              UXTB     r6,r0
;;;986      WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
0003ac  f3c02507          UBFX     r5,r0,#8,#8
;;;987      WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
0003b0  f3c04407          UBFX     r4,r0,#16,#8
;;;988      WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
0003b4  0e07              LSRS     r7,r0,#24
;;;989      
;;;990      /* Wait for last operation to be completed */
;;;991      status = FLASH_WaitForLastOperation(ProgramTimeout);
0003b6  f44f5000          MOV      r0,#0x2000
0003ba  f7fffffe          BL       FLASH_WaitForLastOperation
;;;992      
;;;993      if(status == FLASH_COMPLETE)
0003be  2804              CMP      r0,#4
;;;994      {
;;;995        /* Authorizes the small information block programming */
;;;996        FLASH->OPTKEYR = FLASH_KEY1;
;;;997        FLASH->OPTKEYR = FLASH_KEY2;
;;;998        FLASH->CR |= CR_OPTPG_Set;
;;;999        if(WRP0_Data != 0xFF)
;;;1000       {
;;;1001         OB->WRP0 = WRP0_Data;
;;;1002         
;;;1003         /* Wait for last operation to be completed */
;;;1004         status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;1005       }
;;;1006       if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
;;;1007       {
;;;1008         OB->WRP1 = WRP1_Data;
;;;1009         
;;;1010         /* Wait for last operation to be completed */
;;;1011         status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;1012       }
;;;1013       if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
;;;1014       {
;;;1015         OB->WRP2 = WRP2_Data;
;;;1016         
;;;1017         /* Wait for last operation to be completed */
;;;1018         status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;1019       }
;;;1020       
;;;1021       if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
;;;1022       {
;;;1023         OB->WRP3 = WRP3_Data;
;;;1024        
;;;1025         /* Wait for last operation to be completed */
;;;1026         status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;1027       }
;;;1028             
;;;1029       if(status != FLASH_TIMEOUT)
;;;1030       {
;;;1031         /* if the program operation is completed, disable the OPTPG Bit */
;;;1032         FLASH->CR &= CR_OPTPG_Reset;
;;;1033       }
;;;1034     } 
;;;1035     /* Return the write protection operation Status */
;;;1036     return status;       
;;;1037   }
0003c0  bf18              IT       NE
0003c2  bdf0              POPNE    {r4-r7,pc}
0003c4  490e              LDR      r1,|L1.1024|
0003c6  f8dfc034          LDR      r12,|L1.1020|
0003ca  f8cc1008          STR      r1,[r12,#8]           ;996
0003ce  490d              LDR      r1,|L1.1028|
0003d0  f8cc1008          STR      r1,[r12,#8]           ;997
0003d4  f8dc1010          LDR      r1,[r12,#0x10]        ;998
0003d8  f0410110          ORR      r1,r1,#0x10           ;998
0003dc  f8cc1010          STR      r1,[r12,#0x10]        ;998
0003e0  2eff              CMP      r6,#0xff              ;999
0003e2  d007              BEQ      |L1.1012|
0003e4  4809              LDR      r0,|L1.1036|
0003e6  8006              STRH     r6,[r0,#0]            ;1001
0003e8  f44f5000          MOV      r0,#0x2000            ;1004
0003ec  f7fffffe          BL       FLASH_WaitForLastOperation
0003f0  2804              CMP      r0,#4                 ;1006
0003f2  d128              BNE      |L1.1094|
                  |L1.1012|
0003f4  2dff              CMP      r5,#0xff              ;1006
0003f6  d014              BEQ      |L1.1058|
0003f8  4805              LDR      r0,|L1.1040|
0003fa  e00b              B        |L1.1044|
                  |L1.1020|
                          DCD      0x40022000
                  |L1.1024|
                          DCD      0x45670123
                  |L1.1028|
                          DCD      0xcdef89ab
                  |L1.1032|
                          DCD      0x1ffff800
                  |L1.1036|
                          DCD      0x1ffff808
                  |L1.1040|
                          DCD      0x1ffff80a
                  |L1.1044|
000414  8005              STRH     r5,[r0,#0]            ;1008
000416  f44f5000          MOV      r0,#0x2000            ;1011
00041a  f7fffffe          BL       FLASH_WaitForLastOperation
00041e  2804              CMP      r0,#4                 ;1013
000420  d111              BNE      |L1.1094|
                  |L1.1058|
000422  2cff              CMP      r4,#0xff              ;1013
000424  d007              BEQ      |L1.1078|
000426  486b              LDR      r0,|L1.1492|
000428  8004              STRH     r4,[r0,#0]            ;1015
00042a  f44f5000          MOV      r0,#0x2000            ;1018
00042e  f7fffffe          BL       FLASH_WaitForLastOperation
000432  2804              CMP      r0,#4                 ;1021
000434  d107              BNE      |L1.1094|
                  |L1.1078|
000436  2fff              CMP      r7,#0xff              ;1021
000438  d008              BEQ      |L1.1100|
00043a  4867              LDR      r0,|L1.1496|
00043c  8007              STRH     r7,[r0,#0]            ;1023
00043e  f44f5000          MOV      r0,#0x2000            ;1026
000442  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.1094|
000446  2805              CMP      r0,#5                 ;1029
000448  bf08              IT       EQ
00044a  bdf0              POPEQ    {r4-r7,pc}
                  |L1.1100|
00044c  f8dc1010          LDR      r1,[r12,#0x10]        ;1032
000450  f64172ef          MOV      r2,#0x1fef            ;1032
000454  4011              ANDS     r1,r1,r2              ;1032
000456  f8cc1010          STR      r1,[r12,#0x10]        ;1032
00045a  bdf0              POP      {r4-r7,pc}
;;;1038   
                          ENDP

                  FLASH_ReadOutProtection PROC
;;;1048     */
;;;1049   FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
00045c  b510              PUSH     {r4,lr}
;;;1050   {
00045e  4604              MOV      r4,r0
;;;1051     FLASH_Status status = FLASH_COMPLETE;
;;;1052     /* Check the parameters */
;;;1053     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1054     status = FLASH_WaitForLastOperation(EraseTimeout);
000460  f44f2030          MOV      r0,#0xb0000
000464  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1055     if(status == FLASH_COMPLETE)
000468  2804              CMP      r0,#4
;;;1056     {
;;;1057       /* Authorizes the small information block programming */
;;;1058       FLASH->OPTKEYR = FLASH_KEY1;
;;;1059       FLASH->OPTKEYR = FLASH_KEY2;
;;;1060       FLASH->CR |= CR_OPTER_Set;
;;;1061       FLASH->CR |= CR_STRT_Set;
;;;1062       /* Wait for last operation to be completed */
;;;1063       status = FLASH_WaitForLastOperation(EraseTimeout);
;;;1064       if(status == FLASH_COMPLETE)
;;;1065       {
;;;1066         /* if the erase operation is completed, disable the OPTER Bit */
;;;1067         FLASH->CR &= CR_OPTER_Reset;
;;;1068         /* Enable the Option Bytes Programming operation */
;;;1069         FLASH->CR |= CR_OPTPG_Set; 
;;;1070         if(NewState != DISABLE)
;;;1071         {
;;;1072           OB->RDP = 0x00;
;;;1073         }
;;;1074         else
;;;1075         {
;;;1076           OB->RDP = RDP_Key;  
;;;1077         }
;;;1078         /* Wait for last operation to be completed */
;;;1079         status = FLASH_WaitForLastOperation(EraseTimeout); 
;;;1080       
;;;1081         if(status != FLASH_TIMEOUT)
;;;1082         {
;;;1083           /* if the program operation is completed, disable the OPTPG Bit */
;;;1084           FLASH->CR &= CR_OPTPG_Reset;
;;;1085         }
;;;1086       }
;;;1087       else 
;;;1088       {
;;;1089         if(status != FLASH_TIMEOUT)
;;;1090         {
;;;1091           /* Disable the OPTER Bit */
;;;1092           FLASH->CR &= CR_OPTER_Reset;
;;;1093         }
;;;1094       }
;;;1095     }
;;;1096     /* Return the protection operation Status */
;;;1097     return status;       
;;;1098   }
00046a  bf18              IT       NE
00046c  bd10              POPNE    {r4,pc}
00046e  485b              LDR      r0,|L1.1500|
000470  f8dfc16c          LDR      r12,|L1.1504|
000474  f8cc0008          STR      r0,[r12,#8]           ;1058
000478  485a              LDR      r0,|L1.1508|
00047a  f8cc0008          STR      r0,[r12,#8]           ;1059
00047e  f8dc0010          LDR      r0,[r12,#0x10]        ;1060
000482  f0400020          ORR      r0,r0,#0x20           ;1060
000486  f8cc0010          STR      r0,[r12,#0x10]        ;1060
00048a  f8dc0010          LDR      r0,[r12,#0x10]        ;1061
00048e  f0400040          ORR      r0,r0,#0x40           ;1061
000492  f8cc0010          STR      r0,[r12,#0x10]        ;1061
000496  f44f2030          MOV      r0,#0xb0000           ;1063
00049a  f7fffffe          BL       FLASH_WaitForLastOperation
00049e  f64171df          MOV      r1,#0x1fdf            ;1067
0004a2  2804              CMP      r0,#4                 ;1064
0004a4  d009              BEQ      |L1.1210|
0004a6  2805              CMP      r0,#5                 ;1089
0004a8  bf1a              ITTE     NE                    ;1092
0004aa  f8dc2010          LDRNE    r2,[r12,#0x10]        ;1092
0004ae  4011              ANDNE    r1,r1,r2              ;1092
0004b0  bd10              POPEQ    {r4,pc}
0004b2  bf00              NOP                            ;1084
                  |L1.1204|
0004b4  f8cc1010          STR      r1,[r12,#0x10]        ;1084
0004b8  bd10              POP      {r4,pc}
                  |L1.1210|
0004ba  f8dc0010          LDR      r0,[r12,#0x10]        ;1067
0004be  4008              ANDS     r0,r0,r1              ;1067
0004c0  f8cc0010          STR      r0,[r12,#0x10]        ;1067
0004c4  f8dc0010          LDR      r0,[r12,#0x10]        ;1069
0004c8  f0400010          ORR      r0,r0,#0x10           ;1069
0004cc  f8cc0010          STR      r0,[r12,#0x10]        ;1069
0004d0  4845              LDR      r0,|L1.1512|
0004d2  2c00              CMP      r4,#0                 ;1070
0004d4  bf14              ITE      NE                    ;1072
0004d6  2100              MOVNE    r1,#0                 ;1072
0004d8  21a5              MOVEQ    r1,#0xa5              ;1076
0004da  8001              STRH     r1,[r0,#0]            ;1076
0004dc  f44f2030          MOV      r0,#0xb0000           ;1079
0004e0  f7fffffe          BL       FLASH_WaitForLastOperation
0004e4  2805              CMP      r0,#5                 ;1081
0004e6  bf08              IT       EQ
0004e8  bd10              POPEQ    {r4,pc}
0004ea  f8dc1010          LDR      r1,[r12,#0x10]        ;1084
0004ee  f64172ef          MOV      r2,#0x1fef            ;1084
0004f2  4011              ANDS     r1,r1,r2              ;1084
0004f4  e7de              B        |L1.1204|
;;;1099   
                          ENDP

                  FLASH_UserOptionByteConfig PROC
;;;1117     */
;;;1118   FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
0004f6  b570              PUSH     {r4-r6,lr}
;;;1119   {
;;;1120     FLASH_Status status = FLASH_COMPLETE; 
;;;1121   
;;;1122     /* Check the parameters */
;;;1123     assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;1124     assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;1125     assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;1126   
;;;1127     /* Authorize the small information block programming */
;;;1128     FLASH->OPTKEYR = FLASH_KEY1;
0004f8  f8dfc0e4          LDR      r12,|L1.1504|
0004fc  4606              MOV      r6,r0                 ;1119
0004fe  4837              LDR      r0,|L1.1500|
000500  4614              MOV      r4,r2                 ;1119
000502  460d              MOV      r5,r1                 ;1119
000504  f8cc0008          STR      r0,[r12,#8]
;;;1129     FLASH->OPTKEYR = FLASH_KEY2;
000508  4836              LDR      r0,|L1.1508|
00050a  f8cc0008          STR      r0,[r12,#8]
;;;1130     
;;;1131     /* Wait for last operation to be completed */
;;;1132     status = FLASH_WaitForLastOperation(ProgramTimeout);
00050e  f44f5000          MOV      r0,#0x2000
000512  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1133     
;;;1134     if(status == FLASH_COMPLETE)
000516  2804              CMP      r0,#4
;;;1135     {  
;;;1136       /* Enable the Option Bytes Programming operation */
;;;1137       FLASH->CR |= CR_OPTPG_Set; 
;;;1138              
;;;1139       OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
;;;1140     
;;;1141       /* Wait for last operation to be completed */
;;;1142       status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;1143       if(status != FLASH_TIMEOUT)
;;;1144       {
;;;1145         /* if the program operation is completed, disable the OPTPG Bit */
;;;1146         FLASH->CR &= CR_OPTPG_Reset;
;;;1147       }
;;;1148     }    
;;;1149     /* Return the Option Byte program Status */
;;;1150     return status;
;;;1151   }
000518  bf18              IT       NE
00051a  bd70              POPNE    {r4-r6,pc}
00051c  f8dc0010          LDR      r0,[r12,#0x10]        ;1137
000520  f0400010          ORR      r0,r0,#0x10           ;1137
000524  f8cc0010          STR      r0,[r12,#0x10]        ;1137
000528  ea450004          ORR      r0,r5,r4              ;1139
00052c  492f              LDR      r1,|L1.1516|
00052e  4330              ORRS     r0,r0,r6              ;1139
000530  f04000f8          ORR      r0,r0,#0xf8           ;1139
000534  8008              STRH     r0,[r1,#0]            ;1139
000536  f44f5000          MOV      r0,#0x2000            ;1142
00053a  f7fffffe          BL       FLASH_WaitForLastOperation
00053e  2805              CMP      r0,#5                 ;1143
000540  bf08              IT       EQ
000542  bd70              POPEQ    {r4-r6,pc}
000544  f8dc1010          LDR      r1,[r12,#0x10]        ;1146
000548  f64172ef          MOV      r2,#0x1fef            ;1146
00054c  4011              ANDS     r1,r1,r2              ;1146
00054e  f8cc1010          STR      r1,[r12,#0x10]        ;1146
000552  bd70              POP      {r4-r6,pc}
;;;1152   
                          ENDP

                  FLASH_GetUserOptionByte PROC
;;;1215     */
;;;1216   uint32_t FLASH_GetUserOptionByte(void)
000554  4822              LDR      r0,|L1.1504|
;;;1217   {
;;;1218     /* Return the User Option Byte */
;;;1219     return (uint32_t)(FLASH->OBR >> 2);
000556  69c0              LDR      r0,[r0,#0x1c]
000558  0880              LSRS     r0,r0,#2
;;;1220   }
00055a  4770              BX       lr
;;;1221   
                          ENDP

                  FLASH_GetWriteProtectionOptionByte PROC
;;;1227     */
;;;1228   uint32_t FLASH_GetWriteProtectionOptionByte(void)
00055c  4820              LDR      r0,|L1.1504|
;;;1229   {
;;;1230     /* Return the Flash write protection Register value */
;;;1231     return (uint32_t)(FLASH->WRPR);
00055e  6a00              LDR      r0,[r0,#0x20]
;;;1232   }
000560  4770              BX       lr
;;;1233   
                          ENDP

                  FLASH_GetPrefetchBufferStatus PROC
;;;1259     */
;;;1260   FlagStatus FLASH_GetPrefetchBufferStatus(void)
000562  491f              LDR      r1,|L1.1504|
;;;1261   {
;;;1262     FlagStatus bitstatus = RESET;
000564  2000              MOVS     r0,#0
;;;1263     
;;;1264     if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
000566  6809              LDR      r1,[r1,#0]
000568  f0110f20          TST      r1,#0x20
;;;1265     {
;;;1266       bitstatus = SET;
00056c  bf18              IT       NE
00056e  2001              MOVNE    r0,#1
;;;1267     }
;;;1268     else
;;;1269     {
;;;1270       bitstatus = RESET;
;;;1271     }
;;;1272     /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
;;;1273     return bitstatus; 
;;;1274   }
000570  4770              BX       lr
;;;1275   
                          ENDP

                  FLASH_ITConfig PROC
;;;1289     */
;;;1290   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000572  2900              CMP      r1,#0
;;;1291   {
;;;1292   #ifdef STM32F10X_XL
;;;1293     /* Check the parameters */
;;;1294     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1295     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1296   
;;;1297     if((FLASH_IT & 0x80000000) != 0x0)
;;;1298     {
;;;1299       if(NewState != DISABLE)
;;;1300       {
;;;1301         /* Enable the interrupt sources */
;;;1302         FLASH->CR2 |= (FLASH_IT & 0x7FFFFFFF);
;;;1303       }
;;;1304       else
;;;1305       {
;;;1306         /* Disable the interrupt sources */
;;;1307         FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
;;;1308       }
;;;1309     }
;;;1310     else
;;;1311     {
;;;1312       if(NewState != DISABLE)
;;;1313       {
;;;1314         /* Enable the interrupt sources */
;;;1315         FLASH->CR |= FLASH_IT;
;;;1316       }
;;;1317       else
;;;1318       {
;;;1319         /* Disable the interrupt sources */
;;;1320         FLASH->CR &= ~(uint32_t)FLASH_IT;
;;;1321       }
;;;1322     }
;;;1323   #else
;;;1324     /* Check the parameters */
;;;1325     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1326     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1327   
;;;1328     if(NewState != DISABLE)
;;;1329     {
;;;1330       /* Enable the interrupt sources */
;;;1331       FLASH->CR |= FLASH_IT;
000574  4a1a              LDR      r2,|L1.1504|
;;;1332     }
;;;1333     else
;;;1334     {
;;;1335       /* Disable the interrupt sources */
;;;1336       FLASH->CR &= ~(uint32_t)FLASH_IT;
000576  6911              LDR      r1,[r2,#0x10]
000578  bf14              ITE      NE                    ;1331
00057a  4308              ORRNE    r0,r0,r1              ;1331
00057c  ea210000          BICEQ    r0,r1,r0
000580  6110              STR      r0,[r2,#0x10]         ;1331
;;;1337     }
;;;1338   #endif /* STM32F10X_XL */
;;;1339   }
000582  4770              BX       lr
;;;1340   
                          ENDP

                  FLASH_GetFlagStatus PROC
;;;1356     */
;;;1357   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000584  4601              MOV      r1,r0
;;;1358   {
;;;1359     FlagStatus bitstatus = RESET;
000586  2000              MOVS     r0,#0
;;;1360   
;;;1361   #ifdef STM32F10X_XL
;;;1362     /* Check the parameters */
;;;1363     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1364     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1365     {
;;;1366       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
;;;1367       {
;;;1368         bitstatus = SET;
;;;1369       }
;;;1370       else
;;;1371       {
;;;1372         bitstatus = RESET;
;;;1373       }
;;;1374     }
;;;1375     else
;;;1376     {
;;;1377       if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1378       {
;;;1379         if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
;;;1380         {
;;;1381           bitstatus = SET;
;;;1382         }
;;;1383         else
;;;1384         {
;;;1385           bitstatus = RESET;
;;;1386         }
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390         if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
;;;1391         {
;;;1392           bitstatus = SET;
;;;1393         }
;;;1394         else
;;;1395         {
;;;1396           bitstatus = RESET;
;;;1397         }
;;;1398       }
;;;1399     }
;;;1400   #else
;;;1401     /* Check the parameters */
;;;1402     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1403     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1404     {
;;;1405       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
000588  4a15              LDR      r2,|L1.1504|
00058a  2901              CMP      r1,#1                 ;1403
00058c  d004              BEQ      |L1.1432|
;;;1406       {
;;;1407         bitstatus = SET;
;;;1408       }
;;;1409       else
;;;1410       {
;;;1411         bitstatus = RESET;
;;;1412       }
;;;1413     }
;;;1414     else
;;;1415     {
;;;1416      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
00058e  68d2              LDR      r2,[r2,#0xc]
000590  420a              TST      r2,r1
;;;1417       {
;;;1418         bitstatus = SET;
;;;1419       }
;;;1420       else
;;;1421       {
;;;1422         bitstatus = RESET;
;;;1423       }
;;;1424     }
;;;1425   #endif /* STM32F10X_XL */
;;;1426   
;;;1427     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1428     return bitstatus;
;;;1429   }
000592  bf08              IT       EQ
000594  4770              BXEQ     lr
000596  e004              B        |L1.1442|
                  |L1.1432|
000598  69d1              LDR      r1,[r2,#0x1c]         ;1405
00059a  f0110f01          TST      r1,#1                 ;1405
00059e  bf08              IT       EQ
0005a0  4770              BXEQ     lr
                  |L1.1442|
0005a2  2001              MOVS     r0,#1                 ;1407
0005a4  4770              BX       lr
;;;1430   
                          ENDP

                  FLASH_ClearFlag PROC
;;;1442     */
;;;1443   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
0005a6  490e              LDR      r1,|L1.1504|
;;;1444   {
;;;1445   #ifdef STM32F10X_XL
;;;1446     /* Check the parameters */
;;;1447     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1448   
;;;1449     if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1450     {
;;;1451       /* Clear the flags */
;;;1452       FLASH->SR2 = FLASH_FLAG;
;;;1453     }
;;;1454     else
;;;1455     {
;;;1456       /* Clear the flags */
;;;1457       FLASH->SR = FLASH_FLAG;
;;;1458     }  
;;;1459   
;;;1460   #else
;;;1461     /* Check the parameters */
;;;1462     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1463     
;;;1464     /* Clear the flags */
;;;1465     FLASH->SR = FLASH_FLAG;
0005a8  60c8              STR      r0,[r1,#0xc]
;;;1466   #endif /* STM32F10X_XL */
;;;1467   }
0005aa  4770              BX       lr
;;;1468   
                          ENDP

                  FLASH_GetStatus PROC
;;;1476     */
;;;1477   FLASH_Status FLASH_GetStatus(void)
0005ac  490c              LDR      r1,|L1.1504|
;;;1478   {
;;;1479     FLASH_Status flashstatus = FLASH_COMPLETE;
0005ae  2004              MOVS     r0,#4
;;;1480     
;;;1481     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
0005b0  68ca              LDR      r2,[r1,#0xc]
0005b2  f0120f01          TST      r2,#1
;;;1482     {
;;;1483       flashstatus = FLASH_BUSY;
0005b6  bf1c              ITT      NE
0005b8  2001              MOVNE    r0,#1
;;;1484     }
;;;1485     else 
;;;1486     {  
;;;1487       if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
;;;1488       { 
;;;1489         flashstatus = FLASH_ERROR_PG;
;;;1490       }
;;;1491       else 
;;;1492       {
;;;1493         if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
;;;1494         {
;;;1495           flashstatus = FLASH_ERROR_WRP;
;;;1496         }
;;;1497         else
;;;1498         {
;;;1499           flashstatus = FLASH_COMPLETE;
;;;1500         }
;;;1501       }
;;;1502     }
;;;1503     /* Return the Flash Status */
;;;1504     return flashstatus;
;;;1505   }
0005ba  4770              BXNE     lr
0005bc  68ca              LDR      r2,[r1,#0xc]          ;1487
0005be  f0120f04          TST      r2,#4                 ;1487
0005c2  bf1c              ITT      NE                    ;1489
0005c4  2002              MOVNE    r0,#2                 ;1489
0005c6  4770              BXNE     lr
0005c8  68c9              LDR      r1,[r1,#0xc]          ;1493
0005ca  f0110f10          TST      r1,#0x10              ;1493
0005ce  bf18              IT       NE                    ;1495
0005d0  2003              MOVNE    r0,#3                 ;1495
0005d2  4770              BX       lr
;;;1506   
                          ENDP

                  |L1.1492|
                          DCD      0x1ffff80c
                  |L1.1496|
                          DCD      0x1ffff80e
                  |L1.1500|
                          DCD      0x45670123
                  |L1.1504|
                          DCD      0x40022000
                  |L1.1508|
                          DCD      0xcdef89ab
                  |L1.1512|
                          DCD      0x1ffff800
                  |L1.1516|
                          DCD      0x1ffff802
