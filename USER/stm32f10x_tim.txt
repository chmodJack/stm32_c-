; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_tim.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_tim.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_tim.crf ..\STM32F10x_FWLIB\src\stm32f10x_tim.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIM_DeInit PROC
;;;121      */
;;;122    void TIM_DeInit(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;123    {
;;;124      /* Check the parameters */
;;;125      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;126     
;;;127      if (TIMx == TIM1)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13196          SUBS     r1,r1,#0x12c00
00000a  d03b              BEQ      |L1.132|
;;;128      {
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
;;;131      }     
;;;132      else if (TIMx == TIM2)
00000c  f1b04f80          CMP      r0,#0x40000000
000010  d04d              BEQ      |L1.174|
;;;133      {
;;;134        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;135        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
;;;136      }
;;;137      else if (TIMx == TIM3)
000012  f5113194          ADDS     r1,r1,#0x12800
000016  d040              BEQ      |L1.154|
;;;138      {
;;;139        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;140        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
;;;141      }
;;;142      else if (TIMx == TIM4)
000018  f5b16180          SUBS     r1,r1,#0x400
00001c  d051              BEQ      |L1.194|
;;;143      {
;;;144        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
;;;145        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
;;;146      } 
;;;147      else if (TIMx == TIM5)
00001e  f5b16180          SUBS     r1,r1,#0x400
000022  d058              BEQ      |L1.214|
;;;148      {
;;;149        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
;;;150        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
;;;151      } 
;;;152      else if (TIMx == TIM6)
000024  f5b16180          SUBS     r1,r1,#0x400
000028  d05f              BEQ      |L1.234|
;;;153      {
;;;154        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
;;;155        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
;;;156      } 
;;;157      else if (TIMx == TIM7)
00002a  f5b16180          SUBS     r1,r1,#0x400
00002e  d066              BEQ      |L1.254|
;;;158      {
;;;159        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
;;;160        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
;;;161      } 
;;;162      else if (TIMx == TIM8)
000030  f5b13190          SUBS     r1,r1,#0x12000
000034  d06d              BEQ      |L1.274|
;;;163      {
;;;164        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
;;;165        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
;;;166      }
;;;167      else if (TIMx == TIM9)
000036  f5b151c0          SUBS     r1,r1,#0x1800
00003a  d075              BEQ      |L1.296|
;;;168      {      
;;;169        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
;;;170        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
;;;171       }  
;;;172      else if (TIMx == TIM10)
00003c  f5b16180          SUBS     r1,r1,#0x400
000040  d07d              BEQ      |L1.318|
;;;173      {      
;;;174        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
;;;175        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
;;;176      }  
;;;177      else if (TIMx == TIM11) 
000042  f5b16180          SUBS     r1,r1,#0x400
000046  d07d              BEQ      |L1.324|
;;;178      {     
;;;179        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
;;;180        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
;;;181      }  
;;;182      else if (TIMx == TIM12)
000048  f511319e          ADDS     r1,r1,#0x13c00
00004c  d07b              BEQ      |L1.326|
;;;183      {      
;;;184        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
;;;185        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
;;;186      }  
;;;187      else if (TIMx == TIM13) 
00004e  f5b16180          SUBS     r1,r1,#0x400
000052  d079              BEQ      |L1.328|
;;;188      {       
;;;189        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
;;;190        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
;;;191      }
;;;192      else if (TIMx == TIM14) 
000054  f5b16180          SUBS     r1,r1,#0x400
000058  d077              BEQ      |L1.330|
;;;193      {       
;;;194        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
;;;195        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
;;;196      }        
;;;197      else if (TIMx == TIM15)
00005a  f5b13190          SUBS     r1,r1,#0x12000
00005e  d075              BEQ      |L1.332|
;;;198      {
;;;199        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
;;;200        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
;;;201      } 
;;;202      else if (TIMx == TIM16)
000060  f5b16180          SUBS     r1,r1,#0x400
000064  d073              BEQ      |L1.334|
;;;203      {
;;;204        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
;;;205        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
;;;206      } 
;;;207      else
;;;208      {
;;;209        if (TIMx == TIM17)
000066  f5b16180          SUBS     r1,r1,#0x400
;;;210        {
;;;211          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
;;;212          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
;;;213        }  
;;;214      }
;;;215    }
00006a  bf18              IT       NE
00006c  bd10              POPNE    {r4,pc}
00006e  2101              MOVS     r1,#1                 ;211
000070  0488              LSLS     r0,r1,#18             ;211
000072  f7fffffe          BL       RCC_APB2PeriphResetCmd
000076  e8bd4010          POP      {r4,lr}               ;212
00007a  2100              MOVS     r1,#0                 ;212
00007c  f44f2080          MOV      r0,#0x40000           ;212
000080  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.132|
000084  2101              MOVS     r1,#1                 ;129
000086  02c8              LSLS     r0,r1,#11             ;129
000088  f7fffffe          BL       RCC_APB2PeriphResetCmd
00008c  e8bd4010          POP      {r4,lr}               ;130
000090  2100              MOVS     r1,#0                 ;130
000092  f44f6000          MOV      r0,#0x800             ;130
000096  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.154|
00009a  2101              MOVS     r1,#1                 ;139
00009c  2002              MOVS     r0,#2                 ;139
00009e  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000a2  2100              MOVS     r1,#0                 ;140
0000a4  e8bd4010          POP      {r4,lr}               ;140
0000a8  2002              MOVS     r0,#2                 ;140
0000aa  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.174|
0000ae  2101              MOVS     r1,#1                 ;134
0000b0  4608              MOV      r0,r1                 ;134
0000b2  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000b6  2100              MOVS     r1,#0                 ;135
0000b8  e8bd4010          POP      {r4,lr}               ;135
0000bc  2001              MOVS     r0,#1                 ;135
0000be  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.194|
0000c2  2101              MOVS     r1,#1                 ;144
0000c4  2004              MOVS     r0,#4                 ;144
0000c6  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000ca  2100              MOVS     r1,#0                 ;145
0000cc  e8bd4010          POP      {r4,lr}               ;145
0000d0  2004              MOVS     r0,#4                 ;145
0000d2  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.214|
0000d6  2101              MOVS     r1,#1                 ;149
0000d8  2008              MOVS     r0,#8                 ;149
0000da  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000de  2100              MOVS     r1,#0                 ;150
0000e0  e8bd4010          POP      {r4,lr}               ;150
0000e4  2008              MOVS     r0,#8                 ;150
0000e6  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.234|
0000ea  2101              MOVS     r1,#1                 ;154
0000ec  2010              MOVS     r0,#0x10              ;154
0000ee  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000f2  2100              MOVS     r1,#0                 ;155
0000f4  e8bd4010          POP      {r4,lr}               ;155
0000f8  2010              MOVS     r0,#0x10              ;155
0000fa  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.254|
0000fe  2101              MOVS     r1,#1                 ;159
000100  2020              MOVS     r0,#0x20              ;159
000102  f7fffffe          BL       RCC_APB1PeriphResetCmd
000106  2100              MOVS     r1,#0                 ;160
000108  e8bd4010          POP      {r4,lr}               ;160
00010c  2020              MOVS     r0,#0x20              ;160
00010e  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.274|
000112  2101              MOVS     r1,#1                 ;164
000114  0348              LSLS     r0,r1,#13             ;164
000116  f7fffffe          BL       RCC_APB2PeriphResetCmd
00011a  e8bd4010          POP      {r4,lr}               ;165
00011e  2100              MOVS     r1,#0                 ;165
000120  f44f5000          MOV      r0,#0x2000            ;165
000124  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.296|
000128  2101              MOVS     r1,#1                 ;169
00012a  04c8              LSLS     r0,r1,#19             ;169
00012c  f7fffffe          BL       RCC_APB2PeriphResetCmd
000130  e8bd4010          POP      {r4,lr}               ;170
000134  2100              MOVS     r1,#0                 ;170
000136  f44f2000          MOV      r0,#0x80000           ;170
00013a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.318|
00013e  2101              MOVS     r1,#1                 ;174
000140  0508              LSLS     r0,r1,#20             ;174
000142  e005              B        |L1.336|
                  |L1.324|
000144  e00d              B        |L1.354|
                  |L1.326|
000146  e017              B        |L1.376|
                  |L1.328|
000148  e020              B        |L1.396|
                  |L1.330|
00014a  e029              B        |L1.416|
                  |L1.332|
00014c  e033              B        |L1.438|
                  |L1.334|
00014e  e03d              B        |L1.460|
                  |L1.336|
000150  f7fffffe          BL       RCC_APB2PeriphResetCmd
000154  e8bd4010          POP      {r4,lr}               ;175
000158  2100              MOVS     r1,#0                 ;175
00015a  f44f1080          MOV      r0,#0x100000          ;175
00015e  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.354|
000162  2101              MOVS     r1,#1                 ;179
000164  0548              LSLS     r0,r1,#21             ;179
000166  f7fffffe          BL       RCC_APB2PeriphResetCmd
00016a  e8bd4010          POP      {r4,lr}               ;180
00016e  2100              MOVS     r1,#0                 ;180
000170  f44f1000          MOV      r0,#0x200000          ;180
000174  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.376|
000178  2101              MOVS     r1,#1                 ;184
00017a  2040              MOVS     r0,#0x40              ;184
00017c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000180  2100              MOVS     r1,#0                 ;185
000182  e8bd4010          POP      {r4,lr}               ;185
000186  2040              MOVS     r0,#0x40              ;185
000188  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.396|
00018c  2101              MOVS     r1,#1                 ;189
00018e  2080              MOVS     r0,#0x80              ;189
000190  f7fffffe          BL       RCC_APB1PeriphResetCmd
000194  2100              MOVS     r1,#0                 ;190
000196  e8bd4010          POP      {r4,lr}               ;190
00019a  2080              MOVS     r0,#0x80              ;190
00019c  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.416|
0001a0  2101              MOVS     r1,#1                 ;194
0001a2  0208              LSLS     r0,r1,#8              ;194
0001a4  f7fffffe          BL       RCC_APB1PeriphResetCmd
0001a8  e8bd4010          POP      {r4,lr}               ;195
0001ac  2100              MOVS     r1,#0                 ;195
0001ae  f44f7080          MOV      r0,#0x100             ;195
0001b2  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.438|
0001b6  2101              MOVS     r1,#1                 ;199
0001b8  0408              LSLS     r0,r1,#16             ;199
0001ba  f7fffffe          BL       RCC_APB2PeriphResetCmd
0001be  e8bd4010          POP      {r4,lr}               ;200
0001c2  2100              MOVS     r1,#0                 ;200
0001c4  f44f3080          MOV      r0,#0x10000           ;200
0001c8  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.460|
0001cc  2101              MOVS     r1,#1                 ;204
0001ce  0448              LSLS     r0,r1,#17             ;204
0001d0  f7fffffe          BL       RCC_APB2PeriphResetCmd
0001d4  e8bd4010          POP      {r4,lr}               ;205
0001d8  2100              MOVS     r1,#0                 ;205
0001da  f44f3000          MOV      r0,#0x20000           ;205
0001de  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;216    
                          ENDP

                  TIM_TimeBaseInit PROC
;;;225      */
;;;226    void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
0001e2  b410              PUSH     {r4}
;;;227    {
;;;228      uint16_t tmpcr1 = 0;
;;;229    
;;;230      /* Check the parameters */
;;;231      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;232      assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
;;;233      assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
;;;234    
;;;235      tmpcr1 = TIMx->CR1;  
0001e4  8802              LDRH     r2,[r0,#0]
;;;236    
;;;237      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
0001e6  4bfd              LDR      r3,|L1.1500|
0001e8  f8dfc3f4          LDR      r12,|L1.1504|
0001ec  4298              CMP      r0,r3
0001ee  bf18              IT       NE
0001f0  4560              CMPNE    r0,r12
0001f2  d011              BEQ      |L1.536|
0001f4  f1b04f80          CMP      r0,#0x40000000
0001f8  bf1c              ITT      NE
0001fa  f1a04480          SUBNE    r4,r0,#0x40000000
0001fe  f5b46480          SUBSNE   r4,r4,#0x400
000202  d009              BEQ      |L1.536|
000204  f1a04480          SUB      r4,r0,#0x40000000
000208  f5b46400          SUBS     r4,r4,#0x800
00020c  bf1c              ITT      NE
00020e  f1a04480          SUBNE    r4,r0,#0x40000000
000212  f5b46440          SUBSNE   r4,r4,#0xc00
000216  d103              BNE      |L1.544|
                  |L1.536|
;;;238         (TIMx == TIM4) || (TIMx == TIM5)) 
;;;239      {
;;;240        /* Select the Counter Mode */
;;;241        tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
;;;242        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
000218  884c              LDRH     r4,[r1,#2]
00021a  f0220270          BIC      r2,r2,#0x70           ;241
00021e  4322              ORRS     r2,r2,r4
                  |L1.544|
;;;243      }
;;;244     
;;;245      if((TIMx != TIM6) && (TIMx != TIM7))
000220  f1a04480          SUB      r4,r0,#0x40000000
000224  f5b45480          SUBS     r4,r4,#0x1000
000228  bf1c              ITT      NE
00022a  f1a04480          SUBNE    r4,r0,#0x40000000
00022e  f5b454a0          SUBSNE   r4,r4,#0x1400
000232  d003              BEQ      |L1.572|
;;;246      {
;;;247        /* Set the clock division */
;;;248        tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
;;;249        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
000234  88cc              LDRH     r4,[r1,#6]
000236  f4227240          BIC      r2,r2,#0x300          ;248
00023a  4322              ORRS     r2,r2,r4
                  |L1.572|
;;;250      }
;;;251    
;;;252      TIMx->CR1 = tmpcr1;
00023c  8002              STRH     r2,[r0,#0]
;;;253    
;;;254      /* Set the Autoreload value */
;;;255      TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
00023e  888a              LDRH     r2,[r1,#4]
000240  8582              STRH     r2,[r0,#0x2c]
;;;256     
;;;257      /* Set the Prescaler value */
;;;258      TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
000242  880a              LDRH     r2,[r1,#0]
000244  8502              STRH     r2,[r0,#0x28]
;;;259        
;;;260      if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
000246  4298              CMP      r0,r3
000248  bf18              IT       NE
00024a  4560              CMPNE    r0,r12
00024c  d00d              BEQ      |L1.618|
00024e  f1a04280          SUB      r2,r0,#0x40000000
000252  f5b232a0          SUBS     r2,r2,#0x14000
000256  bf1f              ITTTT    NE
000258  f1a04280          SUBNE    r2,r0,#0x40000000
00025c  f5b232a2          SUBSNE   r2,r2,#0x14400
000260  f1a04280          SUBNE    r2,r0,#0x40000000
000264  f5b232a4          SUBSNE   r2,r2,#0x14800
000268  d101              BNE      |L1.622|
                  |L1.618|
;;;261      {
;;;262        /* Set the Repetition Counter value */
;;;263        TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
00026a  7a09              LDRB     r1,[r1,#8]
00026c  8601              STRH     r1,[r0,#0x30]
                  |L1.622|
;;;264      }
;;;265    
;;;266      /* Generate an update event to reload the Prescaler and the Repetition counter
;;;267         values immediately */
;;;268      TIMx->EGR = TIM_PSCReloadMode_Immediate;           
00026e  2101              MOVS     r1,#1
000270  8281              STRH     r1,[r0,#0x14]
;;;269    }
000272  bc10              POP      {r4}
000274  4770              BX       lr
;;;270    
                          ENDP

                  TIM_OC1Init PROC
;;;278      */
;;;279    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000276  b410              PUSH     {r4}
;;;280    {
;;;281      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;282       
;;;283      /* Check the parameters */
;;;284      assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;285      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;286      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;287      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;288     /* Disable the Channel 1: Reset the CC1E Bit */
;;;289      TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
000278  8c02              LDRH     r2,[r0,#0x20]
00027a  f0220201          BIC      r2,r2,#1
00027e  8402              STRH     r2,[r0,#0x20]
;;;290      /* Get the TIMx CCER register value */
;;;291      tmpccer = TIMx->CCER;
000280  8c02              LDRH     r2,[r0,#0x20]
;;;292      /* Get the TIMx CR2 register value */
;;;293      tmpcr2 =  TIMx->CR2;
000282  8883              LDRH     r3,[r0,#4]
;;;294      
;;;295      /* Get the TIMx CCMR1 register value */
;;;296      tmpccmrx = TIMx->CCMR1;
000284  f8b0c018          LDRH     r12,[r0,#0x18]
;;;297        
;;;298      /* Reset the Output Compare Mode Bits */
;;;299      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
;;;300      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
;;;301    
;;;302      /* Select the Output Compare Mode */
;;;303      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
000288  880c              LDRH     r4,[r1,#0]
00028a  f02c0c73          BIC      r12,r12,#0x73         ;300
00028e  ea440c0c          ORR      r12,r4,r12
;;;304      
;;;305      /* Reset the Output Polarity level */
;;;306      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
;;;307      /* Set the Output Compare Polarity */
;;;308      tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
000292  890c              LDRH     r4,[r1,#8]
000294  f0220202          BIC      r2,r2,#2              ;306
000298  4322              ORRS     r2,r2,r4
;;;309      
;;;310      /* Set the Output State */
;;;311      tmpccer |= TIM_OCInitStruct->TIM_OutputState;
00029a  884c              LDRH     r4,[r1,#2]
00029c  4322              ORRS     r2,r2,r4
;;;312        
;;;313      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
00029e  f1a04480          SUB      r4,r0,#0x40000000
0002a2  f5b43496          SUBS     r4,r4,#0x12c00
0002a6  bf1c              ITT      NE
0002a8  f1a04480          SUBNE    r4,r0,#0x40000000
0002ac  f5b4349a          SUBSNE   r4,r4,#0x13400
0002b0  d00d              BEQ      |L1.718|
0002b2  f1a04480          SUB      r4,r0,#0x40000000
0002b6  f5b434a0          SUBS     r4,r4,#0x14000
0002ba  bf1f              ITTTT    NE
0002bc  f1a04480          SUBNE    r4,r0,#0x40000000
0002c0  f5b434a2          SUBSNE   r4,r4,#0x14400
0002c4  f1a04480          SUBNE    r4,r0,#0x40000000
0002c8  f5b434a4          SUBSNE   r4,r4,#0x14800
0002cc  d10d              BNE      |L1.746|
                  |L1.718|
;;;314         (TIMx == TIM16)|| (TIMx == TIM17))
;;;315      {
;;;316        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;317        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;318        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;319        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;320        
;;;321        /* Reset the Output N Polarity level */
;;;322        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
;;;323        /* Set the Output N Polarity */
;;;324        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
0002ce  894c              LDRH     r4,[r1,#0xa]
0002d0  f0220208          BIC      r2,r2,#8              ;322
0002d4  4322              ORRS     r2,r2,r4
;;;325        
;;;326        /* Reset the Output N State */
;;;327        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
;;;328        /* Set the Output N State */
;;;329        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
0002d6  888c              LDRH     r4,[r1,#4]
0002d8  f0220204          BIC      r2,r2,#4              ;327
0002dc  4322              ORRS     r2,r2,r4
;;;330        
;;;331        /* Reset the Output Compare and Output Compare N IDLE State */
;;;332        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
;;;333        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
;;;334        
;;;335        /* Set the Output Idle state */
;;;336        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
0002de  898c              LDRH     r4,[r1,#0xc]
0002e0  f4237340          BIC      r3,r3,#0x300          ;333
0002e4  4323              ORRS     r3,r3,r4
;;;337        /* Set the Output N Idle state */
;;;338        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
0002e6  89cc              LDRH     r4,[r1,#0xe]
0002e8  4323              ORRS     r3,r3,r4
                  |L1.746|
;;;339      }
;;;340      /* Write to TIMx CR2 */
;;;341      TIMx->CR2 = tmpcr2;
0002ea  8083              STRH     r3,[r0,#4]
;;;342      
;;;343      /* Write to TIMx CCMR1 */
;;;344      TIMx->CCMR1 = tmpccmrx;
0002ec  f8a0c018          STRH     r12,[r0,#0x18]
;;;345    
;;;346      /* Set the Capture Compare Register value */
;;;347      TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
0002f0  88c9              LDRH     r1,[r1,#6]
0002f2  8681              STRH     r1,[r0,#0x34]
;;;348     
;;;349      /* Write to TIMx CCER */
;;;350      TIMx->CCER = tmpccer;
0002f4  8402              STRH     r2,[r0,#0x20]
;;;351    }
0002f6  bc10              POP      {r4}
0002f8  4770              BX       lr
;;;352    
                          ENDP

                  TIM_OC2Init PROC
;;;361      */
;;;362    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
0002fa  b430              PUSH     {r4,r5}
;;;363    {
;;;364      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;365       
;;;366      /* Check the parameters */
;;;367      assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
;;;368      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;369      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;370      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;371       /* Disable the Channel 2: Reset the CC2E Bit */
;;;372      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
0002fc  8c02              LDRH     r2,[r0,#0x20]
0002fe  f0220210          BIC      r2,r2,#0x10
000302  8402              STRH     r2,[r0,#0x20]
;;;373      
;;;374      /* Get the TIMx CCER register value */  
;;;375      tmpccer = TIMx->CCER;
000304  8c03              LDRH     r3,[r0,#0x20]
;;;376      /* Get the TIMx CR2 register value */
;;;377      tmpcr2 =  TIMx->CR2;
000306  f8b0c004          LDRH     r12,[r0,#4]
;;;378      
;;;379      /* Get the TIMx CCMR1 register value */
;;;380      tmpccmrx = TIMx->CCMR1;
00030a  8b02              LDRH     r2,[r0,#0x18]
;;;381        
;;;382      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;383      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
;;;384      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
;;;385      
;;;386      /* Select the Output Compare Mode */
;;;387      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
00030c  880d              LDRH     r5,[r1,#0]
00030e  f42244e6          BIC      r4,r2,#0x7300         ;384
000312  f64f72ff          MOV      r2,#0xffff
000316  ea022505          AND      r5,r2,r5,LSL #8
00031a  432c              ORRS     r4,r4,r5
;;;388      
;;;389      /* Reset the Output Polarity level */
;;;390      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
;;;391      /* Set the Output Compare Polarity */
;;;392      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
00031c  890d              LDRH     r5,[r1,#8]
00031e  f0230320          BIC      r3,r3,#0x20           ;390
000322  ea021505          AND      r5,r2,r5,LSL #4
000326  432b              ORRS     r3,r3,r5
;;;393      
;;;394      /* Set the Output State */
;;;395      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
000328  884d              LDRH     r5,[r1,#2]
00032a  ea021505          AND      r5,r2,r5,LSL #4
00032e  432b              ORRS     r3,r3,r5
;;;396        
;;;397      if((TIMx == TIM1) || (TIMx == TIM8))
000330  f1a04580          SUB      r5,r0,#0x40000000
000334  f5b53596          SUBS     r5,r5,#0x12c00
000338  bf1c              ITT      NE
00033a  f1a04580          SUBNE    r5,r0,#0x40000000
00033e  f5b5359a          SUBSNE   r5,r5,#0x13400
000342  d117              BNE      |L1.884|
;;;398      {
;;;399        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;400        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;401        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;402        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;403        
;;;404        /* Reset the Output N Polarity level */
;;;405        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
;;;406        /* Set the Output N Polarity */
;;;407        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
000344  894d              LDRH     r5,[r1,#0xa]
000346  f0230380          BIC      r3,r3,#0x80           ;405
00034a  ea021505          AND      r5,r2,r5,LSL #4
00034e  432b              ORRS     r3,r3,r5
;;;408        
;;;409        /* Reset the Output N State */
;;;410        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
;;;411        /* Set the Output N State */
;;;412        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
000350  888d              LDRH     r5,[r1,#4]
000352  f0230340          BIC      r3,r3,#0x40           ;410
000356  ea021505          AND      r5,r2,r5,LSL #4
00035a  432b              ORRS     r3,r3,r5
;;;413        
;;;414        /* Reset the Output Compare and Output Compare N IDLE State */
;;;415        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
;;;416        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
;;;417        
;;;418        /* Set the Output Idle state */
;;;419        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
00035c  898d              LDRH     r5,[r1,#0xc]
00035e  f42c6c40          BIC      r12,r12,#0xc00        ;416
000362  ea020585          AND      r5,r2,r5,LSL #2
000366  ea450c0c          ORR      r12,r5,r12
;;;420        /* Set the Output N Idle state */
;;;421        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
00036a  89cd              LDRH     r5,[r1,#0xe]
00036c  ea020285          AND      r2,r2,r5,LSL #2
000370  ea420c0c          ORR      r12,r2,r12
                  |L1.884|
;;;422      }
;;;423      /* Write to TIMx CR2 */
;;;424      TIMx->CR2 = tmpcr2;
000374  f8a0c004          STRH     r12,[r0,#4]
;;;425      
;;;426      /* Write to TIMx CCMR1 */
;;;427      TIMx->CCMR1 = tmpccmrx;
000378  8304              STRH     r4,[r0,#0x18]
;;;428    
;;;429      /* Set the Capture Compare Register value */
;;;430      TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
00037a  88c9              LDRH     r1,[r1,#6]
00037c  8701              STRH     r1,[r0,#0x38]
;;;431      
;;;432      /* Write to TIMx CCER */
;;;433      TIMx->CCER = tmpccer;
00037e  8403              STRH     r3,[r0,#0x20]
;;;434    }
000380  bc30              POP      {r4,r5}
000382  4770              BX       lr
;;;435    
                          ENDP

                  TIM_OC3Init PROC
;;;443      */
;;;444    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000384  b430              PUSH     {r4,r5}
;;;445    {
;;;446      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;447       
;;;448      /* Check the parameters */
;;;449      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;450      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;451      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;452      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;453      /* Disable the Channel 2: Reset the CC2E Bit */
;;;454      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
000386  8c02              LDRH     r2,[r0,#0x20]
000388  f4227280          BIC      r2,r2,#0x100
00038c  8402              STRH     r2,[r0,#0x20]
;;;455      
;;;456      /* Get the TIMx CCER register value */
;;;457      tmpccer = TIMx->CCER;
00038e  8c02              LDRH     r2,[r0,#0x20]
;;;458      /* Get the TIMx CR2 register value */
;;;459      tmpcr2 =  TIMx->CR2;
000390  8883              LDRH     r3,[r0,#4]
;;;460      
;;;461      /* Get the TIMx CCMR2 register value */
;;;462      tmpccmrx = TIMx->CCMR2;
000392  f8b0c01c          LDRH     r12,[r0,#0x1c]
;;;463        
;;;464      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;465      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
;;;466      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
;;;467      /* Select the Output Compare Mode */
;;;468      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
000396  880c              LDRH     r4,[r1,#0]
000398  f02c0c73          BIC      r12,r12,#0x73         ;466
00039c  ea44040c          ORR      r4,r4,r12
;;;469      
;;;470      /* Reset the Output Polarity level */
;;;471      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
0003a0  f4227c00          BIC      r12,r2,#0x200
;;;472      /* Set the Output Compare Polarity */
;;;473      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
0003a4  890d              LDRH     r5,[r1,#8]
0003a6  f64f72ff          MOV      r2,#0xffff
0003aa  ea022505          AND      r5,r2,r5,LSL #8
0003ae  ea450c0c          ORR      r12,r5,r12
;;;474      
;;;475      /* Set the Output State */
;;;476      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
0003b2  884d              LDRH     r5,[r1,#2]
0003b4  ea022505          AND      r5,r2,r5,LSL #8
0003b8  ea450c0c          ORR      r12,r5,r12
;;;477        
;;;478      if((TIMx == TIM1) || (TIMx == TIM8))
0003bc  f1a04580          SUB      r5,r0,#0x40000000
0003c0  f5b53596          SUBS     r5,r5,#0x12c00
0003c4  bf1c              ITT      NE
0003c6  f1a04580          SUBNE    r5,r0,#0x40000000
0003ca  f5b5359a          SUBSNE   r5,r5,#0x13400
0003ce  d117              BNE      |L1.1024|
;;;479      {
;;;480        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;481        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;482        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;483        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;484        
;;;485        /* Reset the Output N Polarity level */
;;;486        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
;;;487        /* Set the Output N Polarity */
;;;488        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
0003d0  894d              LDRH     r5,[r1,#0xa]
0003d2  f42c6c00          BIC      r12,r12,#0x800        ;486
0003d6  ea022505          AND      r5,r2,r5,LSL #8
0003da  ea450c0c          ORR      r12,r5,r12
;;;489        /* Reset the Output N State */
;;;490        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
;;;491        
;;;492        /* Set the Output N State */
;;;493        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
0003de  888d              LDRH     r5,[r1,#4]
0003e0  f42c6c80          BIC      r12,r12,#0x400        ;490
0003e4  ea022505          AND      r5,r2,r5,LSL #8
0003e8  ea450c0c          ORR      r12,r5,r12
;;;494        /* Reset the Output Compare and Output Compare N IDLE State */
;;;495        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
;;;496        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
;;;497        /* Set the Output Idle state */
;;;498        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
0003ec  898d              LDRH     r5,[r1,#0xc]
0003ee  f4235340          BIC      r3,r3,#0x3000         ;496
0003f2  ea021505          AND      r5,r2,r5,LSL #4
0003f6  432b              ORRS     r3,r3,r5
;;;499        /* Set the Output N Idle state */
;;;500        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
0003f8  89cd              LDRH     r5,[r1,#0xe]
0003fa  ea021205          AND      r2,r2,r5,LSL #4
0003fe  4313              ORRS     r3,r3,r2
                  |L1.1024|
;;;501      }
;;;502      /* Write to TIMx CR2 */
;;;503      TIMx->CR2 = tmpcr2;
000400  8083              STRH     r3,[r0,#4]
;;;504      
;;;505      /* Write to TIMx CCMR2 */
;;;506      TIMx->CCMR2 = tmpccmrx;
000402  8384              STRH     r4,[r0,#0x1c]
;;;507    
;;;508      /* Set the Capture Compare Register value */
;;;509      TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
000404  88c9              LDRH     r1,[r1,#6]
000406  8781              STRH     r1,[r0,#0x3c]
;;;510      
;;;511      /* Write to TIMx CCER */
;;;512      TIMx->CCER = tmpccer;
000408  f8a0c020          STRH     r12,[r0,#0x20]
;;;513    }
00040c  bc30              POP      {r4,r5}
00040e  4770              BX       lr
;;;514    
                          ENDP

                  TIM_OC4Init PROC
;;;522      */
;;;523    void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000410  b430              PUSH     {r4,r5}
;;;524    {
;;;525      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;526       
;;;527      /* Check the parameters */
;;;528      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;529      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;530      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;531      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;532      /* Disable the Channel 2: Reset the CC4E Bit */
;;;533      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
000412  8c02              LDRH     r2,[r0,#0x20]
000414  f4225280          BIC      r2,r2,#0x1000
000418  8402              STRH     r2,[r0,#0x20]
;;;534      
;;;535      /* Get the TIMx CCER register value */
;;;536      tmpccer = TIMx->CCER;
00041a  8c04              LDRH     r4,[r0,#0x20]
;;;537      /* Get the TIMx CR2 register value */
;;;538      tmpcr2 =  TIMx->CR2;
00041c  8882              LDRH     r2,[r0,#4]
;;;539      
;;;540      /* Get the TIMx CCMR2 register value */
;;;541      tmpccmrx = TIMx->CCMR2;
00041e  8b83              LDRH     r3,[r0,#0x1c]
;;;542        
;;;543      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;544      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
;;;545      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
;;;546      
;;;547      /* Select the Output Compare Mode */
;;;548      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
000420  880d              LDRH     r5,[r1,#0]
000422  f4234ce6          BIC      r12,r3,#0x7300        ;545
000426  f64f73ff          MOV      r3,#0xffff
00042a  ea032505          AND      r5,r3,r5,LSL #8
00042e  ea450c0c          ORR      r12,r5,r12
;;;549      
;;;550      /* Reset the Output Polarity level */
;;;551      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
;;;552      /* Set the Output Compare Polarity */
;;;553      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
000432  890d              LDRH     r5,[r1,#8]
000434  f4245400          BIC      r4,r4,#0x2000         ;551
000438  ea033505          AND      r5,r3,r5,LSL #12
00043c  432c              ORRS     r4,r4,r5
;;;554      
;;;555      /* Set the Output State */
;;;556      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
00043e  884d              LDRH     r5,[r1,#2]
000440  ea033505          AND      r5,r3,r5,LSL #12
000444  432c              ORRS     r4,r4,r5
;;;557        
;;;558      if((TIMx == TIM1) || (TIMx == TIM8))
000446  f1a04580          SUB      r5,r0,#0x40000000
00044a  f5b53596          SUBS     r5,r5,#0x12c00
00044e  bf1c              ITT      NE
000450  f1a04580          SUBNE    r5,r0,#0x40000000
000454  f5b5359a          SUBSNE   r5,r5,#0x13400
000458  d105              BNE      |L1.1126|
;;;559      {
;;;560        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;561        /* Reset the Output Compare IDLE State */
;;;562        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
;;;563        /* Set the Output Idle state */
;;;564        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
00045a  898d              LDRH     r5,[r1,#0xc]
00045c  f4224280          BIC      r2,r2,#0x4000         ;562
000460  ea031385          AND      r3,r3,r5,LSL #6
000464  431a              ORRS     r2,r2,r3
                  |L1.1126|
;;;565      }
;;;566      /* Write to TIMx CR2 */
;;;567      TIMx->CR2 = tmpcr2;
000466  8082              STRH     r2,[r0,#4]
;;;568      
;;;569      /* Write to TIMx CCMR2 */  
;;;570      TIMx->CCMR2 = tmpccmrx;
000468  f8a0c01c          STRH     r12,[r0,#0x1c]
;;;571    
;;;572      /* Set the Capture Compare Register value */
;;;573      TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
00046c  88c9              LDRH     r1,[r1,#6]
00046e  f8a01040          STRH     r1,[r0,#0x40]
;;;574      
;;;575      /* Write to TIMx CCER */
;;;576      TIMx->CCER = tmpccer;
000472  8404              STRH     r4,[r0,#0x20]
;;;577    }
000474  bc30              POP      {r4,r5}
000476  4770              BX       lr
;;;578    
                          ENDP

                  TIM_SetIC4Prescaler PROC
;;;2418     */
;;;2419   void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000478  8b82              LDRH     r2,[r0,#0x1c]
;;;2420   {  
;;;2421     /* Check the parameters */
;;;2422     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2423     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2424     /* Reset the IC4PSC Bits */
;;;2425     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
00047a  f4226240          BIC      r2,r2,#0xc00
00047e  8382              STRH     r2,[r0,#0x1c]
;;;2426     /* Set the IC4PSC value */
;;;2427     TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
000480  8b82              LDRH     r2,[r0,#0x1c]
000482  f64f73ff          MOV      r3,#0xffff
000486  ea032101          AND      r1,r3,r1,LSL #8
00048a  4311              ORRS     r1,r1,r2
00048c  8381              STRH     r1,[r0,#0x1c]
;;;2428   }
00048e  4770              BX       lr
;;;2429   
                          ENDP

                  TIM_SetIC3Prescaler PROC
;;;2396     */
;;;2397   void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000490  8b82              LDRH     r2,[r0,#0x1c]
;;;2398   {
;;;2399     /* Check the parameters */
;;;2400     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2401     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2402     /* Reset the IC3PSC Bits */
;;;2403     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
000492  f022020c          BIC      r2,r2,#0xc
000496  8382              STRH     r2,[r0,#0x1c]
;;;2404     /* Set the IC3PSC value */
;;;2405     TIMx->CCMR2 |= TIM_ICPSC;
000498  8b82              LDRH     r2,[r0,#0x1c]
00049a  4311              ORRS     r1,r1,r2
00049c  8381              STRH     r1,[r0,#0x1c]
;;;2406   }
00049e  4770              BX       lr
;;;2407   
                          ENDP

                  TIM_SetIC2Prescaler PROC
;;;2374     */
;;;2375   void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
0004a0  8b02              LDRH     r2,[r0,#0x18]
;;;2376   {
;;;2377     /* Check the parameters */
;;;2378     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2379     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2380     /* Reset the IC2PSC Bits */
;;;2381     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
0004a2  f4226240          BIC      r2,r2,#0xc00
0004a6  8302              STRH     r2,[r0,#0x18]
;;;2382     /* Set the IC2PSC value */
;;;2383     TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
0004a8  8b02              LDRH     r2,[r0,#0x18]
0004aa  f64f73ff          MOV      r3,#0xffff
0004ae  ea032101          AND      r1,r3,r1,LSL #8
0004b2  4311              ORRS     r1,r1,r2
0004b4  8301              STRH     r1,[r0,#0x18]
;;;2384   }
0004b6  4770              BX       lr
;;;2385   
                          ENDP

                  TIM_SetIC1Prescaler PROC
;;;2352     */
;;;2353   void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
0004b8  8b02              LDRH     r2,[r0,#0x18]
;;;2354   {
;;;2355     /* Check the parameters */
;;;2356     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2357     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2358     /* Reset the IC1PSC Bits */
;;;2359     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
0004ba  f022020c          BIC      r2,r2,#0xc
0004be  8302              STRH     r2,[r0,#0x18]
;;;2360     /* Set the IC1PSC value */
;;;2361     TIMx->CCMR1 |= TIM_ICPSC;
0004c0  8b02              LDRH     r2,[r0,#0x18]
0004c2  4311              ORRS     r1,r1,r2
0004c4  8301              STRH     r1,[r0,#0x18]
;;;2362   }
0004c6  4770              BX       lr
;;;2363   
                          ENDP

                  TIM_ICInit PROC
;;;586      */
;;;587    void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
0004c8  e92d5ff0          PUSH     {r4-r12,lr}
;;;588    {
0004cc  460e              MOV      r6,r1
0004ce  4604              MOV      r4,r0
;;;589      /* Check the parameters */
;;;590      assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
;;;591      assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
;;;592      assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
;;;593      assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
;;;594      
;;;595      if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
;;;596         (TIMx == TIM4) ||(TIMx == TIM5))
;;;597      {
;;;598        assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
;;;599      }
;;;600      else
;;;601      {
;;;602        assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
;;;603      }
;;;604      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
0004d0  f8b19000          LDRH     r9,[r1,#0]
0004d4  4841              LDR      r0,|L1.1500|
0004d6  f8dfc108          LDR      r12,|L1.1504|
0004da  4f42              LDR      r7,|L1.1508|
0004dc  f8df8108          LDR      r8,|L1.1512|
0004e0  f8dfe108          LDR      lr,|L1.1516|
;;;605      {
;;;606        assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;607        /* TI1 Configuration */
;;;608        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
0004e4  8849              LDRH     r1,[r1,#2]
0004e6  88b2              LDRH     r2,[r6,#4]
0004e8  8933              LDRH     r3,[r6,#8]
0004ea  f64f75ff          MOV      r5,#0xffff
0004ee  f1b90f00          CMP      r9,#0                 ;604
0004f2  d03e              BEQ      |L1.1394|
;;;609                   TIM_ICInitStruct->TIM_ICSelection,
;;;610                   TIM_ICInitStruct->TIM_ICFilter);
;;;611        /* Set the Input Capture Prescaler value */
;;;612        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;613      }
;;;614      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
0004f4  f1b90f04          CMP      r9,#4
0004f8  d07c              BEQ      |L1.1524|
;;;615      {
;;;616        assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;617        /* TI2 Configuration */
;;;618        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
;;;619                   TIM_ICInitStruct->TIM_ICSelection,
;;;620                   TIM_ICInitStruct->TIM_ICFilter);
;;;621        /* Set the Input Capture Prescaler value */
;;;622        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;623      }
;;;624      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
0004fa  f1b90f08          CMP      r9,#8
0004fe  f8b49020          LDRH     r9,[r4,#0x20]
000502  d076              BEQ      |L1.1522|
000504  f4295980          BIC      r9,r9,#0x1000
000508  f8a49020          STRH     r9,[r4,#0x20]
00050c  f8b4a01c          LDRH     r10,[r4,#0x1c]
000510  f8b49020          LDRH     r9,[r4,#0x20]
000514  f42a4a73          BIC      r10,r10,#0xf300
000518  ea052202          AND      r2,r5,r2,LSL #8
00051c  ea42020a          ORR      r2,r2,r10
000520  ea053303          AND      r3,r5,r3,LSL #12
000524  431a              ORRS     r2,r2,r3
000526  ea053b01          AND      r11,r5,r1,LSL #12
00052a  4284              CMP      r4,r0
00052c  bf18              IT       NE
00052e  4564              CMPNE    r4,r12
;;;625      {
;;;626        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;627        /* TI3 Configuration */
;;;628        TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
;;;629                   TIM_ICInitStruct->TIM_ICSelection,
;;;630                   TIM_ICInitStruct->TIM_ICFilter);
;;;631        /* Set the Input Capture Prescaler value */
;;;632        TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;633      }
;;;634      else
;;;635      {
;;;636        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;637        /* TI4 Configuration */
;;;638        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
000530  d00b              BEQ      |L1.1354|
000532  f1b44f80          CMP      r4,#0x40000000
000536  bf18              IT       NE
000538  42bc              CMPNE    r4,r7
00053a  d006              BEQ      |L1.1354|
00053c  4544              CMP      r4,r8
00053e  bf1e              ITTT     NE
000540  4574              CMPNE    r4,lr
000542  f4294002          BICNE    r0,r9,#0x8200
000546  4308              ORRNE    r0,r0,r1
000548  d103              BNE      |L1.1362|
                  |L1.1354|
00054a  f4295000          BIC      r0,r9,#0x2000
00054e  ea40000b          ORR      r0,r0,r11
                  |L1.1362|
000552  f4405080          ORR      r0,r0,#0x1000
000556  83a2              STRH     r2,[r4,#0x1c]
000558  8420              STRH     r0,[r4,#0x20]
;;;639                   TIM_ICInitStruct->TIM_ICSelection,
;;;640                   TIM_ICInitStruct->TIM_ICFilter);
;;;641        /* Set the Input Capture Prescaler value */
;;;642        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
00055a  79b0              LDRB     r0,[r6,#6]
00055c  8ba1              LDRH     r1,[r4,#0x1c]
00055e  f4216140          BIC      r1,r1,#0xc00
000562  83a1              STRH     r1,[r4,#0x1c]
000564  8ba1              LDRH     r1,[r4,#0x1c]
000566  ea052000          AND      r0,r5,r0,LSL #8
00056a  4308              ORRS     r0,r0,r1
00056c  83a0              STRH     r0,[r4,#0x1c]
;;;643      }
;;;644    }
00056e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1394|
000572  f8b49020          LDRH     r9,[r4,#0x20]
000576  f0290901          BIC      r9,r9,#1
00057a  f8a49020          STRH     r9,[r4,#0x20]
00057e  f8b4a018          LDRH     r10,[r4,#0x18]
000582  f8b49020          LDRH     r9,[r4,#0x20]
000586  ea051303          AND      r3,r5,r3,LSL #4
00058a  431a              ORRS     r2,r2,r3
00058c  f02a0af3          BIC      r10,r10,#0xf3
000590  ea42020a          ORR      r2,r2,r10
000594  4284              CMP      r4,r0
000596  bf18              IT       NE
000598  4564              CMPNE    r4,r12
00059a  d008              BEQ      |L1.1454|
00059c  f1b44f80          CMP      r4,#0x40000000        ;608
0005a0  bf18              IT       NE                    ;608
0005a2  42bc              CMPNE    r4,r7                 ;608
0005a4  d003              BEQ      |L1.1454|
0005a6  4544              CMP      r4,r8                 ;608
0005a8  bf18              IT       NE                    ;608
0005aa  4574              CMPNE    r4,lr                 ;608
0005ac  d105              BNE      |L1.1466|
                  |L1.1454|
0005ae  f0290002          BIC      r0,r9,#2              ;608
0005b2  4308              ORRS     r0,r0,r1              ;608
0005b4  f0400001          ORR      r0,r0,#1              ;608
0005b8  e004              B        |L1.1476|
                  |L1.1466|
0005ba  f029000a          BIC      r0,r9,#0xa            ;608
0005be  4308              ORRS     r0,r0,r1              ;608
0005c0  f0400001          ORR      r0,r0,#1              ;608
                  |L1.1476|
0005c4  8322              STRH     r2,[r4,#0x18]         ;608
0005c6  8420              STRH     r0,[r4,#0x20]         ;608
0005c8  88f0              LDRH     r0,[r6,#6]            ;612
0005ca  8b21              LDRH     r1,[r4,#0x18]         ;612
0005cc  f021010c          BIC      r1,r1,#0xc            ;612
0005d0  8321              STRH     r1,[r4,#0x18]         ;612
0005d2  8b21              LDRH     r1,[r4,#0x18]         ;612
0005d4  4308              ORRS     r0,r0,r1              ;612
0005d6  8320              STRH     r0,[r4,#0x18]         ;612
                  |L1.1496|
0005d8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1500|
                          DCD      0x40012c00
                  |L1.1504|
                          DCD      0x40013400
                  |L1.1508|
                          DCD      0x40000400
                  |L1.1512|
                          DCD      0x40000800
                  |L1.1516|
                          DCD      0x40000c00
0005f0  e000              B        |L1.1524|
                  |L1.1522|
0005f2  e00d              B        |L1.1552|
                  |L1.1524|
0005f4  4620              MOV      r0,r4                 ;618
0005f6  f7fffffe          BL       TI2_Config
0005fa  79b0              LDRB     r0,[r6,#6]            ;622
0005fc  8b21              LDRH     r1,[r4,#0x18]         ;622
0005fe  f4216140          BIC      r1,r1,#0xc00          ;622
000602  8321              STRH     r1,[r4,#0x18]         ;622
000604  8b21              LDRH     r1,[r4,#0x18]         ;622
000606  ea052000          AND      r0,r5,r0,LSL #8       ;622
00060a  4308              ORRS     r0,r0,r1              ;622
00060c  8320              STRH     r0,[r4,#0x18]         ;622
00060e  e7e3              B        |L1.1496|
                  |L1.1552|
000610  f4297980          BIC      r9,r9,#0x100          ;622
000614  f8a49020          STRH     r9,[r4,#0x20]         ;622
000618  f8b4a01c          LDRH     r10,[r4,#0x1c]        ;622
00061c  f8b49020          LDRH     r9,[r4,#0x20]         ;622
000620  ea051303          AND      r3,r5,r3,LSL #4       ;622
000624  431a              ORRS     r2,r2,r3              ;622
000626  f02a0af3          BIC      r10,r10,#0xf3         ;622
00062a  ea052b01          AND      r11,r5,r1,LSL #8      ;622
00062e  ea42020a          ORR      r2,r2,r10             ;622
000632  4284              CMP      r4,r0                 ;622
000634  bf18              IT       NE                    ;622
000636  4564              CMPNE    r4,r12                ;622
000638  d00b              BEQ      |L1.1618|
00063a  f1b44f80          CMP      r4,#0x40000000        ;628
00063e  bf18              IT       NE                    ;628
000640  42bc              CMPNE    r4,r7                 ;628
000642  d006              BEQ      |L1.1618|
000644  4544              CMP      r4,r8                 ;628
000646  bf1e              ITTT     NE                    ;628
000648  4574              CMPNE    r4,lr                 ;628
00064a  f4296020          BICNE    r0,r9,#0xa00          ;628
00064e  4308              ORRNE    r0,r0,r1              ;628
000650  d103              BNE      |L1.1626|
                  |L1.1618|
000652  f4297000          BIC      r0,r9,#0x200          ;628
000656  ea40000b          ORR      r0,r0,r11             ;628
                  |L1.1626|
00065a  f4407080          ORR      r0,r0,#0x100          ;628
00065e  83a2              STRH     r2,[r4,#0x1c]         ;628
000660  8420              STRH     r0,[r4,#0x20]         ;628
000662  88f0              LDRH     r0,[r6,#6]            ;632
000664  8ba1              LDRH     r1,[r4,#0x1c]         ;632
000666  f021010c          BIC      r1,r1,#0xc            ;632
00066a  83a1              STRH     r1,[r4,#0x1c]         ;632
00066c  8ba1              LDRH     r1,[r4,#0x1c]         ;632
00066e  4308              ORRS     r0,r0,r1              ;632
000670  83a0              STRH     r0,[r4,#0x1c]         ;632
000672  e7b1              B        |L1.1496|
;;;645    
                          ENDP

                  TIM_PWMIConfig PROC
;;;653      */
;;;654    void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000674  e92d5ff0          PUSH     {r4-r12,lr}
;;;655    {
000678  460d              MOV      r5,r1
;;;656      uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
;;;657      uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
;;;658      /* Check the parameters */
;;;659      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;660      /* Select the Opposite Input Polarity */
;;;661      if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
00067a  8849              LDRH     r1,[r1,#2]
00067c  2600              MOVS     r6,#0                 ;656
00067e  2701              MOVS     r7,#1                 ;657
000680  4604              MOV      r4,r0                 ;655
000682  2900              CMP      r1,#0
;;;662      {
;;;663        icoppositepolarity = TIM_ICPolarity_Falling;
000684  bf08              IT       EQ
000686  2602              MOVEQ    r6,#2
;;;664      }
;;;665      else
;;;666      {
;;;667        icoppositepolarity = TIM_ICPolarity_Rising;
;;;668      }
;;;669      /* Select the Opposite Input */
;;;670      if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
000688  88aa              LDRH     r2,[r5,#4]
00068a  2a01              CMP      r2,#1
;;;671      {
;;;672        icoppositeselection = TIM_ICSelection_IndirectTI;
00068c  bf08              IT       EQ
00068e  2702              MOVEQ    r7,#2
;;;673      }
;;;674      else
;;;675      {
;;;676        icoppositeselection = TIM_ICSelection_DirectTI;
;;;677      }
;;;678      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
000690  8828              LDRH     r0,[r5,#0]
000692  f8df9728          LDR      r9,|L1.3516|
000696  f8dfa728          LDR      r10,|L1.3520|
00069a  f8dfb728          LDR      r11,|L1.3524|
;;;679      {
;;;680        /* TI1 Configuration */
;;;681        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
00069e  892b              LDRH     r3,[r5,#8]
0006a0  f64f78ff          MOV      r8,#0xffff
0006a4  2800              CMP      r0,#0                 ;678
0006a6  d043              BEQ      |L1.1840|
;;;682                   TIM_ICInitStruct->TIM_ICFilter);
;;;683        /* Set the Input Capture Prescaler value */
;;;684        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;685        /* TI2 Configuration */
;;;686        TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
;;;687        /* Set the Input Capture Prescaler value */
;;;688        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;689      }
;;;690      else
;;;691      { 
;;;692        /* TI2 Configuration */
;;;693        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
0006a8  4620              MOV      r0,r4
0006aa  f7fffffe          BL       TI2_Config
;;;694                   TIM_ICInitStruct->TIM_ICFilter);
;;;695        /* Set the Input Capture Prescaler value */
;;;696        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0006ae  79a8              LDRB     r0,[r5,#6]
0006b0  8b21              LDRH     r1,[r4,#0x18]
0006b2  f4216140          BIC      r1,r1,#0xc00
0006b6  8321              STRH     r1,[r4,#0x18]
0006b8  8b21              LDRH     r1,[r4,#0x18]
0006ba  ea082000          AND      r0,r8,r0,LSL #8
0006be  4308              ORRS     r0,r0,r1
0006c0  8320              STRH     r0,[r4,#0x18]
;;;697        /* TI1 Configuration */
;;;698        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
0006c2  8929              LDRH     r1,[r5,#8]
0006c4  8c20              LDRH     r0,[r4,#0x20]
0006c6  f0200001          BIC      r0,r0,#1
0006ca  8420              STRH     r0,[r4,#0x20]
0006cc  8b22              LDRH     r2,[r4,#0x18]
0006ce  8c20              LDRH     r0,[r4,#0x20]
0006d0  ea081101          AND      r1,r8,r1,LSL #4
0006d4  f02202f3          BIC      r2,r2,#0xf3
0006d8  4339              ORRS     r1,r1,r7
0006da  4311              ORRS     r1,r1,r2
0006dc  455c              CMP      r4,r11
0006de  bf18              IT       NE
0006e0  454c              CMPNE    r4,r9
0006e2  d01f              BEQ      |L1.1828|
0006e4  f1b44f80          CMP      r4,#0x40000000
0006e8  bf18              IT       NE
0006ea  4554              CMPNE    r4,r10
0006ec  d01a              BEQ      |L1.1828|
0006ee  f1a44380          SUB      r3,r4,#0x40000000
0006f2  f5b36300          SUBS     r3,r3,#0x800
0006f6  bf1c              ITT      NE
0006f8  f1a44380          SUBNE    r3,r4,#0x40000000
0006fc  f5b36340          SUBSNE   r3,r3,#0xc00
000700  d010              BEQ      |L1.1828|
000702  f020000a          BIC      r0,r0,#0xa
000706  4330              ORRS     r0,r0,r6
000708  f0400001          ORR      r0,r0,#1
                  |L1.1804|
00070c  8321              STRH     r1,[r4,#0x18]
00070e  8420              STRH     r0,[r4,#0x20]
;;;699        /* Set the Input Capture Prescaler value */
;;;700        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000710  88e8              LDRH     r0,[r5,#6]
000712  8b21              LDRH     r1,[r4,#0x18]
000714  f021010c          BIC      r1,r1,#0xc
000718  8321              STRH     r1,[r4,#0x18]
00071a  8b21              LDRH     r1,[r4,#0x18]
00071c  4308              ORRS     r0,r0,r1
00071e  8320              STRH     r0,[r4,#0x18]
;;;701      }
;;;702    }
000720  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1828|
000724  f0200002          BIC      r0,r0,#2
000728  4330              ORRS     r0,r0,r6
00072a  f0400001          ORR      r0,r0,#1
00072e  e7ed              B        |L1.1804|
                  |L1.1840|
000730  8c20              LDRH     r0,[r4,#0x20]
000732  f0200001          BIC      r0,r0,#1
000736  8420              STRH     r0,[r4,#0x20]
000738  f8b4c018          LDRH     r12,[r4,#0x18]
00073c  8c20              LDRH     r0,[r4,#0x20]
00073e  ea081303          AND      r3,r8,r3,LSL #4
000742  431a              ORRS     r2,r2,r3
000744  f02c0cf3          BIC      r12,r12,#0xf3
000748  ea42020c          ORR      r2,r2,r12
00074c  455c              CMP      r4,r11
00074e  bf18              IT       NE
000750  454c              CMPNE    r4,r9
000752  d02f              BEQ      |L1.1972|
000754  f1b44f80          CMP      r4,#0x40000000        ;681
000758  bf18              IT       NE                    ;681
00075a  4554              CMPNE    r4,r10                ;681
00075c  d02a              BEQ      |L1.1972|
00075e  f1a44380          SUB      r3,r4,#0x40000000     ;681
000762  f5b36300          SUBS     r3,r3,#0x800          ;681
000766  bf1c              ITT      NE                    ;681
000768  f1a44380          SUBNE    r3,r4,#0x40000000     ;681
00076c  f5b36340          SUBSNE   r3,r3,#0xc00          ;681
000770  d020              BEQ      |L1.1972|
000772  f020000a          BIC      r0,r0,#0xa            ;681
000776  4308              ORRS     r0,r0,r1              ;681
000778  f0400001          ORR      r0,r0,#1              ;681
                  |L1.1916|
00077c  8322              STRH     r2,[r4,#0x18]         ;681
00077e  8420              STRH     r0,[r4,#0x20]         ;681
000780  88e8              LDRH     r0,[r5,#6]            ;684
000782  8b21              LDRH     r1,[r4,#0x18]         ;684
000784  f021010c          BIC      r1,r1,#0xc            ;684
000788  8321              STRH     r1,[r4,#0x18]         ;684
00078a  8b21              LDRH     r1,[r4,#0x18]         ;684
00078c  4308              ORRS     r0,r0,r1              ;684
00078e  8320              STRH     r0,[r4,#0x18]         ;684
000790  892b              LDRH     r3,[r5,#8]            ;686
000792  463a              MOV      r2,r7                 ;686
000794  4631              MOV      r1,r6                 ;686
000796  4620              MOV      r0,r4                 ;686
000798  f7fffffe          BL       TI2_Config
00079c  79a8              LDRB     r0,[r5,#6]            ;688
00079e  8b21              LDRH     r1,[r4,#0x18]         ;688
0007a0  f4216140          BIC      r1,r1,#0xc00          ;688
0007a4  8321              STRH     r1,[r4,#0x18]         ;688
0007a6  8b21              LDRH     r1,[r4,#0x18]         ;688
0007a8  ea082000          AND      r0,r8,r0,LSL #8       ;688
0007ac  4308              ORRS     r0,r0,r1              ;688
0007ae  8320              STRH     r0,[r4,#0x18]         ;688
0007b0  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1972|
0007b4  f0200002          BIC      r0,r0,#2
0007b8  4308              ORRS     r0,r0,r1
0007ba  f0400001          ORR      r0,r0,#1
0007be  e7dd              B        |L1.1916|
;;;703    
                          ENDP

                  TIM_BDTRConfig PROC
;;;711      */
;;;712    void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
0007c0  880a              LDRH     r2,[r1,#0]
;;;713    {
;;;714      /* Check the parameters */
;;;715      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;716      assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
;;;717      assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
;;;718      assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
;;;719      assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
;;;720      assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
;;;721      assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
;;;722      /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
;;;723         the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;724      TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
0007c2  884b              LDRH     r3,[r1,#2]
0007c4  f8b1c006          LDRH     r12,[r1,#6]
0007c8  431a              ORRS     r2,r2,r3
0007ca  888b              LDRH     r3,[r1,#4]
0007cc  ea43030c          ORR      r3,r3,r12
0007d0  431a              ORRS     r2,r2,r3
0007d2  890b              LDRH     r3,[r1,#8]
0007d4  431a              ORRS     r2,r2,r3
0007d6  894b              LDRH     r3,[r1,#0xa]
0007d8  8989              LDRH     r1,[r1,#0xc]
0007da  431a              ORRS     r2,r2,r3
0007dc  4311              ORRS     r1,r1,r2
0007de  f8a01044          STRH     r1,[r0,#0x44]
;;;725                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
;;;726                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
;;;727                 TIM_BDTRInitStruct->TIM_AutomaticOutput;
;;;728    }
0007e2  4770              BX       lr
;;;729    
                          ENDP

                  TIM_TimeBaseStructInit PROC
;;;735      */
;;;736    void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
0007e4  f64f71ff          MOV      r1,#0xffff
;;;737    {
;;;738      /* Set the default configuration */
;;;739      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
0007e8  8081              STRH     r1,[r0,#4]
;;;740      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
0007ea  2100              MOVS     r1,#0
0007ec  8001              STRH     r1,[r0,#0]
;;;741      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
0007ee  80c1              STRH     r1,[r0,#6]
;;;742      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
0007f0  8041              STRH     r1,[r0,#2]
;;;743      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
0007f2  7201              STRB     r1,[r0,#8]
;;;744    }
0007f4  4770              BX       lr
;;;745    
                          ENDP

                  TIM_OCStructInit PROC
;;;751      */
;;;752    void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
0007f6  2100              MOVS     r1,#0
;;;753    {
;;;754      /* Set the default configuration */
;;;755      TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
0007f8  8001              STRH     r1,[r0,#0]
;;;756      TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
0007fa  8041              STRH     r1,[r0,#2]
;;;757      TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
0007fc  8081              STRH     r1,[r0,#4]
;;;758      TIM_OCInitStruct->TIM_Pulse = 0x0000;
0007fe  80c1              STRH     r1,[r0,#6]
;;;759      TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
000800  8101              STRH     r1,[r0,#8]
;;;760      TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
000802  8141              STRH     r1,[r0,#0xa]
;;;761      TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
000804  8181              STRH     r1,[r0,#0xc]
;;;762      TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
000806  81c1              STRH     r1,[r0,#0xe]
;;;763    }
000808  4770              BX       lr
;;;764    
                          ENDP

                  TIM_ICStructInit PROC
;;;770      */
;;;771    void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
00080a  2100              MOVS     r1,#0
;;;772    {
;;;773      /* Set the default configuration */
;;;774      TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
00080c  8001              STRH     r1,[r0,#0]
;;;775      TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
00080e  8041              STRH     r1,[r0,#2]
;;;776      TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
000810  2201              MOVS     r2,#1
000812  8082              STRH     r2,[r0,#4]
;;;777      TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
000814  80c1              STRH     r1,[r0,#6]
;;;778      TIM_ICInitStruct->TIM_ICFilter = 0x00;
000816  8101              STRH     r1,[r0,#8]
;;;779    }
000818  4770              BX       lr
;;;780    
                          ENDP

                  TIM_BDTRStructInit PROC
;;;786      */
;;;787    void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
00081a  2100              MOVS     r1,#0
;;;788    {
;;;789      /* Set the default configuration */
;;;790      TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
00081c  8001              STRH     r1,[r0,#0]
;;;791      TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
00081e  8041              STRH     r1,[r0,#2]
;;;792      TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
000820  8081              STRH     r1,[r0,#4]
;;;793      TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
000822  80c1              STRH     r1,[r0,#6]
;;;794      TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
000824  8101              STRH     r1,[r0,#8]
;;;795      TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
000826  8141              STRH     r1,[r0,#0xa]
;;;796      TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
000828  8181              STRH     r1,[r0,#0xc]
;;;797    }
00082a  4770              BX       lr
;;;798    
                          ENDP

                  TIM_Cmd PROC
;;;805      */
;;;806    void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
00082c  2900              CMP      r1,#0
;;;807    {
;;;808      /* Check the parameters */
;;;809      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;810      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;811      
;;;812      if (NewState != DISABLE)
;;;813      {
;;;814        /* Enable the TIM Counter */
;;;815        TIMx->CR1 |= TIM_CR1_CEN;
;;;816      }
;;;817      else
;;;818      {
;;;819        /* Disable the TIM Counter */
;;;820        TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
00082e  8801              LDRH     r1,[r0,#0]
000830  bf14              ITE      NE                    ;815
000832  f0410101          ORRNE    r1,r1,#1              ;815
000836  f0210101          BICEQ    r1,r1,#1
00083a  8001              STRH     r1,[r0,#0]            ;815
;;;821      }
;;;822    }
00083c  4770              BX       lr
;;;823    
                          ENDP

                  TIM_CtrlPWMOutputs PROC
;;;830      */
;;;831    void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
00083e  2900              CMP      r1,#0
;;;832    {
;;;833      /* Check the parameters */
;;;834      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;835      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;836      if (NewState != DISABLE)
;;;837      {
;;;838        /* Enable the TIM Main Output */
;;;839        TIMx->BDTR |= TIM_BDTR_MOE;
;;;840      }
;;;841      else
;;;842      {
;;;843        /* Disable the TIM Main Output */
;;;844        TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
000840  f8b01044          LDRH     r1,[r0,#0x44]
000844  bf14              ITE      NE                    ;839
000846  f4414100          ORRNE    r1,r1,#0x8000         ;839
00084a  f3c1010e          UBFXEQ   r1,r1,#0,#15
00084e  f8a01044          STRH     r1,[r0,#0x44]         ;839
;;;845      }  
;;;846    }
000852  4770              BX       lr
;;;847    
                          ENDP

                  TIM_ITConfig PROC
;;;871      */
;;;872    void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
000854  2a00              CMP      r2,#0
;;;873    {  
;;;874      /* Check the parameters */
;;;875      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;876      assert_param(IS_TIM_IT(TIM_IT));
;;;877      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;878      
;;;879      if (NewState != DISABLE)
;;;880      {
;;;881        /* Enable the Interrupt sources */
;;;882        TIMx->DIER |= TIM_IT;
;;;883      }
;;;884      else
;;;885      {
;;;886        /* Disable the Interrupt sources */
;;;887        TIMx->DIER &= (uint16_t)~TIM_IT;
000856  8982              LDRH     r2,[r0,#0xc]
000858  bf14              ITE      NE                    ;882
00085a  4311              ORRNE    r1,r1,r2              ;882
00085c  ea220101          BICEQ    r1,r2,r1
000860  8181              STRH     r1,[r0,#0xc]          ;882
;;;888      }
;;;889    }
000862  4770              BX       lr
;;;890    
                          ENDP

                  TIM_GenerateEvent PROC
;;;908      */
;;;909    void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
000864  8281              STRH     r1,[r0,#0x14]
;;;910    { 
;;;911      /* Check the parameters */
;;;912      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;913      assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
;;;914      
;;;915      /* Set the event sources */
;;;916      TIMx->EGR = TIM_EventSource;
;;;917    }
000866  4770              BX       lr
;;;918    
                          ENDP

                  TIM_DMAConfig PROC
;;;936      */
;;;937    void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
000868  4311              ORRS     r1,r1,r2
;;;938    {
;;;939      /* Check the parameters */
;;;940      assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;941      assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
;;;942      assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
;;;943      /* Set the DMA Base and the DMA Burst Length */
;;;944      TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
00086a  f8a01048          STRH     r1,[r0,#0x48]
;;;945    }
00086e  4770              BX       lr
;;;946    
                          ENDP

                  TIM_DMACmd PROC
;;;963      */
;;;964    void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
000870  2a00              CMP      r2,#0
;;;965    { 
;;;966      /* Check the parameters */
;;;967      assert_param(IS_TIM_LIST9_PERIPH(TIMx));
;;;968      assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
;;;969      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;970      
;;;971      if (NewState != DISABLE)
;;;972      {
;;;973        /* Enable the DMA sources */
;;;974        TIMx->DIER |= TIM_DMASource; 
;;;975      }
;;;976      else
;;;977      {
;;;978        /* Disable the DMA sources */
;;;979        TIMx->DIER &= (uint16_t)~TIM_DMASource;
000872  8982              LDRH     r2,[r0,#0xc]
000874  bf14              ITE      NE                    ;974
000876  4311              ORRNE    r1,r1,r2              ;974
000878  ea220101          BICEQ    r1,r2,r1
00087c  8181              STRH     r1,[r0,#0xc]          ;974
;;;980      }
;;;981    }
00087e  4770              BX       lr
;;;982    
                          ENDP

                  TIM_InternalClockConfig PROC
;;;988      */
;;;989    void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
000880  8901              LDRH     r1,[r0,#8]
;;;990    {
;;;991      /* Check the parameters */
;;;992      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;993      /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;994      TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000882  f0210107          BIC      r1,r1,#7
000886  8101              STRH     r1,[r0,#8]
;;;995    }
000888  4770              BX       lr
;;;996    
                          ENDP

                  TIM_SelectInputTrigger PROC
;;;1228     */
;;;1229   void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
00088a  8902              LDRH     r2,[r0,#8]
;;;1230   {
;;;1231     uint16_t tmpsmcr = 0;
;;;1232     /* Check the parameters */
;;;1233     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1234     assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1235     /* Get the TIMx SMCR register value */
;;;1236     tmpsmcr = TIMx->SMCR;
;;;1237     /* Reset the TS Bits */
;;;1238     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
00088c  f0220270          BIC      r2,r2,#0x70
;;;1239     /* Set the Input Trigger source */
;;;1240     tmpsmcr |= TIM_InputTriggerSource;
000890  4311              ORRS     r1,r1,r2
;;;1241     /* Write to TIMx SMCR */
;;;1242     TIMx->SMCR = tmpsmcr;
000892  8101              STRH     r1,[r0,#8]
;;;1243   }
000894  4770              BX       lr
;;;1244   
                          ENDP

                  TIM_ITRxExternalClockConfig PROC
;;;1007     */
;;;1008   void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000896  8902              LDRH     r2,[r0,#8]
000898  f0220270          BIC      r2,r2,#0x70
00089c  4311              ORRS     r1,r1,r2
00089e  8101              STRH     r1,[r0,#8]
;;;1009   {
;;;1010     /* Check the parameters */
;;;1011     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1012     assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1013     /* Select the Internal Trigger */
;;;1014     TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
;;;1015     /* Select the External clock mode1 */
;;;1016     TIMx->SMCR |= TIM_SlaveMode_External1;
0008a0  8901              LDRH     r1,[r0,#8]
0008a2  f0410107          ORR      r1,r1,#7
0008a6  8101              STRH     r1,[r0,#8]
;;;1017   }
0008a8  4770              BX       lr
;;;1018   
                          ENDP

                  TIM_TIxExternalClockConfig PROC
;;;1034     */
;;;1035   void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
0008aa  b570              PUSH     {r4-r6,lr}
;;;1036                                   uint16_t TIM_ICPolarity, uint16_t ICFilter)
;;;1037   {
0008ac  4694              MOV      r12,r2
0008ae  460d              MOV      r5,r1
0008b0  4604              MOV      r4,r0
;;;1038     /* Check the parameters */
;;;1039     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1040     assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
;;;1041     assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
;;;1042     assert_param(IS_TIM_IC_FILTER(ICFilter));
;;;1043     /* Configure the Timer Input Clock Source */
;;;1044     if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
0008b2  2960              CMP      r1,#0x60
0008b4  d043              BEQ      |L1.2366|
0008b6  8c20              LDRH     r0,[r4,#0x20]         ;1037
0008b8  f0200001          BIC      r0,r0,#1              ;1037
0008bc  8420              STRH     r0,[r4,#0x20]         ;1037
0008be  8b21              LDRH     r1,[r4,#0x18]         ;1037
0008c0  8c20              LDRH     r0,[r4,#0x20]         ;1037
0008c2  f64f72ff          MOV      r2,#0xffff            ;1037
0008c6  ea021203          AND      r2,r2,r3,LSL #4       ;1037
0008ca  f02101f3          BIC      r1,r1,#0xf3           ;1037
0008ce  f0420201          ORR      r2,r2,#1              ;1037
0008d2  4311              ORRS     r1,r1,r2              ;1037
0008d4  f1a44280          SUB      r2,r4,#0x40000000     ;1037
0008d8  f5b23296          SUBS     r2,r2,#0x12c00        ;1037
0008dc  bf1c              ITT      NE                    ;1037
0008de  f1a44380          SUBNE    r3,r4,#0x40000000     ;1037
0008e2  f5b3339a          SUBSNE   r3,r3,#0x13400        ;1037
;;;1045     {
;;;1046       TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
;;;1047     }
;;;1048     else
;;;1049     {
;;;1050       TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
0008e6  d023              BEQ      |L1.2352|
0008e8  f1b44f80          CMP      r4,#0x40000000
0008ec  bf1c              ITT      NE
0008ee  f1a44380          SUBNE    r3,r4,#0x40000000
0008f2  f5b36380          SUBSNE   r3,r3,#0x400
0008f6  d01b              BEQ      |L1.2352|
0008f8  f1a44380          SUB      r3,r4,#0x40000000
0008fc  f5b36300          SUBS     r3,r3,#0x800
000900  bf1c              ITT      NE
000902  f1a44380          SUBNE    r3,r4,#0x40000000
000906  f5b36340          SUBSNE   r3,r3,#0xc00
00090a  d011              BEQ      |L1.2352|
00090c  f020000a          BIC      r0,r0,#0xa
000910  ea40000c          ORR      r0,r0,r12
000914  f0400001          ORR      r0,r0,#1
                  |L1.2328|
000918  8321              STRH     r1,[r4,#0x18]
00091a  8420              STRH     r0,[r4,#0x20]
                  |L1.2332|
00091c  8920              LDRH     r0,[r4,#8]
00091e  f0200070          BIC      r0,r0,#0x70
000922  4328              ORRS     r0,r0,r5
000924  8120              STRH     r0,[r4,#8]
;;;1051     }
;;;1052     /* Select the Trigger source */
;;;1053     TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
;;;1054     /* Select the External clock mode1 */
;;;1055     TIMx->SMCR |= TIM_SlaveMode_External1;
000926  8920              LDRH     r0,[r4,#8]
000928  f0400007          ORR      r0,r0,#7
00092c  8120              STRH     r0,[r4,#8]
;;;1056   }
00092e  bd70              POP      {r4-r6,pc}
                  |L1.2352|
000930  f0200002          BIC      r0,r0,#2
000934  ea40000c          ORR      r0,r0,r12
000938  f0400001          ORR      r0,r0,#1
00093c  e7ec              B        |L1.2328|
                  |L1.2366|
00093e  2201              MOVS     r2,#1                 ;1046
000940  4661              MOV      r1,r12                ;1046
000942  f7fffffe          BL       TI2_Config
000946  e7e9              B        |L1.2332|
;;;1057   
                          ENDP

                  TIM_ETRConfig PROC
;;;1147     */
;;;1148   void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000948  b410              PUSH     {r4}
;;;1149                      uint16_t ExtTRGFilter)
;;;1150   {
;;;1151     uint16_t tmpsmcr = 0;
;;;1152     /* Check the parameters */
;;;1153     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1154     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1155     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1156     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1157     tmpsmcr = TIMx->SMCR;
00094a  f8b0c008          LDRH     r12,[r0,#8]
;;;1158     /* Reset the ETR Bits */
;;;1159     tmpsmcr &= SMCR_ETR_Mask;
;;;1160     /* Set the Prescaler, the Filter value and the Polarity */
;;;1161     tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
00094e  f64f74ff          MOV      r4,#0xffff
000952  ea042303          AND      r3,r4,r3,LSL #8
000956  431a              ORRS     r2,r2,r3
000958  f00c0cff          AND      r12,r12,#0xff         ;1159
00095c  4311              ORRS     r1,r1,r2
00095e  ea41010c          ORR      r1,r1,r12
;;;1162     /* Write to TIMx SMCR */
;;;1163     TIMx->SMCR = tmpsmcr;
000962  8101              STRH     r1,[r0,#8]
;;;1164   }
000964  bc10              POP      {r4}
000966  4770              BX       lr
;;;1165   
                          ENDP

                  TIM_ETRClockMode1Config PROC
;;;1074     */
;;;1075   void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000968  b410              PUSH     {r4}
00096a  f8b0c008          LDRH     r12,[r0,#8]
00096e  f64f74ff          MOV      r4,#0xffff
000972  ea042303          AND      r3,r4,r3,LSL #8
000976  431a              ORRS     r2,r2,r3
000978  f00c0cff          AND      r12,r12,#0xff
00097c  4311              ORRS     r1,r1,r2
00097e  ea41010c          ORR      r1,r1,r12
000982  8101              STRH     r1,[r0,#8]
;;;1076                                uint16_t ExtTRGFilter)
;;;1077   {
;;;1078     uint16_t tmpsmcr = 0;
;;;1079     /* Check the parameters */
;;;1080     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1081     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1082     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1083     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1084     /* Configure the ETR Clock source */
;;;1085     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
;;;1086     
;;;1087     /* Get the TIMx SMCR register value */
;;;1088     tmpsmcr = TIMx->SMCR;
000984  8901              LDRH     r1,[r0,#8]
;;;1089     /* Reset the SMS Bits */
;;;1090     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
;;;1091     /* Select the External clock mode1 */
;;;1092     tmpsmcr |= TIM_SlaveMode_External1;
;;;1093     /* Select the Trigger selection : ETRF */
;;;1094     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
;;;1095     tmpsmcr |= TIM_TS_ETRF;
000986  f0410177          ORR      r1,r1,#0x77
;;;1096     /* Write to TIMx SMCR */
;;;1097     TIMx->SMCR = tmpsmcr;
00098a  8101              STRH     r1,[r0,#8]
;;;1098   }
00098c  bc10              POP      {r4}
00098e  4770              BX       lr
;;;1099   
                          ENDP

                  TIM_ETRClockMode2Config PROC
;;;1116     */
;;;1117   void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
000990  b410              PUSH     {r4}
000992  f8b0c008          LDRH     r12,[r0,#8]
000996  f64f74ff          MOV      r4,#0xffff
00099a  ea042303          AND      r3,r4,r3,LSL #8
00099e  431a              ORRS     r2,r2,r3
0009a0  f00c0cff          AND      r12,r12,#0xff
0009a4  4311              ORRS     r1,r1,r2
0009a6  ea41010c          ORR      r1,r1,r12
0009aa  8101              STRH     r1,[r0,#8]
;;;1118                                uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;1119   {
;;;1120     /* Check the parameters */
;;;1121     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1122     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1123     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1124     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1125     /* Configure the ETR Clock source */
;;;1126     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
;;;1127     /* Enable the External clock mode2 */
;;;1128     TIMx->SMCR |= TIM_SMCR_ECE;
0009ac  8901              LDRH     r1,[r0,#8]
0009ae  f4414180          ORR      r1,r1,#0x4000
0009b2  8101              STRH     r1,[r0,#8]
;;;1129   }
0009b4  bc10              POP      {r4}
0009b6  4770              BX       lr
;;;1130   
                          ENDP

                  TIM_PrescalerConfig PROC
;;;1175     */
;;;1176   void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
0009b8  8501              STRH     r1,[r0,#0x28]
;;;1177   {
;;;1178     /* Check the parameters */
;;;1179     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1180     assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
;;;1181     /* Set the Prescaler value */
;;;1182     TIMx->PSC = Prescaler;
;;;1183     /* Set or reset the UG Bit */
;;;1184     TIMx->EGR = TIM_PSCReloadMode;
0009ba  8282              STRH     r2,[r0,#0x14]
;;;1185   }
0009bc  4770              BX       lr
;;;1186   
                          ENDP

                  TIM_CounterModeConfig PROC
;;;1198     */
;;;1199   void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
0009be  8802              LDRH     r2,[r0,#0]
;;;1200   {
;;;1201     uint16_t tmpcr1 = 0;
;;;1202     /* Check the parameters */
;;;1203     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1204     assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
;;;1205     tmpcr1 = TIMx->CR1;
;;;1206     /* Reset the CMS and DIR Bits */
;;;1207     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
0009c0  f0220270          BIC      r2,r2,#0x70
;;;1208     /* Set the Counter Mode */
;;;1209     tmpcr1 |= TIM_CounterMode;
0009c4  4311              ORRS     r1,r1,r2
;;;1210     /* Write to TIMx CR1 register */
;;;1211     TIMx->CR1 = tmpcr1;
0009c6  8001              STRH     r1,[r0,#0]
;;;1212   }
0009c8  4770              BX       lr
;;;1213   
                          ENDP

                  TIM_EncoderInterfaceConfig PROC
;;;1263     */
;;;1264   void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
0009ca  b430              PUSH     {r4,r5}
;;;1265                                   uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
;;;1266   {
;;;1267     uint16_t tmpsmcr = 0;
;;;1268     uint16_t tmpccmr1 = 0;
;;;1269     uint16_t tmpccer = 0;
;;;1270       
;;;1271     /* Check the parameters */
;;;1272     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1273     assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
;;;1274     assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
;;;1275     assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
;;;1276   
;;;1277     /* Get the TIMx SMCR register value */
;;;1278     tmpsmcr = TIMx->SMCR;
0009cc  8905              LDRH     r5,[r0,#8]
;;;1279     
;;;1280     /* Get the TIMx CCMR1 register value */
;;;1281     tmpccmr1 = TIMx->CCMR1;
0009ce  f8b0c018          LDRH     r12,[r0,#0x18]
;;;1282     
;;;1283     /* Get the TIMx CCER register value */
;;;1284     tmpccer = TIMx->CCER;
0009d2  8c04              LDRH     r4,[r0,#0x20]
;;;1285     
;;;1286     /* Set the encoder Mode */
;;;1287     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
0009d4  f0250507          BIC      r5,r5,#7
;;;1288     tmpsmcr |= TIM_EncoderMode;
0009d8  4329              ORRS     r1,r1,r5
;;;1289     
;;;1290     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;1291     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
0009da  f02c0c03          BIC      r12,r12,#3
0009de  f42c7c40          BIC      r12,r12,#0x300
;;;1292     tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
0009e2  f2401501          MOV      r5,#0x101
0009e6  ea4c0c05          ORR      r12,r12,r5
;;;1293     
;;;1294     /* Set the TI1 and the TI2 Polarities */
;;;1295     tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
;;;1296     tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
0009ea  f64f75ff          MOV      r5,#0xffff
0009ee  ea051303          AND      r3,r5,r3,LSL #4
0009f2  f0240422          BIC      r4,r4,#0x22           ;1295
0009f6  431a              ORRS     r2,r2,r3
0009f8  4322              ORRS     r2,r2,r4
;;;1297     
;;;1298     /* Write to TIMx SMCR */
;;;1299     TIMx->SMCR = tmpsmcr;
0009fa  8101              STRH     r1,[r0,#8]
;;;1300     /* Write to TIMx CCMR1 */
;;;1301     TIMx->CCMR1 = tmpccmr1;
0009fc  f8a0c018          STRH     r12,[r0,#0x18]
;;;1302     /* Write to TIMx CCER */
;;;1303     TIMx->CCER = tmpccer;
000a00  8402              STRH     r2,[r0,#0x20]
;;;1304   }
000a02  bc30              POP      {r4,r5}
000a04  4770              BX       lr
;;;1305   
                          ENDP

                  TIM_ForcedOC1Config PROC
;;;1314     */
;;;1315   void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000a06  8b02              LDRH     r2,[r0,#0x18]
;;;1316   {
;;;1317     uint16_t tmpccmr1 = 0;
;;;1318     /* Check the parameters */
;;;1319     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1320     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1321     tmpccmr1 = TIMx->CCMR1;
;;;1322     /* Reset the OC1M Bits */
;;;1323     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
000a08  f0220270          BIC      r2,r2,#0x70
;;;1324     /* Configure The Forced output Mode */
;;;1325     tmpccmr1 |= TIM_ForcedAction;
000a0c  4311              ORRS     r1,r1,r2
;;;1326     /* Write to TIMx CCMR1 register */
;;;1327     TIMx->CCMR1 = tmpccmr1;
000a0e  8301              STRH     r1,[r0,#0x18]
;;;1328   }
000a10  4770              BX       lr
;;;1329   
                          ENDP

                  TIM_ForcedOC2Config PROC
;;;1338     */
;;;1339   void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000a12  8b02              LDRH     r2,[r0,#0x18]
;;;1340   {
;;;1341     uint16_t tmpccmr1 = 0;
;;;1342     /* Check the parameters */
;;;1343     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1344     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1345     tmpccmr1 = TIMx->CCMR1;
;;;1346     /* Reset the OC2M Bits */
;;;1347     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
;;;1348     /* Configure The Forced output Mode */
;;;1349     tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
000a14  f64f73ff          MOV      r3,#0xffff
000a18  f42242e0          BIC      r2,r2,#0x7000         ;1347
000a1c  ea032101          AND      r1,r3,r1,LSL #8
000a20  4311              ORRS     r1,r1,r2
;;;1350     /* Write to TIMx CCMR1 register */
;;;1351     TIMx->CCMR1 = tmpccmr1;
000a22  8301              STRH     r1,[r0,#0x18]
;;;1352   }
000a24  4770              BX       lr
;;;1353   
                          ENDP

                  TIM_ForcedOC3Config PROC
;;;1362     */
;;;1363   void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000a26  8b82              LDRH     r2,[r0,#0x1c]
;;;1364   {
;;;1365     uint16_t tmpccmr2 = 0;
;;;1366     /* Check the parameters */
;;;1367     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1368     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1369     tmpccmr2 = TIMx->CCMR2;
;;;1370     /* Reset the OC1M Bits */
;;;1371     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
000a28  f0220270          BIC      r2,r2,#0x70
;;;1372     /* Configure The Forced output Mode */
;;;1373     tmpccmr2 |= TIM_ForcedAction;
000a2c  4311              ORRS     r1,r1,r2
;;;1374     /* Write to TIMx CCMR2 register */
;;;1375     TIMx->CCMR2 = tmpccmr2;
000a2e  8381              STRH     r1,[r0,#0x1c]
;;;1376   }
000a30  4770              BX       lr
;;;1377   
                          ENDP

                  TIM_ForcedOC4Config PROC
;;;1386     */
;;;1387   void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000a32  8b82              LDRH     r2,[r0,#0x1c]
;;;1388   {
;;;1389     uint16_t tmpccmr2 = 0;
;;;1390     /* Check the parameters */
;;;1391     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1392     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1393     tmpccmr2 = TIMx->CCMR2;
;;;1394     /* Reset the OC2M Bits */
;;;1395     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
;;;1396     /* Configure The Forced output Mode */
;;;1397     tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
000a34  f64f73ff          MOV      r3,#0xffff
000a38  f42242e0          BIC      r2,r2,#0x7000         ;1395
000a3c  ea032101          AND      r1,r3,r1,LSL #8
000a40  4311              ORRS     r1,r1,r2
;;;1398     /* Write to TIMx CCMR2 register */
;;;1399     TIMx->CCMR2 = tmpccmr2;
000a42  8381              STRH     r1,[r0,#0x1c]
;;;1400   }
000a44  4770              BX       lr
;;;1401   
                          ENDP

                  TIM_ARRPreloadConfig PROC
;;;1408     */
;;;1409   void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000a46  2900              CMP      r1,#0
;;;1410   {
;;;1411     /* Check the parameters */
;;;1412     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1413     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1414     if (NewState != DISABLE)
;;;1415     {
;;;1416       /* Set the ARR Preload Bit */
;;;1417       TIMx->CR1 |= TIM_CR1_ARPE;
;;;1418     }
;;;1419     else
;;;1420     {
;;;1421       /* Reset the ARR Preload Bit */
;;;1422       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
000a48  8801              LDRH     r1,[r0,#0]
000a4a  bf14              ITE      NE                    ;1417
000a4c  f0410180          ORRNE    r1,r1,#0x80           ;1417
000a50  f0210180          BICEQ    r1,r1,#0x80
000a54  8001              STRH     r1,[r0,#0]            ;1417
;;;1423     }
;;;1424   }
000a56  4770              BX       lr
;;;1425   
                          ENDP

                  TIM_SelectCOM PROC
;;;1432     */
;;;1433   void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
000a58  2900              CMP      r1,#0
;;;1434   {
;;;1435     /* Check the parameters */
;;;1436     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1437     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1438     if (NewState != DISABLE)
;;;1439     {
;;;1440       /* Set the COM Bit */
;;;1441       TIMx->CR2 |= TIM_CR2_CCUS;
;;;1442     }
;;;1443     else
;;;1444     {
;;;1445       /* Reset the COM Bit */
;;;1446       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
000a5a  8881              LDRH     r1,[r0,#4]
000a5c  bf14              ITE      NE                    ;1441
000a5e  f0410104          ORRNE    r1,r1,#4              ;1441
000a62  f0210104          BICEQ    r1,r1,#4
000a66  8081              STRH     r1,[r0,#4]            ;1441
;;;1447     }
;;;1448   }
000a68  4770              BX       lr
;;;1449   
                          ENDP

                  TIM_SelectCCDMA PROC
;;;1457     */
;;;1458   void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
000a6a  2900              CMP      r1,#0
;;;1459   {
;;;1460     /* Check the parameters */
;;;1461     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;1462     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1463     if (NewState != DISABLE)
;;;1464     {
;;;1465       /* Set the CCDS Bit */
;;;1466       TIMx->CR2 |= TIM_CR2_CCDS;
;;;1467     }
;;;1468     else
;;;1469     {
;;;1470       /* Reset the CCDS Bit */
;;;1471       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
000a6c  8881              LDRH     r1,[r0,#4]
000a6e  bf14              ITE      NE                    ;1466
000a70  f0410108          ORRNE    r1,r1,#8              ;1466
000a74  f0210108          BICEQ    r1,r1,#8
000a78  8081              STRH     r1,[r0,#4]            ;1466
;;;1472     }
;;;1473   }
000a7a  4770              BX       lr
;;;1474   
                          ENDP

                  TIM_CCPreloadControl PROC
;;;1482     */
;;;1483   void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
000a7c  2900              CMP      r1,#0
;;;1484   { 
;;;1485     /* Check the parameters */
;;;1486     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1487     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1488     if (NewState != DISABLE)
;;;1489     {
;;;1490       /* Set the CCPC Bit */
;;;1491       TIMx->CR2 |= TIM_CR2_CCPC;
;;;1492     }
;;;1493     else
;;;1494     {
;;;1495       /* Reset the CCPC Bit */
;;;1496       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
000a7e  8881              LDRH     r1,[r0,#4]
000a80  bf14              ITE      NE                    ;1491
000a82  f0410101          ORRNE    r1,r1,#1              ;1491
000a86  f0210101          BICEQ    r1,r1,#1
000a8a  8081              STRH     r1,[r0,#4]            ;1491
;;;1497     }
;;;1498   }
000a8c  4770              BX       lr
;;;1499   
                          ENDP

                  TIM_OC1PreloadConfig PROC
;;;1508     */
;;;1509   void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000a8e  8b02              LDRH     r2,[r0,#0x18]
;;;1510   {
;;;1511     uint16_t tmpccmr1 = 0;
;;;1512     /* Check the parameters */
;;;1513     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1514     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1515     tmpccmr1 = TIMx->CCMR1;
;;;1516     /* Reset the OC1PE Bit */
;;;1517     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
000a90  f0220208          BIC      r2,r2,#8
;;;1518     /* Enable or Disable the Output Compare Preload feature */
;;;1519     tmpccmr1 |= TIM_OCPreload;
000a94  4311              ORRS     r1,r1,r2
;;;1520     /* Write to TIMx CCMR1 register */
;;;1521     TIMx->CCMR1 = tmpccmr1;
000a96  8301              STRH     r1,[r0,#0x18]
;;;1522   }
000a98  4770              BX       lr
;;;1523   
                          ENDP

                  TIM_OC2PreloadConfig PROC
;;;1533     */
;;;1534   void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000a9a  8b02              LDRH     r2,[r0,#0x18]
;;;1535   {
;;;1536     uint16_t tmpccmr1 = 0;
;;;1537     /* Check the parameters */
;;;1538     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1539     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1540     tmpccmr1 = TIMx->CCMR1;
;;;1541     /* Reset the OC2PE Bit */
;;;1542     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
;;;1543     /* Enable or Disable the Output Compare Preload feature */
;;;1544     tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
000a9c  f64f73ff          MOV      r3,#0xffff
000aa0  f4226200          BIC      r2,r2,#0x800          ;1542
000aa4  ea032101          AND      r1,r3,r1,LSL #8
000aa8  4311              ORRS     r1,r1,r2
;;;1545     /* Write to TIMx CCMR1 register */
;;;1546     TIMx->CCMR1 = tmpccmr1;
000aaa  8301              STRH     r1,[r0,#0x18]
;;;1547   }
000aac  4770              BX       lr
;;;1548   
                          ENDP

                  TIM_OC3PreloadConfig PROC
;;;1557     */
;;;1558   void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000aae  8b82              LDRH     r2,[r0,#0x1c]
;;;1559   {
;;;1560     uint16_t tmpccmr2 = 0;
;;;1561     /* Check the parameters */
;;;1562     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1563     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1564     tmpccmr2 = TIMx->CCMR2;
;;;1565     /* Reset the OC3PE Bit */
;;;1566     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
000ab0  f0220208          BIC      r2,r2,#8
;;;1567     /* Enable or Disable the Output Compare Preload feature */
;;;1568     tmpccmr2 |= TIM_OCPreload;
000ab4  4311              ORRS     r1,r1,r2
;;;1569     /* Write to TIMx CCMR2 register */
;;;1570     TIMx->CCMR2 = tmpccmr2;
000ab6  8381              STRH     r1,[r0,#0x1c]
;;;1571   }
000ab8  4770              BX       lr
;;;1572   
                          ENDP

                  TIM_OC4PreloadConfig PROC
;;;1581     */
;;;1582   void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000aba  8b82              LDRH     r2,[r0,#0x1c]
;;;1583   {
;;;1584     uint16_t tmpccmr2 = 0;
;;;1585     /* Check the parameters */
;;;1586     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1587     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1588     tmpccmr2 = TIMx->CCMR2;
;;;1589     /* Reset the OC4PE Bit */
;;;1590     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
;;;1591     /* Enable or Disable the Output Compare Preload feature */
;;;1592     tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
000abc  f64f73ff          MOV      r3,#0xffff
000ac0  f4226200          BIC      r2,r2,#0x800          ;1590
000ac4  ea032101          AND      r1,r3,r1,LSL #8
000ac8  4311              ORRS     r1,r1,r2
;;;1593     /* Write to TIMx CCMR2 register */
;;;1594     TIMx->CCMR2 = tmpccmr2;
000aca  8381              STRH     r1,[r0,#0x1c]
;;;1595   }
000acc  4770              BX       lr
;;;1596   
                          ENDP

                  TIM_OC1FastConfig PROC
;;;1605     */
;;;1606   void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000ace  8b02              LDRH     r2,[r0,#0x18]
;;;1607   {
;;;1608     uint16_t tmpccmr1 = 0;
;;;1609     /* Check the parameters */
;;;1610     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1611     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1612     /* Get the TIMx CCMR1 register value */
;;;1613     tmpccmr1 = TIMx->CCMR1;
;;;1614     /* Reset the OC1FE Bit */
;;;1615     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
000ad0  f0220204          BIC      r2,r2,#4
;;;1616     /* Enable or Disable the Output Compare Fast Bit */
;;;1617     tmpccmr1 |= TIM_OCFast;
000ad4  4311              ORRS     r1,r1,r2
;;;1618     /* Write to TIMx CCMR1 */
;;;1619     TIMx->CCMR1 = tmpccmr1;
000ad6  8301              STRH     r1,[r0,#0x18]
;;;1620   }
000ad8  4770              BX       lr
;;;1621   
                          ENDP

                  TIM_OC2FastConfig PROC
;;;1631     */
;;;1632   void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000ada  8b02              LDRH     r2,[r0,#0x18]
;;;1633   {
;;;1634     uint16_t tmpccmr1 = 0;
;;;1635     /* Check the parameters */
;;;1636     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1637     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1638     /* Get the TIMx CCMR1 register value */
;;;1639     tmpccmr1 = TIMx->CCMR1;
;;;1640     /* Reset the OC2FE Bit */
;;;1641     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
;;;1642     /* Enable or Disable the Output Compare Fast Bit */
;;;1643     tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
000adc  f64f73ff          MOV      r3,#0xffff
000ae0  f4226280          BIC      r2,r2,#0x400          ;1641
000ae4  ea032101          AND      r1,r3,r1,LSL #8
000ae8  4311              ORRS     r1,r1,r2
;;;1644     /* Write to TIMx CCMR1 */
;;;1645     TIMx->CCMR1 = tmpccmr1;
000aea  8301              STRH     r1,[r0,#0x18]
;;;1646   }
000aec  4770              BX       lr
;;;1647   
                          ENDP

                  TIM_OC3FastConfig PROC
;;;1656     */
;;;1657   void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000aee  8b82              LDRH     r2,[r0,#0x1c]
;;;1658   {
;;;1659     uint16_t tmpccmr2 = 0;
;;;1660     /* Check the parameters */
;;;1661     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1662     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1663     /* Get the TIMx CCMR2 register value */
;;;1664     tmpccmr2 = TIMx->CCMR2;
;;;1665     /* Reset the OC3FE Bit */
;;;1666     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
000af0  f0220204          BIC      r2,r2,#4
;;;1667     /* Enable or Disable the Output Compare Fast Bit */
;;;1668     tmpccmr2 |= TIM_OCFast;
000af4  4311              ORRS     r1,r1,r2
;;;1669     /* Write to TIMx CCMR2 */
;;;1670     TIMx->CCMR2 = tmpccmr2;
000af6  8381              STRH     r1,[r0,#0x1c]
;;;1671   }
000af8  4770              BX       lr
;;;1672   
                          ENDP

                  TIM_OC4FastConfig PROC
;;;1681     */
;;;1682   void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000afa  8b82              LDRH     r2,[r0,#0x1c]
;;;1683   {
;;;1684     uint16_t tmpccmr2 = 0;
;;;1685     /* Check the parameters */
;;;1686     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1687     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1688     /* Get the TIMx CCMR2 register value */
;;;1689     tmpccmr2 = TIMx->CCMR2;
;;;1690     /* Reset the OC4FE Bit */
;;;1691     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
;;;1692     /* Enable or Disable the Output Compare Fast Bit */
;;;1693     tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
000afc  f64f73ff          MOV      r3,#0xffff
000b00  f4226280          BIC      r2,r2,#0x400          ;1691
000b04  ea032101          AND      r1,r3,r1,LSL #8
000b08  4311              ORRS     r1,r1,r2
;;;1694     /* Write to TIMx CCMR2 */
;;;1695     TIMx->CCMR2 = tmpccmr2;
000b0a  8381              STRH     r1,[r0,#0x1c]
;;;1696   }
000b0c  4770              BX       lr
;;;1697   
                          ENDP

                  TIM_ClearOC1Ref PROC
;;;1706     */
;;;1707   void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000b0e  8b02              LDRH     r2,[r0,#0x18]
;;;1708   {
;;;1709     uint16_t tmpccmr1 = 0;
;;;1710     /* Check the parameters */
;;;1711     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1712     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1713   
;;;1714     tmpccmr1 = TIMx->CCMR1;
;;;1715   
;;;1716     /* Reset the OC1CE Bit */
;;;1717     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
000b10  f0220280          BIC      r2,r2,#0x80
;;;1718     /* Enable or Disable the Output Compare Clear Bit */
;;;1719     tmpccmr1 |= TIM_OCClear;
000b14  4311              ORRS     r1,r1,r2
;;;1720     /* Write to TIMx CCMR1 register */
;;;1721     TIMx->CCMR1 = tmpccmr1;
000b16  8301              STRH     r1,[r0,#0x18]
;;;1722   }
000b18  4770              BX       lr
;;;1723   
                          ENDP

                  TIM_ClearOC2Ref PROC
;;;1732     */
;;;1733   void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000b1a  8b02              LDRH     r2,[r0,#0x18]
;;;1734   {
;;;1735     uint16_t tmpccmr1 = 0;
;;;1736     /* Check the parameters */
;;;1737     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1738     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1739     tmpccmr1 = TIMx->CCMR1;
;;;1740     /* Reset the OC2CE Bit */
;;;1741     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
;;;1742     /* Enable or Disable the Output Compare Clear Bit */
;;;1743     tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
000b1c  f64f73ff          MOV      r3,#0xffff
000b20  f3c2020e          UBFX     r2,r2,#0,#15          ;1741
000b24  ea032101          AND      r1,r3,r1,LSL #8
000b28  4311              ORRS     r1,r1,r2
;;;1744     /* Write to TIMx CCMR1 register */
;;;1745     TIMx->CCMR1 = tmpccmr1;
000b2a  8301              STRH     r1,[r0,#0x18]
;;;1746   }
000b2c  4770              BX       lr
;;;1747   
                          ENDP

                  TIM_ClearOC3Ref PROC
;;;1756     */
;;;1757   void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000b2e  8b82              LDRH     r2,[r0,#0x1c]
;;;1758   {
;;;1759     uint16_t tmpccmr2 = 0;
;;;1760     /* Check the parameters */
;;;1761     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1762     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1763     tmpccmr2 = TIMx->CCMR2;
;;;1764     /* Reset the OC3CE Bit */
;;;1765     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
000b30  f0220280          BIC      r2,r2,#0x80
;;;1766     /* Enable or Disable the Output Compare Clear Bit */
;;;1767     tmpccmr2 |= TIM_OCClear;
000b34  4311              ORRS     r1,r1,r2
;;;1768     /* Write to TIMx CCMR2 register */
;;;1769     TIMx->CCMR2 = tmpccmr2;
000b36  8381              STRH     r1,[r0,#0x1c]
;;;1770   }
000b38  4770              BX       lr
;;;1771   
                          ENDP

                  TIM_ClearOC4Ref PROC
;;;1780     */
;;;1781   void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000b3a  8b82              LDRH     r2,[r0,#0x1c]
;;;1782   {
;;;1783     uint16_t tmpccmr2 = 0;
;;;1784     /* Check the parameters */
;;;1785     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1786     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1787     tmpccmr2 = TIMx->CCMR2;
;;;1788     /* Reset the OC4CE Bit */
;;;1789     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
;;;1790     /* Enable or Disable the Output Compare Clear Bit */
;;;1791     tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
000b3c  f64f73ff          MOV      r3,#0xffff
000b40  f3c2020e          UBFX     r2,r2,#0,#15          ;1789
000b44  ea032101          AND      r1,r3,r1,LSL #8
000b48  4311              ORRS     r1,r1,r2
;;;1792     /* Write to TIMx CCMR2 register */
;;;1793     TIMx->CCMR2 = tmpccmr2;
000b4a  8381              STRH     r1,[r0,#0x1c]
;;;1794   }
000b4c  4770              BX       lr
;;;1795   
                          ENDP

                  TIM_OC1PolarityConfig PROC
;;;1804     */
;;;1805   void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000b4e  8c02              LDRH     r2,[r0,#0x20]
;;;1806   {
;;;1807     uint16_t tmpccer = 0;
;;;1808     /* Check the parameters */
;;;1809     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1810     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1811     tmpccer = TIMx->CCER;
;;;1812     /* Set or Reset the CC1P Bit */
;;;1813     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
000b50  f0220202          BIC      r2,r2,#2
;;;1814     tmpccer |= TIM_OCPolarity;
000b54  4311              ORRS     r1,r1,r2
;;;1815     /* Write to TIMx CCER register */
;;;1816     TIMx->CCER = tmpccer;
000b56  8401              STRH     r1,[r0,#0x20]
;;;1817   }
000b58  4770              BX       lr
;;;1818   
                          ENDP

                  TIM_OC1NPolarityConfig PROC
;;;1827     */
;;;1828   void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000b5a  8c02              LDRH     r2,[r0,#0x20]
;;;1829   {
;;;1830     uint16_t tmpccer = 0;
;;;1831     /* Check the parameters */
;;;1832     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1833     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1834      
;;;1835     tmpccer = TIMx->CCER;
;;;1836     /* Set or Reset the CC1NP Bit */
;;;1837     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
000b5c  f0220208          BIC      r2,r2,#8
;;;1838     tmpccer |= TIM_OCNPolarity;
000b60  4311              ORRS     r1,r1,r2
;;;1839     /* Write to TIMx CCER register */
;;;1840     TIMx->CCER = tmpccer;
000b62  8401              STRH     r1,[r0,#0x20]
;;;1841   }
000b64  4770              BX       lr
;;;1842   
                          ENDP

                  TIM_OC2PolarityConfig PROC
;;;1851     */
;;;1852   void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000b66  8c02              LDRH     r2,[r0,#0x20]
;;;1853   {
;;;1854     uint16_t tmpccer = 0;
;;;1855     /* Check the parameters */
;;;1856     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1857     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1858     tmpccer = TIMx->CCER;
;;;1859     /* Set or Reset the CC2P Bit */
;;;1860     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
;;;1861     tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
000b68  f64f73ff          MOV      r3,#0xffff
000b6c  f0220220          BIC      r2,r2,#0x20           ;1860
000b70  ea031101          AND      r1,r3,r1,LSL #4
000b74  4311              ORRS     r1,r1,r2
;;;1862     /* Write to TIMx CCER register */
;;;1863     TIMx->CCER = tmpccer;
000b76  8401              STRH     r1,[r0,#0x20]
;;;1864   }
000b78  4770              BX       lr
;;;1865   
                          ENDP

                  TIM_OC2NPolarityConfig PROC
;;;1874     */
;;;1875   void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000b7a  8c02              LDRH     r2,[r0,#0x20]
;;;1876   {
;;;1877     uint16_t tmpccer = 0;
;;;1878     /* Check the parameters */
;;;1879     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1880     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1881     
;;;1882     tmpccer = TIMx->CCER;
;;;1883     /* Set or Reset the CC2NP Bit */
;;;1884     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
;;;1885     tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
000b7c  f64f73ff          MOV      r3,#0xffff
000b80  f0220280          BIC      r2,r2,#0x80           ;1884
000b84  ea031101          AND      r1,r3,r1,LSL #4
000b88  4311              ORRS     r1,r1,r2
;;;1886     /* Write to TIMx CCER register */
;;;1887     TIMx->CCER = tmpccer;
000b8a  8401              STRH     r1,[r0,#0x20]
;;;1888   }
000b8c  4770              BX       lr
;;;1889   
                          ENDP

                  TIM_OC3PolarityConfig PROC
;;;1898     */
;;;1899   void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000b8e  8c02              LDRH     r2,[r0,#0x20]
;;;1900   {
;;;1901     uint16_t tmpccer = 0;
;;;1902     /* Check the parameters */
;;;1903     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1904     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1905     tmpccer = TIMx->CCER;
;;;1906     /* Set or Reset the CC3P Bit */
;;;1907     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
;;;1908     tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
000b90  f64f73ff          MOV      r3,#0xffff
000b94  f4227200          BIC      r2,r2,#0x200          ;1907
000b98  ea032101          AND      r1,r3,r1,LSL #8
000b9c  4311              ORRS     r1,r1,r2
;;;1909     /* Write to TIMx CCER register */
;;;1910     TIMx->CCER = tmpccer;
000b9e  8401              STRH     r1,[r0,#0x20]
;;;1911   }
000ba0  4770              BX       lr
;;;1912   
                          ENDP

                  TIM_OC3NPolarityConfig PROC
;;;1921     */
;;;1922   void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000ba2  8c02              LDRH     r2,[r0,#0x20]
;;;1923   {
;;;1924     uint16_t tmpccer = 0;
;;;1925    
;;;1926     /* Check the parameters */
;;;1927     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1928     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1929       
;;;1930     tmpccer = TIMx->CCER;
;;;1931     /* Set or Reset the CC3NP Bit */
;;;1932     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
;;;1933     tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
000ba4  f64f73ff          MOV      r3,#0xffff
000ba8  f4226200          BIC      r2,r2,#0x800          ;1932
000bac  ea032101          AND      r1,r3,r1,LSL #8
000bb0  4311              ORRS     r1,r1,r2
;;;1934     /* Write to TIMx CCER register */
;;;1935     TIMx->CCER = tmpccer;
000bb2  8401              STRH     r1,[r0,#0x20]
;;;1936   }
000bb4  4770              BX       lr
;;;1937   
                          ENDP

                  TIM_OC4PolarityConfig PROC
;;;1946     */
;;;1947   void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000bb6  8c02              LDRH     r2,[r0,#0x20]
;;;1948   {
;;;1949     uint16_t tmpccer = 0;
;;;1950     /* Check the parameters */
;;;1951     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1952     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1953     tmpccer = TIMx->CCER;
;;;1954     /* Set or Reset the CC4P Bit */
;;;1955     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
;;;1956     tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
000bb8  f64f73ff          MOV      r3,#0xffff
000bbc  f4225200          BIC      r2,r2,#0x2000         ;1955
000bc0  ea033101          AND      r1,r3,r1,LSL #12
000bc4  4311              ORRS     r1,r1,r2
;;;1957     /* Write to TIMx CCER register */
;;;1958     TIMx->CCER = tmpccer;
000bc6  8401              STRH     r1,[r0,#0x20]
;;;1959   }
000bc8  4770              BX       lr
;;;1960   
                          ENDP

                  TIM_CCxCmd PROC
;;;1973     */
;;;1974   void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
000bca  2301              MOVS     r3,#1
;;;1975   {
;;;1976     uint16_t tmp = 0;
;;;1977   
;;;1978     /* Check the parameters */
;;;1979     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1980     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;1981     assert_param(IS_TIM_CCX(TIM_CCx));
;;;1982   
;;;1983     tmp = CCER_CCE_Set << TIM_Channel;
;;;1984   
;;;1985     /* Reset the CCxE Bit */
;;;1986     TIMx->CCER &= (uint16_t)~ tmp;
000bcc  f8b0c020          LDRH     r12,[r0,#0x20]
000bd0  408b              LSLS     r3,r3,r1              ;1983
000bd2  ea2c0303          BIC      r3,r12,r3
000bd6  8403              STRH     r3,[r0,#0x20]
;;;1987   
;;;1988     /* Set or reset the CCxE Bit */ 
;;;1989     TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
000bd8  8c03              LDRH     r3,[r0,#0x20]
000bda  fa02f101          LSL      r1,r2,r1
000bde  4319              ORRS     r1,r1,r3
000be0  8401              STRH     r1,[r0,#0x20]
;;;1990   }
000be2  4770              BX       lr
;;;1991   
                          ENDP

                  TIM_CCxNCmd PROC
;;;2003     */
;;;2004   void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
000be4  2304              MOVS     r3,#4
;;;2005   {
;;;2006     uint16_t tmp = 0;
;;;2007   
;;;2008     /* Check the parameters */
;;;2009     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;2010     assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
;;;2011     assert_param(IS_TIM_CCXN(TIM_CCxN));
;;;2012   
;;;2013     tmp = CCER_CCNE_Set << TIM_Channel;
;;;2014   
;;;2015     /* Reset the CCxNE Bit */
;;;2016     TIMx->CCER &= (uint16_t) ~tmp;
000be6  f8b0c020          LDRH     r12,[r0,#0x20]
000bea  408b              LSLS     r3,r3,r1              ;2013
000bec  ea2c0303          BIC      r3,r12,r3
000bf0  8403              STRH     r3,[r0,#0x20]
;;;2017   
;;;2018     /* Set or reset the CCxNE Bit */ 
;;;2019     TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
000bf2  8c03              LDRH     r3,[r0,#0x20]
000bf4  fa02f101          LSL      r1,r2,r1
000bf8  4319              ORRS     r1,r1,r3
000bfa  8401              STRH     r1,[r0,#0x20]
;;;2020   }
000bfc  4770              BX       lr
;;;2021   
                          ENDP

                  TIM_SelectOCxM PROC
;;;2044     */
;;;2045   void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
000bfe  b410              PUSH     {r4}
;;;2046   {
;;;2047     uint32_t tmp = 0;
;;;2048     uint16_t tmp1 = 0;
;;;2049   
;;;2050     /* Check the parameters */
;;;2051     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2052     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;2053     assert_param(IS_TIM_OCM(TIM_OCMode));
;;;2054   
;;;2055     tmp = (uint32_t) TIMx;
;;;2056     tmp += CCMR_Offset;
;;;2057   
;;;2058     tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
000c00  f04f0c01          MOV      r12,#1
;;;2059   
;;;2060     /* Disable the Channel: Reset the CCxE Bit */
;;;2061     TIMx->CCER &= (uint16_t) ~tmp1;
000c04  8c04              LDRH     r4,[r0,#0x20]
000c06  f1000318          ADD      r3,r0,#0x18           ;2056
000c0a  fa0cfc01          LSL      r12,r12,r1            ;2058
000c0e  ea240c0c          BIC      r12,r4,r12
000c12  f8a0c020          STRH     r12,[r0,#0x20]
;;;2062   
;;;2063     if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
000c16  2900              CMP      r1,#0
000c18  bf18              IT       NE
000c1a  2908              CMPNE    r1,#8
000c1c  d010              BEQ      |L1.3136|
;;;2064     {
;;;2065       tmp += (TIM_Channel>>1);
;;;2066   
;;;2067       /* Reset the OCxM bits in the CCMRx register */
;;;2068       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
;;;2069      
;;;2070       /* Configure the OCxM bits in the CCMRx register */
;;;2071       *(__IO uint32_t *) tmp |= TIM_OCMode;
;;;2072     }
;;;2073     else
;;;2074     {
;;;2075       tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
000c1e  1f08              SUBS     r0,r1,#4
000c20  f3c0004e          UBFX     r0,r0,#1,#15
000c24  4418              ADD      r0,r0,r3
;;;2076   
;;;2077       /* Reset the OCxM bits in the CCMRx register */
;;;2078       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
000c26  6801              LDR      r1,[r0,#0]
000c28  f42141e0          BIC      r1,r1,#0x7000
000c2c  6001              STR      r1,[r0,#0]
;;;2079       
;;;2080       /* Configure the OCxM bits in the CCMRx register */
;;;2081       *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
000c2e  6801              LDR      r1,[r0,#0]
000c30  f64f73ff          MOV      r3,#0xffff
000c34  ea032202          AND      r2,r3,r2,LSL #8
000c38  4311              ORRS     r1,r1,r2
000c3a  6001              STR      r1,[r0,#0]
;;;2082     }
;;;2083   }
000c3c  bc10              POP      {r4}
000c3e  4770              BX       lr
                  |L1.3136|
000c40  eb030051          ADD      r0,r3,r1,LSR #1       ;2065
000c44  6801              LDR      r1,[r0,#0]            ;2068
000c46  f0210170          BIC      r1,r1,#0x70           ;2068
000c4a  6001              STR      r1,[r0,#0]            ;2068
000c4c  6801              LDR      r1,[r0,#0]            ;2071
000c4e  4311              ORRS     r1,r1,r2              ;2071
000c50  6001              STR      r1,[r0,#0]            ;2071
000c52  bc10              POP      {r4}
000c54  4770              BX       lr
;;;2084   
                          ENDP

                  TIM_UpdateDisableConfig PROC
;;;2091     */
;;;2092   void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000c56  2900              CMP      r1,#0
;;;2093   {
;;;2094     /* Check the parameters */
;;;2095     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2096     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2097     if (NewState != DISABLE)
;;;2098     {
;;;2099       /* Set the Update Disable Bit */
;;;2100       TIMx->CR1 |= TIM_CR1_UDIS;
;;;2101     }
;;;2102     else
;;;2103     {
;;;2104       /* Reset the Update Disable Bit */
;;;2105       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
000c58  8801              LDRH     r1,[r0,#0]
000c5a  bf14              ITE      NE                    ;2100
000c5c  f0410102          ORRNE    r1,r1,#2              ;2100
000c60  f0210102          BICEQ    r1,r1,#2
000c64  8001              STRH     r1,[r0,#0]            ;2100
;;;2106     }
;;;2107   }
000c66  4770              BX       lr
;;;2108   
                          ENDP

                  TIM_UpdateRequestConfig PROC
;;;2119     */
;;;2120   void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
000c68  2900              CMP      r1,#0
;;;2121   {
;;;2122     /* Check the parameters */
;;;2123     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2124     assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
;;;2125     if (TIM_UpdateSource != TIM_UpdateSource_Global)
;;;2126     {
;;;2127       /* Set the URS Bit */
;;;2128       TIMx->CR1 |= TIM_CR1_URS;
;;;2129     }
;;;2130     else
;;;2131     {
;;;2132       /* Reset the URS Bit */
;;;2133       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
000c6a  8801              LDRH     r1,[r0,#0]
000c6c  bf14              ITE      NE                    ;2128
000c6e  f0410104          ORRNE    r1,r1,#4              ;2128
000c72  f0210104          BICEQ    r1,r1,#4
000c76  8001              STRH     r1,[r0,#0]            ;2128
;;;2134     }
;;;2135   }
000c78  4770              BX       lr
;;;2136   
                          ENDP

                  TIM_SelectHallSensor PROC
;;;2143     */
;;;2144   void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
000c7a  2900              CMP      r1,#0
;;;2145   {
;;;2146     /* Check the parameters */
;;;2147     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2148     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2149     if (NewState != DISABLE)
;;;2150     {
;;;2151       /* Set the TI1S Bit */
;;;2152       TIMx->CR2 |= TIM_CR2_TI1S;
;;;2153     }
;;;2154     else
;;;2155     {
;;;2156       /* Reset the TI1S Bit */
;;;2157       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
000c7c  8881              LDRH     r1,[r0,#4]
000c7e  bf14              ITE      NE                    ;2152
000c80  f0410180          ORRNE    r1,r1,#0x80           ;2152
000c84  f0210180          BICEQ    r1,r1,#0x80
000c88  8081              STRH     r1,[r0,#4]            ;2152
;;;2158     }
;;;2159   }
000c8a  4770              BX       lr
;;;2160   
                          ENDP

                  TIM_SelectOnePulseMode PROC
;;;2169     */
;;;2170   void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
000c8c  8802              LDRH     r2,[r0,#0]
;;;2171   {
;;;2172     /* Check the parameters */
;;;2173     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2174     assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
;;;2175     /* Reset the OPM Bit */
;;;2176     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
000c8e  f0220208          BIC      r2,r2,#8
000c92  8002              STRH     r2,[r0,#0]
;;;2177     /* Configure the OPM Mode */
;;;2178     TIMx->CR1 |= TIM_OPMode;
000c94  8802              LDRH     r2,[r0,#0]
000c96  4311              ORRS     r1,r1,r2
000c98  8001              STRH     r1,[r0,#0]
;;;2179   }
000c9a  4770              BX       lr
;;;2180   
                          ENDP

                  TIM_SelectOutputTrigger PROC
;;;2201     */
;;;2202   void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
000c9c  8882              LDRH     r2,[r0,#4]
;;;2203   {
;;;2204     /* Check the parameters */
;;;2205     assert_param(IS_TIM_LIST7_PERIPH(TIMx));
;;;2206     assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
;;;2207     /* Reset the MMS Bits */
;;;2208     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
000c9e  f0220270          BIC      r2,r2,#0x70
000ca2  8082              STRH     r2,[r0,#4]
;;;2209     /* Select the TRGO source */
;;;2210     TIMx->CR2 |=  TIM_TRGOSource;
000ca4  8882              LDRH     r2,[r0,#4]
000ca6  4311              ORRS     r1,r1,r2
000ca8  8081              STRH     r1,[r0,#4]
;;;2211   }
000caa  4770              BX       lr
;;;2212   
                          ENDP

                  TIM_SelectSlaveMode PROC
;;;2224     */
;;;2225   void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
000cac  8902              LDRH     r2,[r0,#8]
;;;2226   {
;;;2227     /* Check the parameters */
;;;2228     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2229     assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
;;;2230    /* Reset the SMS Bits */
;;;2231     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
000cae  f0220207          BIC      r2,r2,#7
000cb2  8102              STRH     r2,[r0,#8]
;;;2232     /* Select the Slave Mode */
;;;2233     TIMx->SMCR |= TIM_SlaveMode;
000cb4  8902              LDRH     r2,[r0,#8]
000cb6  4311              ORRS     r1,r1,r2
000cb8  8101              STRH     r1,[r0,#8]
;;;2234   }
000cba  4770              BX       lr
;;;2235   
                          ENDP

                  TIM_SelectMasterSlaveMode PROC
;;;2245     */
;;;2246   void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
000cbc  8902              LDRH     r2,[r0,#8]
;;;2247   {
;;;2248     /* Check the parameters */
;;;2249     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2250     assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
;;;2251     /* Reset the MSM Bit */
;;;2252     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
000cbe  f0220280          BIC      r2,r2,#0x80
000cc2  8102              STRH     r2,[r0,#8]
;;;2253     
;;;2254     /* Set or Reset the MSM Bit */
;;;2255     TIMx->SMCR |= TIM_MasterSlaveMode;
000cc4  8902              LDRH     r2,[r0,#8]
000cc6  4311              ORRS     r1,r1,r2
000cc8  8101              STRH     r1,[r0,#8]
;;;2256   }
000cca  4770              BX       lr
;;;2257   
                          ENDP

                  TIM_SetCounter PROC
;;;2263     */
;;;2264   void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
000ccc  8481              STRH     r1,[r0,#0x24]
;;;2265   {
;;;2266     /* Check the parameters */
;;;2267     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2268     /* Set the Counter Register value */
;;;2269     TIMx->CNT = Counter;
;;;2270   }
000cce  4770              BX       lr
;;;2271   
                          ENDP

                  TIM_SetAutoreload PROC
;;;2277     */
;;;2278   void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
000cd0  8581              STRH     r1,[r0,#0x2c]
;;;2279   {
;;;2280     /* Check the parameters */
;;;2281     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2282     /* Set the Autoreload Register value */
;;;2283     TIMx->ARR = Autoreload;
;;;2284   }
000cd2  4770              BX       lr
;;;2285   
                          ENDP

                  TIM_SetCompare1 PROC
;;;2291     */
;;;2292   void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
000cd4  8681              STRH     r1,[r0,#0x34]
;;;2293   {
;;;2294     /* Check the parameters */
;;;2295     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2296     /* Set the Capture Compare1 Register value */
;;;2297     TIMx->CCR1 = Compare1;
;;;2298   }
000cd6  4770              BX       lr
;;;2299   
                          ENDP

                  TIM_SetCompare2 PROC
;;;2305     */
;;;2306   void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
000cd8  8701              STRH     r1,[r0,#0x38]
;;;2307   {
;;;2308     /* Check the parameters */
;;;2309     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2310     /* Set the Capture Compare2 Register value */
;;;2311     TIMx->CCR2 = Compare2;
;;;2312   }
000cda  4770              BX       lr
;;;2313   
                          ENDP

                  TIM_SetCompare3 PROC
;;;2319     */
;;;2320   void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
000cdc  8781              STRH     r1,[r0,#0x3c]
;;;2321   {
;;;2322     /* Check the parameters */
;;;2323     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2324     /* Set the Capture Compare3 Register value */
;;;2325     TIMx->CCR3 = Compare3;
;;;2326   }
000cde  4770              BX       lr
;;;2327   
                          ENDP

                  TIM_SetCompare4 PROC
;;;2333     */
;;;2334   void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
000ce0  f8a01040          STRH     r1,[r0,#0x40]
;;;2335   {
;;;2336     /* Check the parameters */
;;;2337     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2338     /* Set the Capture Compare4 Register value */
;;;2339     TIMx->CCR4 = Compare4;
;;;2340   }
000ce4  4770              BX       lr
;;;2341   
                          ENDP

                  TIM_SetClockDivision PROC
;;;2440     */
;;;2441   void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
000ce6  8802              LDRH     r2,[r0,#0]
;;;2442   {
;;;2443     /* Check the parameters */
;;;2444     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2445     assert_param(IS_TIM_CKD_DIV(TIM_CKD));
;;;2446     /* Reset the CKD Bits */
;;;2447     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
000ce8  f4227240          BIC      r2,r2,#0x300
000cec  8002              STRH     r2,[r0,#0]
;;;2448     /* Set the CKD value */
;;;2449     TIMx->CR1 |= TIM_CKD;
000cee  8802              LDRH     r2,[r0,#0]
000cf0  4311              ORRS     r1,r1,r2
000cf2  8001              STRH     r1,[r0,#0]
;;;2450   }
000cf4  4770              BX       lr
;;;2451   
                          ENDP

                  TIM_GetCapture1 PROC
;;;2456     */
;;;2457   uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
000cf6  8e80              LDRH     r0,[r0,#0x34]
;;;2458   {
;;;2459     /* Check the parameters */
;;;2460     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2461     /* Get the Capture 1 Register value */
;;;2462     return TIMx->CCR1;
;;;2463   }
000cf8  4770              BX       lr
;;;2464   
                          ENDP

                  TIM_GetCapture2 PROC
;;;2469     */
;;;2470   uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
000cfa  8f00              LDRH     r0,[r0,#0x38]
;;;2471   {
;;;2472     /* Check the parameters */
;;;2473     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2474     /* Get the Capture 2 Register value */
;;;2475     return TIMx->CCR2;
;;;2476   }
000cfc  4770              BX       lr
;;;2477   
                          ENDP

                  TIM_GetCapture3 PROC
;;;2482     */
;;;2483   uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
000cfe  8f80              LDRH     r0,[r0,#0x3c]
;;;2484   {
;;;2485     /* Check the parameters */
;;;2486     assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;2487     /* Get the Capture 3 Register value */
;;;2488     return TIMx->CCR3;
;;;2489   }
000d00  4770              BX       lr
;;;2490   
                          ENDP

                  TIM_GetCapture4 PROC
;;;2495     */
;;;2496   uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
000d02  f8b00040          LDRH     r0,[r0,#0x40]
;;;2497   {
;;;2498     /* Check the parameters */
;;;2499     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2500     /* Get the Capture 4 Register value */
;;;2501     return TIMx->CCR4;
;;;2502   }
000d06  4770              BX       lr
;;;2503   
                          ENDP

                  TIM_GetCounter PROC
;;;2508     */
;;;2509   uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
000d08  8c80              LDRH     r0,[r0,#0x24]
;;;2510   {
;;;2511     /* Check the parameters */
;;;2512     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2513     /* Get the Counter Register value */
;;;2514     return TIMx->CNT;
;;;2515   }
000d0a  4770              BX       lr
;;;2516   
                          ENDP

                  TIM_GetPrescaler PROC
;;;2521     */
;;;2522   uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
000d0c  8d00              LDRH     r0,[r0,#0x28]
;;;2523   {
;;;2524     /* Check the parameters */
;;;2525     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2526     /* Get the Prescaler Register value */
;;;2527     return TIMx->PSC;
;;;2528   }
000d0e  4770              BX       lr
;;;2529   
                          ENDP

                  TIM_GetFlagStatus PROC
;;;2555     */
;;;2556   FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000d10  4602              MOV      r2,r0
;;;2557   { 
;;;2558     ITStatus bitstatus = RESET;  
000d12  2000              MOVS     r0,#0
;;;2559     /* Check the parameters */
;;;2560     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2561     assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
;;;2562     
;;;2563     if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
000d14  8a12              LDRH     r2,[r2,#0x10]
000d16  420a              TST      r2,r1
;;;2564     {
;;;2565       bitstatus = SET;
000d18  bf18              IT       NE
000d1a  2001              MOVNE    r0,#1
;;;2566     }
;;;2567     else
;;;2568     {
;;;2569       bitstatus = RESET;
;;;2570     }
;;;2571     return bitstatus;
;;;2572   }
000d1c  4770              BX       lr
;;;2573   
                          ENDP

                  TIM_ClearFlag PROC
;;;2599     */
;;;2600   void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000d1e  43c9              MVNS     r1,r1
;;;2601   {  
;;;2602     /* Check the parameters */
;;;2603     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2604     assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
;;;2605      
;;;2606     /* Clear the flags */
;;;2607     TIMx->SR = (uint16_t)~TIM_FLAG;
000d20  8201              STRH     r1,[r0,#0x10]
;;;2608   }
000d22  4770              BX       lr
;;;2609   
                          ENDP

                  TIM_GetITStatus PROC
;;;2631     */
;;;2632   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000d24  8a03              LDRH     r3,[r0,#0x10]
;;;2633   {
;;;2634     ITStatus bitstatus = RESET;  
000d26  2200              MOVS     r2,#0
;;;2635     uint16_t itstatus = 0x0, itenable = 0x0;
;;;2636     /* Check the parameters */
;;;2637     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2638     assert_param(IS_TIM_GET_IT(TIM_IT));
;;;2639      
;;;2640     itstatus = TIMx->SR & TIM_IT;
;;;2641     
;;;2642     itenable = TIMx->DIER & TIM_IT;
000d28  8980              LDRH     r0,[r0,#0xc]
000d2a  420b              TST      r3,r1                 ;2640
000d2c  ea000001          AND      r0,r0,r1
;;;2643     if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
000d30  bf1c              ITT      NE
000d32  2800              CMPNE    r0,#0
;;;2644     {
;;;2645       bitstatus = SET;
000d34  2201              MOVNE    r2,#1
;;;2646     }
;;;2647     else
;;;2648     {
;;;2649       bitstatus = RESET;
;;;2650     }
;;;2651     return bitstatus;
000d36  4610              MOV      r0,r2
;;;2652   }
000d38  4770              BX       lr
;;;2653   
                          ENDP

                  TIM_ClearITPendingBit PROC
;;;2675     */
;;;2676   void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000d3a  43c9              MVNS     r1,r1
;;;2677   {
;;;2678     /* Check the parameters */
;;;2679     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2680     assert_param(IS_TIM_IT(TIM_IT));
;;;2681     /* Clear the IT pending Bit */
;;;2682     TIMx->SR = (uint16_t)~TIM_IT;
000d3c  8201              STRH     r1,[r0,#0x10]
;;;2683   }
000d3e  4770              BX       lr
;;;2684   
                          ENDP

                  TI2_Config PROC
;;;2747     */
;;;2748   static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000d40  b470              PUSH     {r4-r6}
;;;2749                          uint16_t TIM_ICFilter)
;;;2750   {
;;;2751     uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
;;;2752     /* Disable the Channel 2: Reset the CC2E Bit */
;;;2753     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
000d42  f8b0c020          LDRH     r12,[r0,#0x20]
000d46  f02c0c10          BIC      r12,r12,#0x10
000d4a  f8a0c020          STRH     r12,[r0,#0x20]
;;;2754     tmpccmr1 = TIMx->CCMR1;
000d4e  8b06              LDRH     r6,[r0,#0x18]
;;;2755     tmpccer = TIMx->CCER;
000d50  f8b0c020          LDRH     r12,[r0,#0x20]
;;;2756     tmp = (uint16_t)(TIM_ICPolarity << 4);
000d54  f64f74ff          MOV      r4,#0xffff
;;;2757     /* Select the Input and set the filter */
;;;2758     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
000d58  f4264673          BIC      r6,r6,#0xf300
;;;2759     tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
000d5c  ea043303          AND      r3,r4,r3,LSL #12
000d60  4333              ORRS     r3,r3,r6
;;;2760     tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
000d62  ea042202          AND      r2,r4,r2,LSL #8
000d66  431a              ORRS     r2,r2,r3
;;;2761     
;;;2762     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
000d68  f1a04380          SUB      r3,r0,#0x40000000
000d6c  ea041501          AND      r5,r4,r1,LSL #4       ;2756
000d70  f5b33396          SUBS     r3,r3,#0x12c00
000d74  bf1c              ITT      NE
000d76  f1a04380          SUBNE    r3,r0,#0x40000000
000d7a  f5b3339a          SUBSNE   r3,r3,#0x13400
000d7e  d014              BEQ      |L1.3498|
000d80  f1b04f80          CMP      r0,#0x40000000
000d84  bf1c              ITT      NE
000d86  f1a04380          SUBNE    r3,r0,#0x40000000
000d8a  f5b36380          SUBSNE   r3,r3,#0x400
000d8e  d00c              BEQ      |L1.3498|
000d90  f1a04380          SUB      r3,r0,#0x40000000
000d94  f5b36300          SUBS     r3,r3,#0x800
000d98  bf1f              ITTTT    NE
000d9a  f1a04380          SUBNE    r3,r0,#0x40000000
000d9e  f5b36340          SUBSNE   r3,r3,#0xc00
;;;2763        (TIMx == TIM4) ||(TIMx == TIM5))
;;;2764     {
;;;2765       /* Select the Polarity and set the CC2E Bit */
;;;2766       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
;;;2767       tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
;;;2768     }
;;;2769     else
;;;2770     {
;;;2771       /* Select the Polarity and set the CC2E Bit */
;;;2772       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
000da2  f02c03a0          BICNE    r3,r12,#0xa0
;;;2773       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
000da6  4319              ORRNE    r1,r1,r3
000da8  d102              BNE      |L1.3504|
                  |L1.3498|
000daa  f02c0120          BIC      r1,r12,#0x20          ;2766
000dae  4329              ORRS     r1,r1,r5              ;2767
                  |L1.3504|
000db0  f0410110          ORR      r1,r1,#0x10
;;;2774     }
;;;2775     
;;;2776     /* Write to TIMx CCMR1 and CCER registers */
;;;2777     TIMx->CCMR1 = tmpccmr1 ;
000db4  8302              STRH     r2,[r0,#0x18]
;;;2778     TIMx->CCER = tmpccer;
000db6  8401              STRH     r1,[r0,#0x20]
;;;2779   }
000db8  bc70              POP      {r4-r6}
000dba  4770              BX       lr
;;;2780   
                          ENDP

                  |L1.3516|
                          DCD      0x40013400
                  |L1.3520|
                          DCD      0x40000400
                  |L1.3524|
                          DCD      0x40012c00
