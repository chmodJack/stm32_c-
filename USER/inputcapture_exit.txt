; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o..\obj\inputcapture_exit.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\inputcapture_exit.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\inputcapture_exit.crf ..\C++LIB\OnChip\InputCapture\InputCapture_EXIT.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN17InputCapture_EXITC2EP12GPIO_TypeDefhhhh                  ; Alternate entry point ; InputCapture_EXIT::InputCapture_EXIT__sub_object(GPIO_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char)
                  _ZN17InputCapture_EXITC1EP12GPIO_TypeDefhhhh PROC ; InputCapture_EXIT::InputCapture_EXIT(GPIO_TypeDef*, unsigned char, unsigned char, unsigned char, unsigned char)
;;;4      
;;;5      InputCapture_EXIT::InputCapture_EXIT(GPIO_TypeDef *exitPort, u8 exitPin, u8 itGroup,u8 prePriority,u8 subPriority)
;;;6      {
;;;7      	mExitPort = exitPort;
;;;8      	mExitPin = u16(1<<exitPin);
;;;9      	
;;;10     	//Stpe 1: GPIO Initialize: RCC & GPIO Pin
;;;11     	u8 portSource;
;;;12     	if(mExitPort==GPIOA)	     { RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE); portSource = 0;}
;;;13     	else if(mExitPort==GPIOB)  { RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE); portSource = 1;}
;;;14     	else if(mExitPort==GPIOC)	 { RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE); portSource = 2;}
;;;15     	else if(mExitPort==GPIOD)	 { RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD,ENABLE); portSource = 3;}
;;;16     	else if(mExitPort==GPIOE)	 { RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE); portSource = 4;}
;;;17     	else if(mExitPort==GPIOF)	 { RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF,ENABLE); portSource = 5;}
;;;18     	
;;;19     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
;;;20     	
;;;21     	GPIO_InitTypeDef GPIO_InitStructure;
;;;22     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;23     	GPIO_InitStructure.GPIO_Pin = mExitPin;
;;;24     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
;;;25     	GPIO_Init(mExitPort,&GPIO_InitStructure);
;;;26     	GPIO_ResetBits(mExitPort,mExitPin);
;;;27     	GPIO_EXTILineConfig(portSource,exitPin);
;;;28     	
;;;29       //Step 2: NVIC Initialize
;;;30     	u32 priorityGroup[5] = {NVIC_PriorityGroup_0,NVIC_PriorityGroup_1,NVIC_PriorityGroup_2,NVIC_PriorityGroup_3,NVIC_PriorityGroup_4};
;;;31     	u8 EXTIx_IRQn;			//?????	
;;;32     	switch (exitPin)
;;;33     	{
;;;34     		case 0:
;;;35     			EXTIx_IRQn = EXTI0_IRQn; 
;;;36     			#ifdef USE_CAPTURE_EXIT0
;;;37     				pICPExt0 = this;
;;;38     			#endif
;;;39     		break;
;;;40     		case 1:
;;;41     			EXTIx_IRQn = EXTI1_IRQn; 
;;;42     			#ifdef USE_CAPTURE_EXIT1
;;;43     				pICPExt1 = this;
;;;44     			#endif
;;;45     		break;
;;;46     		case 2:
;;;47     			EXTIx_IRQn = EXTI2_IRQn; 
;;;48     			#ifdef USE_CAPTURE_EXIT2
;;;49     				pICPExt2 = this;
;;;50     			#endif
;;;51     		break;
;;;52     		case 3:
;;;53     			EXTIx_IRQn = EXTI3_IRQn; 
;;;54     			#ifdef USE_CAPTURE_EXIT3
;;;55     				pICPExt3 = this;
;;;56     			#endif
;;;57     		break;
;;;58     		case 4:
;;;59     			EXTIx_IRQn = EXTI4_IRQn; 
;;;60     			#ifdef USE_CAPTURE_EXIT4
;;;61     				pICPExt4 = this;
;;;62     			#endif
;;;63     		break;
;;;64     		case 5:
;;;65     			#ifdef USE_CAPTURE_EXIT5
;;;66     				pICPExt5 = this;
;;;67     			#endif
;;;68     			EXTIx_IRQn = EXTI9_5_IRQn; 
;;;69     		break;
;;;70     		case 6:
;;;71     			#ifdef USE_CAPTURE_EXIT6
;;;72     				pICPExt6 = this;
;;;73     			  USART_SendData(USART1,'W');
;;;74     			#endif
;;;75     			EXTIx_IRQn = EXTI9_5_IRQn; 
;;;76     		break;
;;;77     		case 7:
;;;78     			#ifdef USE_CAPTURE_EXIT7
;;;79     				pICPExt7 = this;
;;;80     			#endif
;;;81     			EXTIx_IRQn = EXTI9_5_IRQn; 
;;;82     		break;
;;;83     		case 8:
;;;84     			#ifdef USE_CAPTURE_EXIT8
;;;85     				pICPExt8 = this;
;;;86     			#endif
;;;87     			EXTIx_IRQn = EXTI9_5_IRQn; 
;;;88     		case 9:
;;;89     			EXTIx_IRQn = EXTI9_5_IRQn; 
;;;90     			#ifdef USE_CAPTURE_EXIT9
;;;91     				pICPExt9 = this;
;;;92     			#endif
;;;93     		break;
;;;94     		case 10:
;;;95     			#ifdef USE_CAPTURE_EXIT10
;;;96     				pICPExt10 = this;
;;;97     			#endif
;;;98     			EXTIx_IRQn = EXTI15_10_IRQn; 
;;;99     		break;		
;;;100    		case 11:
;;;101    			#ifdef USE_CAPTURE_EXIT11
;;;102    				pICPExt11 = this;
;;;103    			#endif
;;;104    			EXTIx_IRQn = EXTI15_10_IRQn; 
;;;105    		break;		
;;;106    		case 12:
;;;107    			#ifdef USE_CAPTURE_EXIT12
;;;108    				pICPExt12 = this;
;;;109    			#endif
;;;110    			EXTIx_IRQn = EXTI15_10_IRQn; 
;;;111    		break;		
;;;112    		case 13:
;;;113    			#ifdef USE_CAPTURE_EXIT13
;;;114    				pICPExt13 = this;
;;;115    			#endif
;;;116    			EXTIx_IRQn = EXTI15_10_IRQn; 
;;;117    		break;		
;;;118    		case 14:
;;;119    			#ifdef USE_CAPTURE_EXIT14
;;;120    				pICPExt14 = this;
;;;121    			#endif	
;;;122    			EXTIx_IRQn = EXTI15_10_IRQn; 
;;;123    		break;
;;;124    		case 15:
;;;125    			EXTIx_IRQn = EXTI15_10_IRQn; 
;;;126    			#ifdef USE_CAPTURE_EXIT15
;;;127    				pICPExt15 = this;
;;;128    			#endif
;;;129    		break;
;;;130    	}	
;;;131    	NVIC_InitTypeDef NVIC_InitStructure;
;;;132    	NVIC_PriorityGroupConfig(priorityGroup[itGroup]);		               //one project should has only one priority group
;;;133    	NVIC_InitStructure.NVIC_IRQChannel = EXTIx_IRQn;	                 //IRQn
;;;134    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = prePriority;//preemption priority 
;;;135    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = subPriority;       //sub priority
;;;136    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
;;;137    	NVIC_Init(&NVIC_InitStructure);
;;;138    	
;;;139    	//Stpe 3: EXTI Initialize
;;;140    	EXTI_InitTypeDef EXTI_InitStructure;
;;;141    	EXTI_ClearITPendingBit(u32(mExitPin));							        //clear exti interrupt flag bit
;;;142    	EXTI_InitStructure.EXTI_Line = u32(mExitPin);					 	      //select exti line
;;;143    	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;           //interrupt
;;;144    	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;//trigger: both rising and falling edge
;;;145    	EXTI_InitStructure.EXTI_LineCmd = ENABLE;	
;;;146    	EXTI_Init(&EXTI_InitStructure);
;;;147    		
;;;148    	//?????
;;;149    	mInterval = 0;
;;;150    }
;;;151    
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4605              MOV      r5,r0
000008  e9dda912          LDRD     r10,r9,[sp,#0x48]
00000c  6001              STR      r1,[r0,#0]
00000e  4617              MOV      r7,r2
000010  2001              MOVS     r0,#1
000012  40b8              LSLS     r0,r0,r7
000014  80a8              STRH     r0,[r5,#4]
000016  f1a14080          SUB      r0,r1,#0x40000000
00001a  4698              MOV      r8,r3
00001c  f5b03084          SUBS     r0,r0,#0x10800
000020  d00f              BEQ      |L1.66|
000022  f5b06080          SUBS     r0,r0,#0x400
000026  d012              BEQ      |L1.78|
000028  f5b06080          SUBS     r0,r0,#0x400
00002c  d015              BEQ      |L1.90|
00002e  f5b06080          SUBS     r0,r0,#0x400
000032  d018              BEQ      |L1.102|
000034  f5b06080          SUBS     r0,r0,#0x400
000038  d01b              BEQ      |L1.114|
00003a  f5b06080          SUBS     r0,r0,#0x400
00003e  d01e              BEQ      |L1.126|
000040  e022              B        |L1.136|
                  |L1.66|
000042  2101              MOVS     r1,#1
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       RCC_APB2PeriphClockCmd
00004a  2600              MOVS     r6,#0
00004c  e01c              B        |L1.136|
                  |L1.78|
00004e  2101              MOVS     r1,#1
000050  2008              MOVS     r0,#8
000052  f7fffffe          BL       RCC_APB2PeriphClockCmd
000056  2601              MOVS     r6,#1
000058  e016              B        |L1.136|
                  |L1.90|
00005a  2101              MOVS     r1,#1
00005c  2010              MOVS     r0,#0x10
00005e  f7fffffe          BL       RCC_APB2PeriphClockCmd
000062  2602              MOVS     r6,#2
000064  e010              B        |L1.136|
                  |L1.102|
000066  2101              MOVS     r1,#1
000068  2020              MOVS     r0,#0x20
00006a  f7fffffe          BL       RCC_APB2PeriphClockCmd
00006e  2603              MOVS     r6,#3
000070  e00a              B        |L1.136|
                  |L1.114|
000072  2101              MOVS     r1,#1
000074  2040              MOVS     r0,#0x40
000076  f7fffffe          BL       RCC_APB2PeriphClockCmd
00007a  2604              MOVS     r6,#4
00007c  e004              B        |L1.136|
                  |L1.126|
00007e  2101              MOVS     r1,#1
000080  2080              MOVS     r0,#0x80
000082  f7fffffe          BL       RCC_APB2PeriphClockCmd
000086  2605              MOVS     r6,#5
                  |L1.136|
000088  2101              MOVS     r1,#1
00008a  4608              MOV      r0,r1
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
000090  2003              MOVS     r0,#3
000092  f88d0022          STRB     r0,[sp,#0x22]
000096  88a8              LDRH     r0,[r5,#4]
000098  f8ad0020          STRH     r0,[sp,#0x20]
00009c  2028              MOVS     r0,#0x28
00009e  f88d0023          STRB     r0,[sp,#0x23]
0000a2  a908              ADD      r1,sp,#0x20
0000a4  6828              LDR      r0,[r5,#0]
0000a6  f7fffffe          BL       GPIO_Init
0000aa  88a9              LDRH     r1,[r5,#4]
0000ac  6828              LDR      r0,[r5,#0]
0000ae  f7fffffe          BL       GPIO_ResetBits
0000b2  4639              MOV      r1,r7
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       GPIO_EXTILineConfig
0000ba  4833              LDR      r0,|L1.392|
0000bc  2f10              CMP      r7,#0x10
0000be  e890100e          LDM      r0,{r1-r3,r12}
0000c2  e88d100e          STM      sp,{r1-r3,r12}
0000c6  6900              LDR      r0,[r0,#0x10]  ; <Data1>
0000c8  9004              STR      r0,[sp,#0x10]
0000ca  d216              BCS      |L1.250|
0000cc  e8dff007          TBB      [pc,r7]
0000d0  080a0c0e          DCB      0x08,0x0a,0x0c,0x0e
0000d4  10121212          DCB      0x10,0x12,0x12,0x12
0000d8  12121414          DCB      0x12,0x12,0x14,0x14
0000dc  14141414          DCB      0x14,0x14,0x14,0x14
0000e0  2406              MOVS     r4,#6
0000e2  e00a              B        |L1.250|
0000e4  2407              MOVS     r4,#7
0000e6  e008              B        |L1.250|
0000e8  2408              MOVS     r4,#8
0000ea  e006              B        |L1.250|
0000ec  2409              MOVS     r4,#9
0000ee  e004              B        |L1.250|
0000f0  240a              MOVS     r4,#0xa
0000f2  e002              B        |L1.250|
0000f4  2417              MOVS     r4,#0x17
0000f6  e000              B        |L1.250|
0000f8  2428              MOVS     r4,#0x28
                  |L1.250|
0000fa  f85d0028          LDR      r0,[sp,r8,LSL #2]
0000fe  f7fffffe          BL       NVIC_PriorityGroupConfig
000102  f88d4014          STRB     r4,[sp,#0x14]
000106  f88da015          STRB     r10,[sp,#0x15]
00010a  f88d9016          STRB     r9,[sp,#0x16]
00010e  2401              MOVS     r4,#1
000110  f88d4017          STRB     r4,[sp,#0x17]
000114  a805              ADD      r0,sp,#0x14
000116  f7fffffe          BL       NVIC_Init
00011a  88a8              LDRH     r0,[r5,#4]
00011c  f7fffffe          BL       EXTI_ClearITPendingBit
000120  88a8              LDRH     r0,[r5,#4]
000122  9006              STR      r0,[sp,#0x18]
000124  2000              MOVS     r0,#0
000126  f88d001c          STRB     r0,[sp,#0x1c]
00012a  2010              MOVS     r0,#0x10
00012c  f88d001d          STRB     r0,[sp,#0x1d]
000130  f88d401e          STRB     r4,[sp,#0x1e]
000134  a806              ADD      r0,sp,#0x18
000136  f7fffffe          BL       EXTI_Init
00013a  2000              MOVS     r0,#0
00013c  e9c50006          STRD     r0,r0,[r5,#0x18]
000140  b00a              ADD      sp,sp,#0x28
000142  4628              MOV      r0,r5
000144  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

                  _ZN17InputCapture_EXIT3IRQEv PROC ; InputCapture_EXIT::IRQ()
;;;152    void InputCapture_EXIT::IRQ()
000148  b510              PUSH     {r4,lr}
;;;153    {
00014a  4604              MOV      r4,r0
;;;154    	if(GPIO_ReadInputDataBit(mExitPort,mExitPin))	//rising edge interrupt
00014c  8881              LDRH     r1,[r0,#4]
00014e  6800              LDR      r0,[r0,#0]
000150  f7fffffe          BL       GPIO_ReadInputDataBit
000154  b120              CBZ      r0,|L1.352|
;;;155    		mRiseTime = tskmgr.Time();                   //rising edge time
000156  f7fffffe          BL       _ZN11TaskManager4TimeEv ; TaskManager::Time()
00015a  e9c40102          STRD     r0,r1,[r4,#8]
;;;156    	else											                    //falling edge interrupt
;;;157    	{
;;;158    		mFallTime = tskmgr.Time();
;;;159    		mInterval = (mFallTime - mRiseTime)*1000;//falling edge time
;;;160    	}
;;;161    }
00015e  bd10              POP      {r4,pc}
                  |L1.352|
000160  f7fffffe          BL       _ZN11TaskManager4TimeEv ; TaskManager::Time()
000164  e9c40104          STRD     r0,r1,[r4,#0x10]      ;158
000168  e9d42302          LDRD     r2,r3,[r4,#8]         ;158
00016c  f7fffffe          BL       __aeabi_dsub
000170  2200              MOVS     r2,#0                 ;159
000172  4b06              LDR      r3,|L1.396|
000174  f7fffffe          BL       __aeabi_dmul
000178  e9c40106          STRD     r0,r1,[r4,#0x18]      ;159
00017c  bd10              POP      {r4,pc}
;;;162    
                          ENDP

                  _ZN17InputCapture_EXIT5ValueEv PROC ; InputCapture_EXIT::Value()
;;;163    double InputCapture_EXIT::Value()
00017e  e9d02106          LDRD     r2,r1,[r0,#0x18]
;;;164    {
;;;165    	return mInterval;
000182  4610              MOV      r0,r2
;;;166    }
000184  4770              BX       lr
;;;167    
                          ENDP

000186  0000              DCW      0x0000
                  |L1.392|
                          DCD      ||.constdata||
                  |L1.396|
                          DCD      0x408f4000

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000700
                          DCD      0x00000600
                          DCD      0x00000500
                          DCD      0x00000400
                          DCD      0x00000300
