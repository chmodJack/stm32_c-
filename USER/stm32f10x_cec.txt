; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_cec.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_cec.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_cec.crf ..\STM32F10x_FWLIB\src\stm32f10x_cec.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CEC_DeInit PROC
;;;117      */
;;;118    void CEC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120      /* Enable CEC reset state */
;;;121      RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;122      /* Release CEC from reset state */
;;;123      RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
00000a  e8bd4010          POP      {r4,lr}
00000e  2100              MOVS     r1,#0
000010  f04f4080          MOV      r0,#0x40000000
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;124    }
;;;125    
                          ENDP

                  CEC_Init PROC
;;;134      */
;;;135    void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
000018  4a31              LDR      r2,|L1.224|
;;;136    {
;;;137      uint16_t tmpreg = 0;
;;;138     
;;;139      /* Check the parameters */
;;;140      assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
;;;141      assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
;;;142         
;;;143      /*---------------------------- CEC CFGR Configuration -----------------*/
;;;144      /* Get the CEC CFGR value */
;;;145      tmpreg = CEC->CFGR;
00001a  6811              LDR      r1,[r2,#0]
;;;146      
;;;147      /* Clear BTEM and BPEM bits */
;;;148      tmpreg &= CFGR_CLEAR_Mask;
;;;149      
;;;150      /* Configure CEC: Bit Timing Error and Bit Period Error */
;;;151      tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);
00001c  8803              LDRH     r3,[r0,#0]
00001e  8840              LDRH     r0,[r0,#2]
000020  f00101f3          AND      r1,r1,#0xf3           ;148
000024  4318              ORRS     r0,r0,r3
000026  4308              ORRS     r0,r0,r1
;;;152    
;;;153      /* Write to CEC CFGR  register*/
;;;154      CEC->CFGR = tmpreg;
000028  6010              STR      r0,[r2,#0]
;;;155      
;;;156    }
00002a  4770              BX       lr
;;;157    
                          ENDP

                  CEC_Cmd PROC
;;;163      */
;;;164    void CEC_Cmd(FunctionalState NewState)
00002c  492d              LDR      r1,|L1.228|
;;;165    {
;;;166      /* Check the parameters */
;;;167      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;168    
;;;169      *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
00002e  6008              STR      r0,[r1,#0]
;;;170    
;;;171      if(NewState == DISABLE)
000030  2800              CMP      r0,#0
;;;172      {
;;;173        /* Wait until the PE bit is cleared by hardware (Idle Line detected) */
;;;174        while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
000032  bf0c              ITE      EQ
000034  482a              LDREQ    r0,|L1.224|
;;;175        {
;;;176        }  
;;;177      }  
;;;178    }
000036  4770              BXNE     lr
                  |L1.56|
000038  6801              LDR      r1,[r0,#0]            ;174
00003a  f0110f01          TST      r1,#1                 ;174
00003e  d1fb              BNE      |L1.56|
000040  4770              BX       lr
;;;179    
                          ENDP

                  CEC_ITConfig PROC
;;;185      */
;;;186    void CEC_ITConfig(FunctionalState NewState)
000042  4928              LDR      r1,|L1.228|
;;;187    {
;;;188      /* Check the parameters */
;;;189      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;190    
;;;191      *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
000044  6048              STR      r0,[r1,#4]
;;;192    }
000046  4770              BX       lr
;;;193    
                          ENDP

                  CEC_OwnAddressConfig PROC
;;;198      */
;;;199    void CEC_OwnAddressConfig(uint8_t CEC_OwnAddress)
000048  4927              LDR      r1,|L1.232|
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));
;;;203    
;;;204      /* Set the CEC own address */
;;;205      CEC->OAR = CEC_OwnAddress;
00004a  6008              STR      r0,[r1,#0]
;;;206    }
00004c  4770              BX       lr
;;;207    
                          ENDP

                  CEC_SetPrescaler PROC
;;;212      */
;;;213    void CEC_SetPrescaler(uint16_t CEC_Prescaler)
00004e  4927              LDR      r1,|L1.236|
;;;214    {
;;;215      /* Check the parameters */
;;;216      assert_param(IS_CEC_PRESCALER(CEC_Prescaler));
;;;217    
;;;218      /* Set the  Prescaler value*/
;;;219      CEC->PRES = CEC_Prescaler;
000050  6008              STR      r0,[r1,#0]
;;;220    }
000052  4770              BX       lr
;;;221    
                          ENDP

                  CEC_SendDataByte PROC
;;;226      */
;;;227    void CEC_SendDataByte(uint8_t Data)
000054  4926              LDR      r1,|L1.240|
;;;228    {  
;;;229      /* Transmit Data */
;;;230      CEC->TXD = Data ;
000056  6008              STR      r0,[r1,#0]
;;;231    }
000058  4770              BX       lr
;;;232    
                          ENDP

                  CEC_ReceiveDataByte PROC
;;;238      */
;;;239    uint8_t CEC_ReceiveDataByte(void)
00005a  4826              LDR      r0,|L1.244|
;;;240    {
;;;241      /* Receive Data */
;;;242      return (uint8_t)(CEC->RXD);
00005c  6800              LDR      r0,[r0,#0]
00005e  b2c0              UXTB     r0,r0
;;;243    }
000060  4770              BX       lr
;;;244    
                          ENDP

                  CEC_StartOfMessage PROC
;;;249      */
;;;250    void CEC_StartOfMessage(void)
000062  4920              LDR      r1,|L1.228|
;;;251    {  
;;;252      /* Starts of new message */
;;;253      *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
000064  2001              MOVS     r0,#1
000066  f8c10200          STR      r0,[r1,#0x200]
;;;254    }
00006a  4770              BX       lr
;;;255    
                          ENDP

                  CEC_EndOfMessageCmd PROC
;;;261      */
;;;262    void CEC_EndOfMessageCmd(FunctionalState NewState)
00006c  491d              LDR      r1,|L1.228|
;;;263    {   
;;;264      /* Check the parameters */
;;;265      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;266      
;;;267      /* The data byte will be transmitted with or without an EOM bit*/
;;;268      *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
00006e  f8c10204          STR      r0,[r1,#0x204]
;;;269    }
000072  4770              BX       lr
;;;270    
                          ENDP

                  CEC_GetFlagStatus PROC
;;;290      */
;;;291    FlagStatus CEC_GetFlagStatus(uint32_t CEC_FLAG) 
000074  4601              MOV      r1,r0
;;;292    {
;;;293      FlagStatus bitstatus = RESET;
000076  2000              MOVS     r0,#0
;;;294      uint32_t cecreg = 0, cecbase = 0;
;;;295      
;;;296      /* Check the parameters */
;;;297      assert_param(IS_CEC_GET_FLAG(CEC_FLAG));
;;;298     
;;;299      /* Get the CEC peripheral base address */
;;;300      cecbase = (uint32_t)(CEC_BASE);
;;;301      
;;;302      /* Read flag register index */
;;;303      cecreg = CEC_FLAG >> 28;
000078  0f0a              LSRS     r2,r1,#28
;;;304      
;;;305      /* Get bit[23:0] of the flag */
;;;306      CEC_FLAG &= FLAG_Mask;
00007a  f021417f          BIC      r1,r1,#0xff000000
;;;307      
;;;308      if(cecreg != 0)
;;;309      {
;;;310        /* Flag in CEC ESR Register */
;;;311        CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
00007e  bf1a              ITTE     NE
000080  0c09              LSRNE    r1,r1,#16
;;;312        
;;;313        /* Get the CEC ESR register address */
;;;314        cecbase += 0xC;
000082  4a1d              LDRNE    r2,|L1.248|
;;;315      }
;;;316      else
;;;317      {
;;;318        /* Get the CEC CSR register address */
;;;319        cecbase += 0x10;
000084  4a1d              LDREQ    r2,|L1.252|
;;;320      }
;;;321      
;;;322      if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
000086  6812              LDR      r2,[r2,#0]
000088  420a              TST      r2,r1
;;;323      {
;;;324        /* CEC_FLAG is set */
;;;325        bitstatus = SET;
00008a  bf18              IT       NE
00008c  2001              MOVNE    r0,#1
;;;326      }
;;;327      else
;;;328      {
;;;329        /* CEC_FLAG is reset */
;;;330        bitstatus = RESET;
;;;331      }
;;;332      
;;;333      /* Return the CEC_FLAG status */
;;;334      return  bitstatus;
;;;335    }
00008e  4770              BX       lr
;;;336    
                          ENDP

                  CEC_ClearFlag PROC
;;;348      */
;;;349    void CEC_ClearFlag(uint32_t CEC_FLAG)
000090  491a              LDR      r1,|L1.252|
;;;350    { 
;;;351      uint32_t tmp = 0x0;
;;;352      
;;;353      /* Check the parameters */
;;;354      assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));
;;;355    
;;;356      tmp = CEC->CSR & 0x2;
000092  680a              LDR      r2,[r1,#0]
;;;357           
;;;358      /* Clear the selected CEC flags */
;;;359      CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
000094  680b              LDR      r3,[r1,#0]
000096  f0020202          AND      r2,r2,#2              ;356
00009a  f06f0c03          MVN      r12,#3
00009e  ea2c0000          BIC      r0,r12,r0
0000a2  4310              ORRS     r0,r0,r2
0000a4  4018              ANDS     r0,r0,r3
0000a6  6008              STR      r0,[r1,#0]
;;;360    }
0000a8  4770              BX       lr
;;;361    
                          ENDP

                  CEC_GetITStatus PROC
;;;371      */
;;;372    ITStatus CEC_GetITStatus(uint8_t CEC_IT)
0000aa  4a0d              LDR      r2,|L1.224|
;;;373    {
0000ac  4601              MOV      r1,r0
;;;374      ITStatus bitstatus = RESET;
0000ae  2000              MOVS     r0,#0
;;;375      uint32_t enablestatus = 0;
;;;376      
;;;377      /* Check the parameters */
;;;378       assert_param(IS_CEC_GET_IT(CEC_IT));
;;;379       
;;;380      /* Get the CEC IT enable bit status */
;;;381      enablestatus = (CEC->CFGR & (uint8_t)CEC_CFGR_IE) ;
0000b0  6812              LDR      r2,[r2,#0]
;;;382      
;;;383      /* Check the status of the specified CEC interrupt */
;;;384      if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
0000b2  4b12              LDR      r3,|L1.252|
0000b4  f0020202          AND      r2,r2,#2              ;381
0000b8  681b              LDR      r3,[r3,#0]
0000ba  420b              TST      r3,r1
0000bc  bf1c              ITT      NE
0000be  2a00              CMPNE    r2,#0
;;;385      {
;;;386        /* CEC_IT is set */
;;;387        bitstatus = SET;
0000c0  2001              MOVNE    r0,#1
;;;388      }
;;;389      else
;;;390      {
;;;391        /* CEC_IT is reset */
;;;392        bitstatus = RESET;
;;;393      }
;;;394      /* Return the CEC_IT status */
;;;395      return  bitstatus;
;;;396    }
0000c2  4770              BX       lr
;;;397    
                          ENDP

                  CEC_ClearITPendingBit PROC
;;;407      */
;;;408    void CEC_ClearITPendingBit(uint16_t CEC_IT)
0000c4  490d              LDR      r1,|L1.252|
;;;409    {
;;;410      uint32_t tmp = 0x0;
;;;411      
;;;412      /* Check the parameters */
;;;413      assert_param(IS_CEC_GET_IT(CEC_IT));
;;;414      
;;;415      tmp = CEC->CSR & 0x2;
0000c6  680a              LDR      r2,[r1,#0]
;;;416      
;;;417      /* Clear the selected CEC interrupt pending bits */
;;;418      CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
0000c8  680b              LDR      r3,[r1,#0]
0000ca  f0020202          AND      r2,r2,#2              ;415
0000ce  f06f0c03          MVN      r12,#3
0000d2  ea2c0000          BIC      r0,r12,r0
0000d6  4310              ORRS     r0,r0,r2
0000d8  4018              ANDS     r0,r0,r3
0000da  6008              STR      r0,[r1,#0]
;;;419    }
0000dc  4770              BX       lr
;;;420    
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      0x40007800
                  |L1.228|
                          DCD      0x420f0000
                  |L1.232|
                          DCD      0x40007804
                  |L1.236|
                          DCD      0x40007808
                  |L1.240|
                          DCD      0x40007814
                  |L1.244|
                          DCD      0x40007818
                  |L1.248|
                          DCD      0x4000780c
                  |L1.252|
                          DCD      0x40007810
