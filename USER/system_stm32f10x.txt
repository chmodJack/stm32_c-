; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\system_stm32f10x.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\system_stm32f10x.crf system_stm32f10x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;211      */
;;;212    void SystemInit (void)
000000  484d              LDR      r0,|L1.312|
;;;213    {
000002  b082              SUB      sp,sp,#8
;;;214      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;215      /* Set HSION bit */
;;;216      RCC->CR |= (uint32_t)0x00000001;
000004  6801              LDR      r1,[r0,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;217    
;;;218      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;219    #ifndef STM32F10X_CL
;;;220      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  6841              LDR      r1,[r0,#4]
00000e  4a4b              LDR      r2,|L1.316|
000010  4011              ANDS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;221    #else
;;;222      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;223    #endif /* STM32F10X_CL */   
;;;224      
;;;225      /* Reset HSEON, CSSON and PLLON bits */
;;;226      RCC->CR &= (uint32_t)0xFEF6FFFF;
000014  6801              LDR      r1,[r0,#0]
000016  f4212110          BIC      r1,r1,#0x90000
00001a  f0217180          BIC      r1,r1,#0x1000000
00001e  6001              STR      r1,[r0,#0]
;;;227    
;;;228      /* Reset HSEBYP bit */
;;;229      RCC->CR &= (uint32_t)0xFFFBFFFF;
000020  6801              LDR      r1,[r0,#0]
000022  f4212180          BIC      r1,r1,#0x40000
000026  6001              STR      r1,[r0,#0]
;;;230    
;;;231      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;232      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000028  6841              LDR      r1,[r0,#4]
00002a  f42101fe          BIC      r1,r1,#0x7f0000
00002e  6041              STR      r1,[r0,#4]
;;;233    
;;;234    #ifdef STM32F10X_CL
;;;235      /* Reset PLL2ON and PLL3ON bits */
;;;236      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;237    
;;;238      /* Disable all interrupts and clear pending bits  */
;;;239      RCC->CIR = 0x00FF0000;
;;;240    
;;;241      /* Reset CFGR2 register */
;;;242      RCC->CFGR2 = 0x00000000;
;;;243    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;244      /* Disable all interrupts and clear pending bits  */
;;;245      RCC->CIR = 0x009F0000;
;;;246    
;;;247      /* Reset CFGR2 register */
;;;248      RCC->CFGR2 = 0x00000000;      
;;;249    #else
;;;250      /* Disable all interrupts and clear pending bits  */
;;;251      RCC->CIR = 0x009F0000;
000030  f44f011f          MOV      r1,#0x9f0000
000034  6081              STR      r1,[r0,#8]
000036  2200              MOVS     r2,#0
000038  9201              STR      r2,[sp,#4]
00003a  9200              STR      r2,[sp,#0]
00003c  6801              LDR      r1,[r0,#0]
00003e  f4413180          ORR      r1,r1,#0x10000
000042  6001              STR      r1,[r0,#0]
                  |L1.68|
000044  6801              LDR      r1,[r0,#0]
000046  f4013100          AND      r1,r1,#0x20000
00004a  9100              STR      r1,[sp,#0]
00004c  9901              LDR      r1,[sp,#4]
00004e  1c49              ADDS     r1,r1,#1
000050  9101              STR      r1,[sp,#4]
000052  9900              LDR      r1,[sp,#0]
000054  b919              CBNZ     r1,|L1.94|
000056  9901              LDR      r1,[sp,#4]
000058  f5b16fa0          CMP      r1,#0x500
00005c  d1f2              BNE      |L1.68|
                  |L1.94|
00005e  6801              LDR      r1,[r0,#0]
000060  f4113f00          TST      r1,#0x20000
000064  bf08              IT       EQ
000066  9200              STREQ    r2,[sp,#0]
000068  d033              BEQ      |L1.210|
00006a  2101              MOVS     r1,#1
00006c  9100              STR      r1,[sp,#0]
00006e  4934              LDR      r1,|L1.320|
000070  680a              LDR      r2,[r1,#0]
000072  f0420210          ORR      r2,r2,#0x10
000076  600a              STR      r2,[r1,#0]
000078  680a              LDR      r2,[r1,#0]
00007a  f0220203          BIC      r2,r2,#3
00007e  600a              STR      r2,[r1,#0]
000080  680a              LDR      r2,[r1,#0]
000082  f0420202          ORR      r2,r2,#2
000086  600a              STR      r2,[r1,#0]
000088  6841              LDR      r1,[r0,#4]
00008a  6041              STR      r1,[r0,#4]
00008c  6841              LDR      r1,[r0,#4]
00008e  6041              STR      r1,[r0,#4]
000090  6841              LDR      r1,[r0,#4]
000092  f4416180          ORR      r1,r1,#0x400
000096  6041              STR      r1,[r0,#4]
000098  6841              LDR      r1,[r0,#4]
00009a  f421117c          BIC      r1,r1,#0x3f0000
00009e  6041              STR      r1,[r0,#4]
0000a0  6841              LDR      r1,[r0,#4]
0000a2  f44111e8          ORR      r1,r1,#0x1d0000
0000a6  6041              STR      r1,[r0,#4]
0000a8  6801              LDR      r1,[r0,#0]
0000aa  f0417180          ORR      r1,r1,#0x1000000
0000ae  6001              STR      r1,[r0,#0]
                  |L1.176|
0000b0  6801              LDR      r1,[r0,#0]
0000b2  f0117f00          TST      r1,#0x2000000
0000b6  d0fb              BEQ      |L1.176|
0000b8  6841              LDR      r1,[r0,#4]
0000ba  f0210103          BIC      r1,r1,#3
0000be  6041              STR      r1,[r0,#4]
0000c0  6841              LDR      r1,[r0,#4]
0000c2  f0410102          ORR      r1,r1,#2
0000c6  6041              STR      r1,[r0,#4]
                  |L1.200|
0000c8  6841              LDR      r1,[r0,#4]
0000ca  f001010c          AND      r1,r1,#0xc
0000ce  2908              CMP      r1,#8
0000d0  d1fa              BNE      |L1.200|
                  |L1.210|
;;;252    #endif /* STM32F10X_CL */
;;;253        
;;;254    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;255      #ifdef DATA_IN_ExtSRAM
;;;256        SystemInit_ExtMemCtl(); 
;;;257      #endif /* DATA_IN_ExtSRAM */
;;;258    #endif 
;;;259    
;;;260      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;261      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;262      SetSysClock();
;;;263    
;;;264    #ifdef VECT_TAB_SRAM
;;;265      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;266    #else
;;;267      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
0000d2  491c              LDR      r1,|L1.324|
0000d4  f04f6000          MOV      r0,#0x8000000
0000d8  6008              STR      r0,[r1,#0]
;;;268    #endif 
;;;269    }
0000da  b002              ADD      sp,sp,#8
0000dc  4770              BX       lr
;;;270    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;305      */
;;;306    void SystemCoreClockUpdate (void)
0000de  4916              LDR      r1,|L1.312|
;;;307    {
;;;308      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
;;;309    
;;;310    #ifdef  STM32F10X_CL
;;;311      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;312    #endif /* STM32F10X_CL */
;;;313    
;;;314    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;315      uint32_t prediv1factor = 0;
;;;316    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;317        
;;;318      /* Get SYSCLK source -------------------------------------------------------*/
;;;319      tmp = RCC->CFGR & RCC_CFGR_SWS;
0000e0  6848              LDR      r0,[r1,#4]
;;;320      
;;;321      switch (tmp)
;;;322      {
;;;323        case 0x00:  /* HSI used as system clock */
;;;324          SystemCoreClock = HSI_VALUE;
0000e2  4a19              LDR      r2,|L1.328|
0000e4  f010030c          ANDS     r3,r0,#0xc            ;319
0000e8  4818              LDR      r0,|L1.332|
0000ea  bf18              IT       NE                    ;321
0000ec  2b04              CMPNE    r3,#4                 ;321
0000ee  d001              BEQ      |L1.244|
0000f0  2b08              CMP      r3,#8                 ;321
0000f2  d001              BEQ      |L1.248|
                  |L1.244|
;;;325          break;
0000f4  6002              STR      r2,[r0,#0]  ; SystemCoreClock
0000f6  e015              B        |L1.292|
                  |L1.248|
;;;326        case 0x04:  /* HSE used as system clock */
;;;327          SystemCoreClock = HSE_VALUE;
;;;328          break;
;;;329        case 0x08:  /* PLL used as system clock */
;;;330    
;;;331          /* Get PLL clock source and multiplication factor ----------------------*/
;;;332          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
0000f8  684a              LDR      r2,[r1,#4]
;;;333          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
0000fa  684b              LDR      r3,[r1,#4]
0000fc  f4021270          AND      r2,r2,#0x3c0000       ;332
;;;334          
;;;335    #ifndef STM32F10X_CL      
;;;336          pllmull = ( pllmull >> 18) + 2;
000100  f04f0c02          MOV      r12,#2
000104  f4133f80          TST      r3,#0x10000           ;333
000108  eb0c4292          ADD      r2,r12,r2,LSR #18
;;;337          
;;;338          if (pllsource == 0x00)
00010c  d003              BEQ      |L1.278|
;;;339          {
;;;340            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;341            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;342          }
;;;343          else
;;;344          {
;;;345     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;346           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;347           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;348           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;349     #else
;;;350            /* HSE selected as PLL clock entry */
;;;351            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
00010e  684b              LDR      r3,[r1,#4]
000110  f4133f00          TST      r3,#0x20000
000114  d003              BEQ      |L1.286|
                  |L1.278|
;;;352            {/* HSE oscillator clock divided by 2 */
;;;353              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
000116  4b0e              LDR      r3,|L1.336|
000118  435a              MULS     r2,r3,r2
00011a  6002              STR      r2,[r0,#0]  ; SystemCoreClock
00011c  e002              B        |L1.292|
                  |L1.286|
;;;354            }
;;;355            else
;;;356            {
;;;357              SystemCoreClock = HSE_VALUE * pllmull;
00011e  4b0a              LDR      r3,|L1.328|
000120  435a              MULS     r2,r3,r2
000122  6002              STR      r2,[r0,#0]  ; SystemCoreClock
                  |L1.292|
;;;358            }
;;;359     #endif
;;;360          }
;;;361    #else
;;;362          pllmull = pllmull >> 18;
;;;363          
;;;364          if (pllmull != 0x0D)
;;;365          {
;;;366             pllmull += 2;
;;;367          }
;;;368          else
;;;369          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;370            pllmull = 13 / 2; 
;;;371          }
;;;372                
;;;373          if (pllsource == 0x00)
;;;374          {
;;;375            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;376            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;377          }
;;;378          else
;;;379          {/* PREDIV1 selected as PLL clock entry */
;;;380            
;;;381            /* Get PREDIV1 clock source and division factor */
;;;382            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;383            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;384            
;;;385            if (prediv1source == 0)
;;;386            { 
;;;387              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;388              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;389            }
;;;390            else
;;;391            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;392              
;;;393              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;394              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;395              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;396              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;397            }
;;;398          }
;;;399    #endif /* STM32F10X_CL */ 
;;;400          break;
;;;401    
;;;402        default:
;;;403          SystemCoreClock = HSI_VALUE;
;;;404          break;
;;;405      }
;;;406      
;;;407      /* Compute HCLK clock frequency ----------------*/
;;;408      /* Get HCLK prescaler */
;;;409      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000124  6849              LDR      r1,[r1,#4]
000126  4a0b              LDR      r2,|L1.340|
000128  f3c11103          UBFX     r1,r1,#4,#4
00012c  5c51              LDRB     r1,[r2,r1]
;;;410      /* HCLK clock frequency */
;;;411      SystemCoreClock >>= tmp;  
00012e  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000130  fa22f101          LSR      r1,r2,r1
000134  6001              STR      r1,[r0,#0]  ; SystemCoreClock
;;;412    }
000136  4770              BX       lr
;;;413    
                          ENDP

                  |L1.312|
                          DCD      0x40021000
                  |L1.316|
                          DCD      0xf8ff0000
                  |L1.320|
                          DCD      0x40022000
                  |L1.324|
                          DCD      0xe000ed08
                  |L1.328|
                          DCD      0x007a1200
                  |L1.332|
                          DCD      ||.data||
                  |L1.336|
                          DCD      0x003d0900
                  |L1.340|
                          DCD      ||.data||+0x4

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
