; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_i2c.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_i2c.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_i2c.crf ..\STM32F10x_FWLIB\src\stm32f10x_i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;161      */
;;;162    void I2C_DeInit(I2C_TypeDef* I2Cx)
000000  f1a04180          SUB      r1,r0,#0x40000000
;;;163    {
000004  b510              PUSH     {r4,lr}
;;;164      /* Check the parameters */
;;;165      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;166    
;;;167      if (I2Cx == I2C1)
000006  f5b141a8          SUBS     r1,r1,#0x5400
;;;168      {
;;;169        /* Enable I2C1 reset state */
;;;170        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
;;;171        /* Release I2C1 from reset state */
;;;172        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
;;;173      }
;;;174      else
;;;175      {
;;;176        /* Enable I2C2 reset state */
;;;177        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
00000a  f04f0101          MOV      r1,#1
00000e  d009              BEQ      |L1.36|
000010  0588              LSLS     r0,r1,#22
000012  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;178        /* Release I2C2 from reset state */
;;;179        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
000016  e8bd4010          POP      {r4,lr}
00001a  2100              MOVS     r1,#0
00001c  f44f0080          MOV      r0,#0x400000
000020  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.36|
000024  f44f1000          MOV      r0,#0x200000          ;170
000028  f7fffffe          BL       RCC_APB1PeriphResetCmd
00002c  e8bd4010          POP      {r4,lr}               ;172
000030  2100              MOVS     r1,#0                 ;172
000032  f44f1000          MOV      r0,#0x200000          ;172
000036  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;180      }
;;;181    }
;;;182    
                          ENDP

                  I2C_Init PROC
;;;190      */
;;;191    void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
00003a  b570              PUSH     {r4-r6,lr}
;;;192    {
00003c  4604              MOV      r4,r0
;;;193      uint16_t tmpreg = 0, freqrange = 0;
;;;194      uint16_t result = 0x04;
;;;195      uint32_t pclk1 = 8000000;
;;;196      RCC_ClocksTypeDef  rcc_clocks;
;;;197      /* Check the parameters */
;;;198      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;199      assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
;;;200      assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
;;;201      assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
;;;202      assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
;;;203      assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
;;;204      assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
;;;205    
;;;206    /*---------------------------- I2Cx CR2 Configuration ------------------------*/
;;;207      /* Get the I2Cx CR2 value */
;;;208      tmpreg = I2Cx->CR2;
00003e  8880              LDRH     r0,[r0,#4]
000040  b086              SUB      sp,sp,#0x18           ;192
000042  460d              MOV      r5,r1                 ;192
;;;209      /* Clear frequency FREQ[5:0] bits */
;;;210      tmpreg &= CR2_FREQ_Reset;
000044  f020063f          BIC      r6,r0,#0x3f
;;;211      /* Get pclk1 frequency value */
;;;212      RCC_GetClocksFreq(&rcc_clocks);
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       RCC_GetClocksFreq
;;;213      pclk1 = rcc_clocks.PCLK1_Frequency;
;;;214      /* Set frequency bits depending on pclk1 value */
;;;215      freqrange = (uint16_t)(pclk1 / 1000000);
00004e  49b2              LDR      r1,|L1.792|
000050  9802              LDR      r0,[sp,#8]
000052  fbb0f1f1          UDIV     r1,r0,r1
000056  b289              UXTH     r1,r1
;;;216      tmpreg |= freqrange;
000058  ea460201          ORR      r2,r6,r1
;;;217      /* Write to I2Cx CR2 */
;;;218      I2Cx->CR2 = tmpreg;
00005c  80a2              STRH     r2,[r4,#4]
;;;219    
;;;220    /*---------------------------- I2Cx CCR Configuration ------------------------*/
;;;221      /* Disable the selected I2C peripheral to configure TRISE */
;;;222      I2Cx->CR1 &= CR1_PE_Reset;
00005e  8822              LDRH     r2,[r4,#0]
000060  f0220201          BIC      r2,r2,#1
000064  8022              STRH     r2,[r4,#0]
;;;223      /* Reset tmpreg value */
;;;224      /* Clear F/S, DUTY and CCR[11:0] bits */
;;;225      tmpreg = 0;
;;;226    
;;;227      /* Configure speed in standard mode */
;;;228      if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
000066  4bad              LDR      r3,|L1.796|
000068  682a              LDR      r2,[r5,#0]
00006a  429a              CMP      r2,r3
00006c  d81d              BHI      |L1.170|
;;;229      {
;;;230        /* Standard mode speed calculate */
;;;231        result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
00006e  0052              LSLS     r2,r2,#1
000070  fbb0f0f2          UDIV     r0,r0,r2
000074  b280              UXTH     r0,r0
;;;232        /* Test if CCR value is under 0x4*/
;;;233        if (result < 0x04)
000076  2804              CMP      r0,#4
;;;234        {
;;;235          /* Set minimum allowed value */
;;;236          result = 0x04;  
000078  bf38              IT       CC
00007a  2004              MOVCC    r0,#4
00007c  1c49              ADDS     r1,r1,#1
;;;237        }
;;;238        /* Set speed value for standard mode */
;;;239        tmpreg |= result;	  
;;;240        /* Set Maximum Rise Time for standard mode */
;;;241        I2Cx->TRISE = freqrange + 1; 
00007e  8421              STRH     r1,[r4,#0x20]
                  |L1.128|
;;;242      }
;;;243      /* Configure speed in fast mode */
;;;244      else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
;;;245      {
;;;246        if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
;;;247        {
;;;248          /* Fast mode speed calculate: Tlow/Thigh = 2 */
;;;249          result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
;;;250        }
;;;251        else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
;;;252        {
;;;253          /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
;;;254          result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
;;;255          /* Set DUTY bit */
;;;256          result |= I2C_DutyCycle_16_9;
;;;257        }
;;;258    
;;;259        /* Test if CCR value is under 0x1*/
;;;260        if ((result & CCR_CCR_Set) == 0)
;;;261        {
;;;262          /* Set minimum allowed value */
;;;263          result |= (uint16_t)0x0001;  
;;;264        }
;;;265        /* Set speed value and set F/S bit for fast mode */
;;;266        tmpreg |= (uint16_t)(result | CCR_FS_Set);
;;;267        /* Set Maximum Rise Time for fast mode */
;;;268        I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
;;;269      }
;;;270    
;;;271      /* Write to I2Cx CCR */
;;;272      I2Cx->CCR = tmpreg;
000080  83a0              STRH     r0,[r4,#0x1c]
;;;273      /* Enable the selected I2C peripheral */
;;;274      I2Cx->CR1 |= CR1_PE_Set;
000082  8820              LDRH     r0,[r4,#0]
000084  f0400001          ORR      r0,r0,#1
000088  8020              STRH     r0,[r4,#0]
;;;275    
;;;276    /*---------------------------- I2Cx CR1 Configuration ------------------------*/
;;;277      /* Get the I2Cx CR1 value */
;;;278      tmpreg = I2Cx->CR1;
00008a  8820              LDRH     r0,[r4,#0]
;;;279      /* Clear ACK, SMBTYPE and  SMBUS bits */
;;;280      tmpreg &= CR1_CLEAR_Mask;
;;;281      /* Configure I2Cx: mode and acknowledgement */
;;;282      /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
;;;283      /* Set ACK bit according to I2C_Ack value */
;;;284      tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
00008c  88a9              LDRH     r1,[r5,#4]
00008e  896a              LDRH     r2,[r5,#0xa]
000090  f020000a          BIC      r0,r0,#0xa            ;280
000094  f4206080          BIC      r0,r0,#0x400          ;280
000098  4311              ORRS     r1,r1,r2
00009a  4308              ORRS     r0,r0,r1
;;;285      /* Write to I2Cx CR1 */
;;;286      I2Cx->CR1 = tmpreg;
00009c  8020              STRH     r0,[r4,#0]
;;;287    
;;;288    /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
;;;289      /* Set I2Cx Own Address1 and acknowledged address */
;;;290      I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
00009e  89a8              LDRH     r0,[r5,#0xc]
0000a0  8929              LDRH     r1,[r5,#8]
0000a2  4308              ORRS     r0,r0,r1
0000a4  8120              STRH     r0,[r4,#8]
;;;291    }
0000a6  b006              ADD      sp,sp,#0x18
0000a8  bd70              POP      {r4-r6,pc}
                  |L1.170|
0000aa  88eb              LDRH     r3,[r5,#6]            ;246
0000ac  f5a34c3f          SUB      r12,r3,#0xbf00        ;246
0000b0  f1bc0cff          SUBS     r12,r12,#0xff         ;246
0000b4  d019              BEQ      |L1.234|
0000b6  eb0203c2          ADD      r3,r2,r2,LSL #3       ;254
0000ba  eb031202          ADD      r2,r3,r2,LSL #4       ;254
0000be  fbb0f0f2          UDIV     r0,r0,r2              ;254
0000c2  b280              UXTH     r0,r0                 ;254
0000c4  f4404080          ORR      r0,r0,#0x4000         ;256
                  |L1.200|
0000c8  0502              LSLS     r2,r0,#20             ;260
0000ca  0d12              LSRS     r2,r2,#20             ;260
0000cc  bf08              IT       EQ                    ;263
0000ce  f0400001          ORREQ    r0,r0,#1              ;263
0000d2  f4404000          ORR      r0,r0,#0x8000         ;266
0000d6  f44f7296          MOV      r2,#0x12c             ;268
0000da  4351              MULS     r1,r2,r1              ;268
0000dc  f44f727a          MOV      r2,#0x3e8             ;268
0000e0  fbb1f1f2          UDIV     r1,r1,r2              ;268
0000e4  1c49              ADDS     r1,r1,#1              ;268
0000e6  8421              STRH     r1,[r4,#0x20]         ;268
0000e8  e7ca              B        |L1.128|
                  |L1.234|
0000ea  eb020242          ADD      r2,r2,r2,LSL #1       ;249
0000ee  fbb0f0f2          UDIV     r0,r0,r2              ;249
0000f2  b280              UXTH     r0,r0                 ;249
0000f4  e7e8              B        |L1.200|
;;;292    
                          ENDP

                  I2C_StructInit PROC
;;;297      */
;;;298    void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
0000f6  f2413188          MOV      r1,#0x1388
;;;299    {
;;;300    /*---------------- Reset I2C init structure parameters values ----------------*/
;;;301      /* initialize the I2C_ClockSpeed member */
;;;302      I2C_InitStruct->I2C_ClockSpeed = 5000;
;;;303      /* Initialize the I2C_Mode member */
;;;304      I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
0000fa  6001              STR      r1,[r0,#0]
0000fc  2100              MOVS     r1,#0
0000fe  8081              STRH     r1,[r0,#4]
;;;305      /* Initialize the I2C_DutyCycle member */
;;;306      I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
000100  f64b72ff          MOV      r2,#0xbfff
000104  80c2              STRH     r2,[r0,#6]
;;;307      /* Initialize the I2C_OwnAddress1 member */
;;;308      I2C_InitStruct->I2C_OwnAddress1 = 0;
000106  8101              STRH     r1,[r0,#8]
;;;309      /* Initialize the I2C_Ack member */
;;;310      I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
000108  8141              STRH     r1,[r0,#0xa]
;;;311      /* Initialize the I2C_AcknowledgedAddress member */
;;;312      I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
00010a  f44f4180          MOV      r1,#0x4000
00010e  8181              STRH     r1,[r0,#0xc]
;;;313    }
000110  4770              BX       lr
;;;314    
                          ENDP

                  I2C_Cmd PROC
;;;321      */
;;;322    void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000112  2900              CMP      r1,#0
;;;323    {
;;;324      /* Check the parameters */
;;;325      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;326      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;327      if (NewState != DISABLE)
;;;328      {
;;;329        /* Enable the selected I2C peripheral */
;;;330        I2Cx->CR1 |= CR1_PE_Set;
;;;331      }
;;;332      else
;;;333      {
;;;334        /* Disable the selected I2C peripheral */
;;;335        I2Cx->CR1 &= CR1_PE_Reset;
000114  8801              LDRH     r1,[r0,#0]
000116  bf14              ITE      NE                    ;330
000118  f0410101          ORRNE    r1,r1,#1              ;330
00011c  f0210101          BICEQ    r1,r1,#1
000120  8001              STRH     r1,[r0,#0]            ;330
;;;336      }
;;;337    }
000122  4770              BX       lr
;;;338    
                          ENDP

                  I2C_DMACmd PROC
;;;345      */
;;;346    void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000124  2900              CMP      r1,#0
;;;347    {
;;;348      /* Check the parameters */
;;;349      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;350      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;351      if (NewState != DISABLE)
;;;352      {
;;;353        /* Enable the selected I2C DMA requests */
;;;354        I2Cx->CR2 |= CR2_DMAEN_Set;
;;;355      }
;;;356      else
;;;357      {
;;;358        /* Disable the selected I2C DMA requests */
;;;359        I2Cx->CR2 &= CR2_DMAEN_Reset;
000126  8881              LDRH     r1,[r0,#4]
000128  bf14              ITE      NE                    ;354
00012a  f4416100          ORRNE    r1,r1,#0x800          ;354
00012e  f4216100          BICEQ    r1,r1,#0x800
000132  8081              STRH     r1,[r0,#4]            ;354
;;;360      }
;;;361    }
000134  4770              BX       lr
;;;362    
                          ENDP

                  I2C_DMALastTransferCmd PROC
;;;369      */
;;;370    void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000136  2900              CMP      r1,#0
;;;371    {
;;;372      /* Check the parameters */
;;;373      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;374      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;375      if (NewState != DISABLE)
;;;376      {
;;;377        /* Next DMA transfer is the last transfer */
;;;378        I2Cx->CR2 |= CR2_LAST_Set;
;;;379      }
;;;380      else
;;;381      {
;;;382        /* Next DMA transfer is not the last transfer */
;;;383        I2Cx->CR2 &= CR2_LAST_Reset;
000138  8881              LDRH     r1,[r0,#4]
00013a  bf14              ITE      NE                    ;378
00013c  f4415180          ORRNE    r1,r1,#0x1000         ;378
000140  f4215180          BICEQ    r1,r1,#0x1000
000144  8081              STRH     r1,[r0,#4]            ;378
;;;384      }
;;;385    }
000146  4770              BX       lr
;;;386    
                          ENDP

                  I2C_GenerateSTART PROC
;;;393      */
;;;394    void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
000148  2900              CMP      r1,#0
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;398      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;399      if (NewState != DISABLE)
;;;400      {
;;;401        /* Generate a START condition */
;;;402        I2Cx->CR1 |= CR1_START_Set;
;;;403      }
;;;404      else
;;;405      {
;;;406        /* Disable the START condition generation */
;;;407        I2Cx->CR1 &= CR1_START_Reset;
00014a  8801              LDRH     r1,[r0,#0]
00014c  bf14              ITE      NE                    ;402
00014e  f4417180          ORRNE    r1,r1,#0x100          ;402
000152  f4217180          BICEQ    r1,r1,#0x100
000156  8001              STRH     r1,[r0,#0]            ;402
;;;408      }
;;;409    }
000158  4770              BX       lr
;;;410    
                          ENDP

                  I2C_GenerateSTOP PROC
;;;417      */
;;;418    void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
00015a  2900              CMP      r1,#0
;;;419    {
;;;420      /* Check the parameters */
;;;421      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;422      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;423      if (NewState != DISABLE)
;;;424      {
;;;425        /* Generate a STOP condition */
;;;426        I2Cx->CR1 |= CR1_STOP_Set;
;;;427      }
;;;428      else
;;;429      {
;;;430        /* Disable the STOP condition generation */
;;;431        I2Cx->CR1 &= CR1_STOP_Reset;
00015c  8801              LDRH     r1,[r0,#0]
00015e  bf14              ITE      NE                    ;426
000160  f4417100          ORRNE    r1,r1,#0x200          ;426
000164  f4217100          BICEQ    r1,r1,#0x200
000168  8001              STRH     r1,[r0,#0]            ;426
;;;432      }
;;;433    }
00016a  4770              BX       lr
;;;434    
                          ENDP

                  I2C_AcknowledgeConfig PROC
;;;441      */
;;;442    void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
00016c  2900              CMP      r1,#0
;;;443    {
;;;444      /* Check the parameters */
;;;445      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;446      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;447      if (NewState != DISABLE)
;;;448      {
;;;449        /* Enable the acknowledgement */
;;;450        I2Cx->CR1 |= CR1_ACK_Set;
;;;451      }
;;;452      else
;;;453      {
;;;454        /* Disable the acknowledgement */
;;;455        I2Cx->CR1 &= CR1_ACK_Reset;
00016e  8801              LDRH     r1,[r0,#0]
000170  bf14              ITE      NE                    ;450
000172  f4416180          ORRNE    r1,r1,#0x400          ;450
000176  f4216180          BICEQ    r1,r1,#0x400
00017a  8001              STRH     r1,[r0,#0]            ;450
;;;456      }
;;;457    }
00017c  4770              BX       lr
;;;458    
                          ENDP

                  I2C_OwnAddress2Config PROC
;;;464      */
;;;465    void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
00017e  8982              LDRH     r2,[r0,#0xc]
;;;466    {
;;;467      uint16_t tmpreg = 0;
;;;468    
;;;469      /* Check the parameters */
;;;470      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;471    
;;;472      /* Get the old register value */
;;;473      tmpreg = I2Cx->OAR2;
;;;474    
;;;475      /* Reset I2Cx Own address2 bit [7:1] */
;;;476      tmpreg &= OAR2_ADD2_Reset;
;;;477    
;;;478      /* Set I2Cx Own address2 */
;;;479      tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
000180  f00101fe          AND      r1,r1,#0xfe
000184  f02202fe          BIC      r2,r2,#0xfe           ;476
000188  4311              ORRS     r1,r1,r2
;;;480    
;;;481      /* Store the new register value */
;;;482      I2Cx->OAR2 = tmpreg;
00018a  8181              STRH     r1,[r0,#0xc]
;;;483    }
00018c  4770              BX       lr
;;;484    
                          ENDP

                  I2C_DualAddressCmd PROC
;;;491      */
;;;492    void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
00018e  2900              CMP      r1,#0
;;;493    {
;;;494      /* Check the parameters */
;;;495      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;496      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;497      if (NewState != DISABLE)
;;;498      {
;;;499        /* Enable dual addressing mode */
;;;500        I2Cx->OAR2 |= OAR2_ENDUAL_Set;
;;;501      }
;;;502      else
;;;503      {
;;;504        /* Disable dual addressing mode */
;;;505        I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
000190  8981              LDRH     r1,[r0,#0xc]
000192  bf14              ITE      NE                    ;500
000194  f0410101          ORRNE    r1,r1,#1              ;500
000198  f0210101          BICEQ    r1,r1,#1
00019c  8181              STRH     r1,[r0,#0xc]          ;500
;;;506      }
;;;507    }
00019e  4770              BX       lr
;;;508    
                          ENDP

                  I2C_GeneralCallCmd PROC
;;;515      */
;;;516    void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
0001a0  2900              CMP      r1,#0
;;;517    {
;;;518      /* Check the parameters */
;;;519      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;520      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;521      if (NewState != DISABLE)
;;;522      {
;;;523        /* Enable generall call */
;;;524        I2Cx->CR1 |= CR1_ENGC_Set;
;;;525      }
;;;526      else
;;;527      {
;;;528        /* Disable generall call */
;;;529        I2Cx->CR1 &= CR1_ENGC_Reset;
0001a2  8801              LDRH     r1,[r0,#0]
0001a4  bf14              ITE      NE                    ;524
0001a6  f0410140          ORRNE    r1,r1,#0x40           ;524
0001aa  f0210140          BICEQ    r1,r1,#0x40
0001ae  8001              STRH     r1,[r0,#0]            ;524
;;;530      }
;;;531    }
0001b0  4770              BX       lr
;;;532    
                          ENDP

                  I2C_ITConfig PROC
;;;544      */
;;;545    void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
0001b2  2a00              CMP      r2,#0
;;;546    {
;;;547      /* Check the parameters */
;;;548      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;549      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;550      assert_param(IS_I2C_CONFIG_IT(I2C_IT));
;;;551      
;;;552      if (NewState != DISABLE)
;;;553      {
;;;554        /* Enable the selected I2C interrupts */
;;;555        I2Cx->CR2 |= I2C_IT;
;;;556      }
;;;557      else
;;;558      {
;;;559        /* Disable the selected I2C interrupts */
;;;560        I2Cx->CR2 &= (uint16_t)~I2C_IT;
0001b4  8882              LDRH     r2,[r0,#4]
0001b6  bf14              ITE      NE                    ;555
0001b8  4311              ORRNE    r1,r1,r2              ;555
0001ba  ea220101          BICEQ    r1,r2,r1
0001be  8081              STRH     r1,[r0,#4]            ;555
;;;561      }
;;;562    }
0001c0  4770              BX       lr
;;;563    
                          ENDP

                  I2C_SendData PROC
;;;569      */
;;;570    void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
0001c2  8201              STRH     r1,[r0,#0x10]
;;;571    {
;;;572      /* Check the parameters */
;;;573      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;574      /* Write in the DR register the data to be sent */
;;;575      I2Cx->DR = Data;
;;;576    }
0001c4  4770              BX       lr
;;;577    
                          ENDP

                  I2C_ReceiveData PROC
;;;582      */
;;;583    uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
0001c6  8a00              LDRH     r0,[r0,#0x10]
;;;584    {
;;;585      /* Check the parameters */
;;;586      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;587      /* Return the data in the DR register */
;;;588      return (uint8_t)I2Cx->DR;
0001c8  b2c0              UXTB     r0,r0
;;;589    }
0001ca  4770              BX       lr
;;;590    
                          ENDP

                  I2C_Send7bitAddress PROC
;;;600      */
;;;601    void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
0001cc  2a00              CMP      r2,#0
;;;602    {
;;;603      /* Check the parameters */
;;;604      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;605      assert_param(IS_I2C_DIRECTION(I2C_Direction));
;;;606      /* Test on the direction to set/reset the read/write bit */
;;;607      if (I2C_Direction != I2C_Direction_Transmitter)
;;;608      {
;;;609        /* Set the address bit0 for read */
;;;610        Address |= OAR1_ADD0_Set;
0001ce  bf14              ITE      NE
0001d0  f0410101          ORRNE    r1,r1,#1
;;;611      }
;;;612      else
;;;613      {
;;;614        /* Reset the address bit0 for write */
;;;615        Address &= OAR1_ADD0_Reset;
0001d4  f00101fe          ANDEQ    r1,r1,#0xfe
;;;616      }
;;;617      /* Send the address */
;;;618      I2Cx->DR = Address;
0001d8  8201              STRH     r1,[r0,#0x10]
;;;619    }
0001da  4770              BX       lr
;;;620    
                          ENDP

                  I2C_ReadRegister PROC
;;;635      */
;;;636    uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
0001dc  b081              SUB      sp,sp,#4
;;;637    {
;;;638      __IO uint32_t tmp = 0;
;;;639    
;;;640      /* Check the parameters */
;;;641      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;642      assert_param(IS_I2C_REGISTER(I2C_Register));
;;;643    
;;;644      tmp = (uint32_t) I2Cx;
;;;645      tmp += I2C_Register;
0001de  4408              ADD      r0,r0,r1
;;;646    
;;;647      /* Return the selected register value */
;;;648      return (*(__IO uint16_t *) tmp);
0001e0  9000              STR      r0,[sp,#0]
0001e2  8800              LDRH     r0,[r0,#0]
;;;649    }
0001e4  b001              ADD      sp,sp,#4
0001e6  4770              BX       lr
;;;650    
                          ENDP

                  I2C_SoftwareResetCmd PROC
;;;657      */
;;;658    void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
0001e8  2900              CMP      r1,#0
;;;659    {
;;;660      /* Check the parameters */
;;;661      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;662      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;663      if (NewState != DISABLE)
;;;664      {
;;;665        /* Peripheral under reset */
;;;666        I2Cx->CR1 |= CR1_SWRST_Set;
;;;667      }
;;;668      else
;;;669      {
;;;670        /* Peripheral not under reset */
;;;671        I2Cx->CR1 &= CR1_SWRST_Reset;
0001ea  8801              LDRH     r1,[r0,#0]
0001ec  bf14              ITE      NE                    ;666
0001ee  f4414100          ORRNE    r1,r1,#0x8000         ;666
0001f2  f3c1010e          UBFXEQ   r1,r1,#0,#15
0001f6  8001              STRH     r1,[r0,#0]            ;666
;;;672      }
;;;673    }
0001f8  4770              BX       lr
;;;674    
                          ENDP

                  I2C_NACKPositionConfig PROC
;;;695      */
;;;696    void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
0001fa  f5b16f00          CMP      r1,#0x800
;;;697    {
;;;698      /* Check the parameters */
;;;699      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;700      assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
;;;701      
;;;702      /* Check the input parameter */
;;;703      if (I2C_NACKPosition == I2C_NACKPosition_Next)
;;;704      {
;;;705        /* Next byte in shift register is the last received byte */
;;;706        I2Cx->CR1 |= I2C_NACKPosition_Next;
;;;707      }
;;;708      else
;;;709      {
;;;710        /* Current byte in shift register is the last received byte */
;;;711        I2Cx->CR1 &= I2C_NACKPosition_Current;
0001fe  8801              LDRH     r1,[r0,#0]
000200  bf0c              ITE      EQ                    ;706
000202  f4416100          ORREQ    r1,r1,#0x800          ;706
000206  f4216100          BICNE    r1,r1,#0x800
00020a  8001              STRH     r1,[r0,#0]            ;706
;;;712      }
;;;713    }
00020c  4770              BX       lr
;;;714    
                          ENDP

                  I2C_SMBusAlertConfig PROC
;;;723      */
;;;724    void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
00020e  f5b15f00          CMP      r1,#0x2000
;;;725    {
;;;726      /* Check the parameters */
;;;727      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;728      assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
;;;729      if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
;;;730      {
;;;731        /* Drive the SMBusAlert pin Low */
;;;732        I2Cx->CR1 |= I2C_SMBusAlert_Low;
;;;733      }
;;;734      else
;;;735      {
;;;736        /* Drive the SMBusAlert pin High  */
;;;737        I2Cx->CR1 &= I2C_SMBusAlert_High;
000212  8801              LDRH     r1,[r0,#0]
000214  bf0c              ITE      EQ                    ;732
000216  f4415100          ORREQ    r1,r1,#0x2000         ;732
00021a  f4215100          BICNE    r1,r1,#0x2000
00021e  8001              STRH     r1,[r0,#0]            ;732
;;;738      }
;;;739    }
000220  4770              BX       lr
;;;740    
                          ENDP

                  I2C_TransmitPEC PROC
;;;747      */
;;;748    void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
000222  2900              CMP      r1,#0
;;;749    {
;;;750      /* Check the parameters */
;;;751      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;752      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;753      if (NewState != DISABLE)
;;;754      {
;;;755        /* Enable the selected I2C PEC transmission */
;;;756        I2Cx->CR1 |= CR1_PEC_Set;
;;;757      }
;;;758      else
;;;759      {
;;;760        /* Disable the selected I2C PEC transmission */
;;;761        I2Cx->CR1 &= CR1_PEC_Reset;
000224  8801              LDRH     r1,[r0,#0]
000226  bf14              ITE      NE                    ;756
000228  f4415180          ORRNE    r1,r1,#0x1000         ;756
00022c  f4215180          BICEQ    r1,r1,#0x1000
000230  8001              STRH     r1,[r0,#0]            ;756
;;;762      }
;;;763    }
000232  4770              BX       lr
;;;764    
                          ENDP

                  I2C_PECPositionConfig PROC
;;;778      */
;;;779    void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
000234  f5b16f00          CMP      r1,#0x800
;;;780    {
;;;781      /* Check the parameters */
;;;782      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;783      assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
;;;784      if (I2C_PECPosition == I2C_PECPosition_Next)
;;;785      {
;;;786        /* Next byte in shift register is PEC */
;;;787        I2Cx->CR1 |= I2C_PECPosition_Next;
;;;788      }
;;;789      else
;;;790      {
;;;791        /* Current byte in shift register is PEC */
;;;792        I2Cx->CR1 &= I2C_PECPosition_Current;
000238  8801              LDRH     r1,[r0,#0]
00023a  bf0c              ITE      EQ                    ;787
00023c  f4416100          ORREQ    r1,r1,#0x800          ;787
000240  f4216100          BICNE    r1,r1,#0x800
000244  8001              STRH     r1,[r0,#0]            ;787
;;;793      }
;;;794    }
000246  4770              BX       lr
;;;795    
                          ENDP

                  I2C_CalculatePEC PROC
;;;802      */
;;;803    void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
000248  2900              CMP      r1,#0
;;;804    {
;;;805      /* Check the parameters */
;;;806      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;807      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;808      if (NewState != DISABLE)
;;;809      {
;;;810        /* Enable the selected I2C PEC calculation */
;;;811        I2Cx->CR1 |= CR1_ENPEC_Set;
;;;812      }
;;;813      else
;;;814      {
;;;815        /* Disable the selected I2C PEC calculation */
;;;816        I2Cx->CR1 &= CR1_ENPEC_Reset;
00024a  8801              LDRH     r1,[r0,#0]
00024c  bf14              ITE      NE                    ;811
00024e  f0410120          ORRNE    r1,r1,#0x20           ;811
000252  f0210120          BICEQ    r1,r1,#0x20
000256  8001              STRH     r1,[r0,#0]            ;811
;;;817      }
;;;818    }
000258  4770              BX       lr
;;;819    
                          ENDP

                  I2C_GetPEC PROC
;;;824      */
;;;825    uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
00025a  8b00              LDRH     r0,[r0,#0x18]
;;;826    {
;;;827      /* Check the parameters */
;;;828      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;829      /* Return the selected I2C PEC value */
;;;830      return ((I2Cx->SR2) >> 8);
00025c  0a00              LSRS     r0,r0,#8
;;;831    }
00025e  4770              BX       lr
;;;832    
                          ENDP

                  I2C_ARPCmd PROC
;;;839      */
;;;840    void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000260  2900              CMP      r1,#0
;;;841    {
;;;842      /* Check the parameters */
;;;843      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;844      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;845      if (NewState != DISABLE)
;;;846      {
;;;847        /* Enable the selected I2C ARP */
;;;848        I2Cx->CR1 |= CR1_ENARP_Set;
;;;849      }
;;;850      else
;;;851      {
;;;852        /* Disable the selected I2C ARP */
;;;853        I2Cx->CR1 &= CR1_ENARP_Reset;
000262  8801              LDRH     r1,[r0,#0]
000264  bf14              ITE      NE                    ;848
000266  f0410110          ORRNE    r1,r1,#0x10           ;848
00026a  f0210110          BICEQ    r1,r1,#0x10
00026e  8001              STRH     r1,[r0,#0]            ;848
;;;854      }
;;;855    }
000270  4770              BX       lr
;;;856    
                          ENDP

                  I2C_StretchClockCmd PROC
;;;863      */
;;;864    void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000272  2900              CMP      r1,#0
;;;865    {
;;;866      /* Check the parameters */
;;;867      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;868      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;869      if (NewState == DISABLE)
;;;870      {
;;;871        /* Enable the selected I2C Clock stretching */
;;;872        I2Cx->CR1 |= CR1_NOSTRETCH_Set;
;;;873      }
;;;874      else
;;;875      {
;;;876        /* Disable the selected I2C Clock stretching */
;;;877        I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
000274  8801              LDRH     r1,[r0,#0]
000276  bf0c              ITE      EQ                    ;872
000278  f0410180          ORREQ    r1,r1,#0x80           ;872
00027c  f0210180          BICNE    r1,r1,#0x80
000280  8001              STRH     r1,[r0,#0]            ;872
;;;878      }
;;;879    }
000282  4770              BX       lr
;;;880    
                          ENDP

                  I2C_FastModeDutyCycleConfig PROC
;;;889      */
;;;890    void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
000284  f5b14f80          CMP      r1,#0x4000
;;;891    {
;;;892      /* Check the parameters */
;;;893      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;894      assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
;;;895      if (I2C_DutyCycle != I2C_DutyCycle_16_9)
;;;896      {
;;;897        /* I2C fast mode Tlow/Thigh=2 */
;;;898        I2Cx->CCR &= I2C_DutyCycle_2;
;;;899      }
;;;900      else
;;;901      {
;;;902        /* I2C fast mode Tlow/Thigh=16/9 */
;;;903        I2Cx->CCR |= I2C_DutyCycle_16_9;
000288  8b81              LDRH     r1,[r0,#0x1c]
00028a  bf14              ITE      NE                    ;898
00028c  f4214180          BICNE    r1,r1,#0x4000         ;898
000290  f4414180          ORREQ    r1,r1,#0x4000
000294  8381              STRH     r1,[r0,#0x1c]         ;898
;;;904      }
;;;905    }
000296  4770              BX       lr
;;;906    
                          ENDP

                  I2C_CheckEvent PROC
;;;1029     */
;;;1030   ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
000298  8a83              LDRH     r3,[r0,#0x14]
;;;1031   {
;;;1032     uint32_t lastevent = 0;
;;;1033     uint32_t flag1 = 0, flag2 = 0;
;;;1034     ErrorStatus status = ERROR;
00029a  2200              MOVS     r2,#0
;;;1035   
;;;1036     /* Check the parameters */
;;;1037     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1038     assert_param(IS_I2C_EVENT(I2C_EVENT));
;;;1039   
;;;1040     /* Read the I2Cx status register */
;;;1041     flag1 = I2Cx->SR1;
;;;1042     flag2 = I2Cx->SR2;
00029c  8b00              LDRH     r0,[r0,#0x18]
;;;1043     flag2 = flag2 << 16;
;;;1044   
;;;1045     /* Get the last event value from I2C status register */
;;;1046     lastevent = (flag1 | flag2) & FLAG_Mask;
00029e  ea434000          ORR      r0,r3,r0,LSL #16
0002a2  f020407f          BIC      r0,r0,#0xff000000
;;;1047   
;;;1048     /* Check whether the last event contains the I2C_EVENT */
;;;1049     if ((lastevent & I2C_EVENT) == I2C_EVENT)
0002a6  ea310000          BICS     r0,r1,r0
;;;1050     {
;;;1051       /* SUCCESS: last event is equal to I2C_EVENT */
;;;1052       status = SUCCESS;
0002aa  bf08              IT       EQ
0002ac  2201              MOVEQ    r2,#1
;;;1053     }
;;;1054     else
;;;1055     {
;;;1056       /* ERROR: last event is different from I2C_EVENT */
;;;1057       status = ERROR;
;;;1058     }
;;;1059     /* Return status */
;;;1060     return status;
0002ae  4610              MOV      r0,r2
;;;1061   }
0002b0  4770              BX       lr
;;;1062   
                          ENDP

                  I2C_GetLastEvent PROC
;;;1077     */
;;;1078   uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
0002b2  8a81              LDRH     r1,[r0,#0x14]
;;;1079   {
;;;1080     uint32_t lastevent = 0;
;;;1081     uint32_t flag1 = 0, flag2 = 0;
;;;1082   
;;;1083     /* Check the parameters */
;;;1084     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1085   
;;;1086     /* Read the I2Cx status register */
;;;1087     flag1 = I2Cx->SR1;
;;;1088     flag2 = I2Cx->SR2;
0002b4  8b00              LDRH     r0,[r0,#0x18]
;;;1089     flag2 = flag2 << 16;
;;;1090   
;;;1091     /* Get the last event value from I2C status register */
;;;1092     lastevent = (flag1 | flag2) & FLAG_Mask;
0002b6  ea414000          ORR      r0,r1,r0,LSL #16
0002ba  f020407f          BIC      r0,r0,#0xff000000
;;;1093   
;;;1094     /* Return status */
;;;1095     return lastevent;
;;;1096   }
0002be  4770              BX       lr
;;;1097   
                          ENDP

                  I2C_GetFlagStatus PROC
;;;1132     */
;;;1133   FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
0002c0  b082              SUB      sp,sp,#8
;;;1134   {
0002c2  4602              MOV      r2,r0
;;;1135     FlagStatus bitstatus = RESET;
0002c4  2000              MOVS     r0,#0
;;;1136     __IO uint32_t i2creg = 0, i2cxbase = 0;
;;;1137   
;;;1138     /* Check the parameters */
;;;1139     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1140     assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
;;;1141   
;;;1142     /* Get the I2Cx peripheral base address */
;;;1143     i2cxbase = (uint32_t)I2Cx;
;;;1144     
;;;1145     /* Read flag register index */
;;;1146     i2creg = I2C_FLAG >> 28;
0002c6  9200              STR      r2,[sp,#0]
0002c8  0f0a              LSRS     r2,r1,#28
;;;1147     
;;;1148     /* Get bit[23:0] of the flag */
;;;1149     I2C_FLAG &= FLAG_Mask;
0002ca  f021417f          BIC      r1,r1,#0xff000000
0002ce  9201              STR      r2,[sp,#4]
;;;1150     
;;;1151     if(i2creg != 0)
;;;1152     {
;;;1153       /* Get the I2Cx SR1 register address */
;;;1154       i2cxbase += 0x14;
;;;1155     }
;;;1156     else
;;;1157     {
;;;1158       /* Flag in I2Cx SR2 Register */
;;;1159       I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
0002d0  bf08              IT       EQ
0002d2  0c09              LSREQ    r1,r1,#16
;;;1160       /* Get the I2Cx SR2 register address */
;;;1161       i2cxbase += 0x18;
0002d4  9a00              LDR      r2,[sp,#0]
0002d6  bf14              ITE      NE
0002d8  3214              ADDNE    r2,r2,#0x14
0002da  3218              ADDEQ    r2,r2,#0x18
;;;1162     }
;;;1163     
;;;1164     if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
0002dc  9200              STR      r2,[sp,#0]
0002de  6812              LDR      r2,[r2,#0]
0002e0  420a              TST      r2,r1
;;;1165     {
;;;1166       /* I2C_FLAG is set */
;;;1167       bitstatus = SET;
0002e2  bf18              IT       NE
0002e4  2001              MOVNE    r0,#1
;;;1168     }
;;;1169     else
;;;1170     {
;;;1171       /* I2C_FLAG is reset */
;;;1172       bitstatus = RESET;
;;;1173     }
;;;1174     
;;;1175     /* Return the I2C_FLAG status */
;;;1176     return  bitstatus;
;;;1177   }
0002e6  b002              ADD      sp,sp,#8
0002e8  4770              BX       lr
;;;1178   
                          ENDP

                  I2C_ClearFlag PROC
;;;1211     */
;;;1212   void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
0002ea  43c9              MVNS     r1,r1
;;;1213   {
;;;1214     uint32_t flagpos = 0;
;;;1215     /* Check the parameters */
;;;1216     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1217     assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
;;;1218     /* Get the I2C flag position */
;;;1219     flagpos = I2C_FLAG & FLAG_Mask;
;;;1220     /* Clear the selected I2C flag */
;;;1221     I2Cx->SR1 = (uint16_t)~flagpos;
0002ec  8281              STRH     r1,[r0,#0x14]
;;;1222   }
0002ee  4770              BX       lr
;;;1223   
                          ENDP

                  I2C_GetITStatus PROC
;;;1245     */
;;;1246   ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
0002f0  8883              LDRH     r3,[r0,#4]
;;;1247   {
;;;1248     ITStatus bitstatus = RESET;
0002f2  2200              MOVS     r2,#0
;;;1249     uint32_t enablestatus = 0;
;;;1250   
;;;1251     /* Check the parameters */
;;;1252     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1253     assert_param(IS_I2C_GET_IT(I2C_IT));
;;;1254   
;;;1255     /* Check if the interrupt source is enabled or not */
;;;1256     enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
0002f4  f44f6ce0          MOV      r12,#0x700
0002f8  ea0c4c11          AND      r12,r12,r1,LSR #16
;;;1257     
;;;1258     /* Get bit[23:0] of the flag */
;;;1259     I2C_IT &= FLAG_Mask;
;;;1260   
;;;1261     /* Check the status of the specified I2C flag */
;;;1262     if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
0002fc  8a80              LDRH     r0,[r0,#0x14]
0002fe  ea03030c          AND      r3,r3,r12             ;1256
000302  f021417f          BIC      r1,r1,#0xff000000     ;1259
000306  4208              TST      r0,r1
000308  bf1c              ITT      NE
00030a  2b00              CMPNE    r3,#0
;;;1263     {
;;;1264       /* I2C_IT is set */
;;;1265       bitstatus = SET;
00030c  2201              MOVNE    r2,#1
;;;1266     }
;;;1267     else
;;;1268     {
;;;1269       /* I2C_IT is reset */
;;;1270       bitstatus = RESET;
;;;1271     }
;;;1272     /* Return the I2C_IT status */
;;;1273     return  bitstatus;
00030e  4610              MOV      r0,r2
;;;1274   }
000310  4770              BX       lr
;;;1275   
                          ENDP

                  I2C_ClearITPendingBit PROC
;;;1306     */
;;;1307   void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
000312  43c9              MVNS     r1,r1
;;;1308   {
;;;1309     uint32_t flagpos = 0;
;;;1310     /* Check the parameters */
;;;1311     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1312     assert_param(IS_I2C_CLEAR_IT(I2C_IT));
;;;1313     /* Get the I2C flag position */
;;;1314     flagpos = I2C_IT & FLAG_Mask;
;;;1315     /* Clear the selected I2C flag */
;;;1316     I2Cx->SR1 = (uint16_t)~flagpos;
000314  8281              STRH     r1,[r0,#0x14]
;;;1317   }
000316  4770              BX       lr
;;;1318   
                          ENDP

                  |L1.792|
                          DCD      0x000f4240
                  |L1.796|
                          DCD      0x000186a0
