; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\stm32f10x_bkp.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\stm32f10x_bkp.crf ..\STM32F10x_FWLIB\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BKP_DeInit PROC
;;;119      */
;;;120    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;123      RCC_BackupResetCmd(DISABLE);
000008  e8bd4010          POP      {r4,lr}
00000c  2000              MOVS     r0,#0
00000e  f7ffbffe          B.W      RCC_BackupResetCmd
;;;124    }
;;;125    
                          ENDP

                  BKP_TamperPinLevelConfig PROC
;;;133      */
;;;134    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000012  491e              LDR      r1,|L1.140|
;;;135    {
;;;136      /* Check the parameters */
;;;137      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;138      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000014  6008              STR      r0,[r1,#0]
;;;139    }
000016  4770              BX       lr
;;;140    
                          ENDP

                  BKP_TamperPinCmd PROC
;;;146      */
;;;147    void BKP_TamperPinCmd(FunctionalState NewState)
000018  491d              LDR      r1,|L1.144|
;;;148    {
;;;149      /* Check the parameters */
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;151      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
00001a  6008              STR      r0,[r1,#0]
;;;152    }
00001c  4770              BX       lr
;;;153    
                          ENDP

                  BKP_ITConfig PROC
;;;159      */
;;;160    void BKP_ITConfig(FunctionalState NewState)
00001e  491d              LDR      r1,|L1.148|
;;;161    {
;;;162      /* Check the parameters */
;;;163      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;164      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000020  6008              STR      r0,[r1,#0]
;;;165    }
000022  4770              BX       lr
;;;166    
                          ENDP

                  BKP_RTCOutputConfig PROC
;;;179      */
;;;180    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000024  491c              LDR      r1,|L1.152|
;;;181    {
;;;182      uint16_t tmpreg = 0;
;;;183      /* Check the parameters */
;;;184      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;185      tmpreg = BKP->RTCCR;
000026  880a              LDRH     r2,[r1,#0]
;;;186      /* Clear CCO, ASOE and ASOS bits */
;;;187      tmpreg &= RTCCR_MASK;
000028  f4227260          BIC      r2,r2,#0x380
;;;188      
;;;189      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;190      tmpreg |= BKP_RTCOutputSource;
00002c  4310              ORRS     r0,r0,r2
;;;191      /* Store the new value */
;;;192      BKP->RTCCR = tmpreg;
00002e  8008              STRH     r0,[r1,#0]
;;;193    }
000030  4770              BX       lr
;;;194    
                          ENDP

                  BKP_SetRTCCalibrationValue PROC
;;;200      */
;;;201    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
000032  4919              LDR      r1,|L1.152|
;;;202    {
;;;203      uint16_t tmpreg = 0;
;;;204      /* Check the parameters */
;;;205      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;206      tmpreg = BKP->RTCCR;
000034  880a              LDRH     r2,[r1,#0]
;;;207      /* Clear CAL[6:0] bits */
;;;208      tmpreg &= RTCCR_CAL_MASK;
000036  f022027f          BIC      r2,r2,#0x7f
;;;209      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;210      tmpreg |= CalibrationValue;
00003a  4310              ORRS     r0,r0,r2
;;;211      /* Store the new value */
;;;212      BKP->RTCCR = tmpreg;
00003c  8008              STRH     r0,[r1,#0]
;;;213    }
00003e  4770              BX       lr
;;;214    
                          ENDP

                  BKP_WriteBackupRegister PROC
;;;221      */
;;;222    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000040  b081              SUB      sp,sp,#4
;;;223    {
000042  f1004080          ADD      r0,r0,#0x40000000
000046  f50040d8          ADD      r0,r0,#0x6c00
;;;224      __IO uint32_t tmp = 0;
;;;225    
;;;226      /* Check the parameters */
;;;227      assert_param(IS_BKP_DR(BKP_DR));
;;;228    
;;;229      tmp = (uint32_t)BKP_BASE; 
;;;230      tmp += BKP_DR;
;;;231    
;;;232      *(__IO uint32_t *) tmp = Data;
00004a  9000              STR      r0,[sp,#0]
00004c  6001              STR      r1,[r0,#0]
;;;233    }
00004e  b001              ADD      sp,sp,#4
000050  4770              BX       lr
;;;234    
                          ENDP

                  BKP_ReadBackupRegister PROC
;;;240      */
;;;241    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000052  b081              SUB      sp,sp,#4
;;;242    {
000054  f1004080          ADD      r0,r0,#0x40000000
000058  f50040d8          ADD      r0,r0,#0x6c00
;;;243      __IO uint32_t tmp = 0;
;;;244    
;;;245      /* Check the parameters */
;;;246      assert_param(IS_BKP_DR(BKP_DR));
;;;247    
;;;248      tmp = (uint32_t)BKP_BASE; 
;;;249      tmp += BKP_DR;
;;;250    
;;;251      return (*(__IO uint16_t *) tmp);
00005c  9000              STR      r0,[sp,#0]
00005e  8800              LDRH     r0,[r0,#0]
;;;252    }
000060  b001              ADD      sp,sp,#4
000062  4770              BX       lr
;;;253    
                          ENDP

                  BKP_GetFlagStatus PROC
;;;258      */
;;;259    FlagStatus BKP_GetFlagStatus(void)
000064  480d              LDR      r0,|L1.156|
;;;260    {
;;;261      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000066  6800              LDR      r0,[r0,#0]
000068  b2c0              UXTB     r0,r0
;;;262    }
00006a  4770              BX       lr
;;;263    
                          ENDP

                  BKP_ClearFlag PROC
;;;268      */
;;;269    void BKP_ClearFlag(void)
00006c  480c              LDR      r0,|L1.160|
;;;270    {
;;;271      /* Set CTE bit to clear Tamper Pin Event flag */
;;;272      BKP->CSR |= BKP_CSR_CTE;
00006e  8801              LDRH     r1,[r0,#0]
000070  f0410101          ORR      r1,r1,#1
000074  8001              STRH     r1,[r0,#0]
;;;273    }
000076  4770              BX       lr
;;;274    
                          ENDP

                  BKP_GetITStatus PROC
;;;279      */
;;;280    ITStatus BKP_GetITStatus(void)
000078  480a              LDR      r0,|L1.164|
;;;281    {
;;;282      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
00007a  6800              LDR      r0,[r0,#0]
00007c  b2c0              UXTB     r0,r0
;;;283    }
00007e  4770              BX       lr
;;;284    
                          ENDP

                  BKP_ClearITPendingBit PROC
;;;289      */
;;;290    void BKP_ClearITPendingBit(void)
000080  4807              LDR      r0,|L1.160|
;;;291    {
;;;292      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;293      BKP->CSR |= BKP_CSR_CTI;
000082  8801              LDRH     r1,[r0,#0]
000084  f0410102          ORR      r1,r1,#2
000088  8001              STRH     r1,[r0,#0]
;;;294    }
00008a  4770              BX       lr
;;;295    
                          ENDP

                  |L1.140|
                          DCD      0x420d8604
                  |L1.144|
                          DCD      0x420d8600
                  |L1.148|
                          DCD      0x420d8688
                  |L1.152|
                          DCD      0x40006c2c
                  |L1.156|
                          DCD      0x420d86a0
                  |L1.160|
                          DCD      0x40006c34
                  |L1.164|
                          DCD      0x420d86a4
