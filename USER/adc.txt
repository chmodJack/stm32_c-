; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o..\obj\adc.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\adc.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\adc.crf ..\C++LIB\OnChip\ADC\ADC.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN3ADCC2Ehhhhhhhhhh                  ; Alternate entry point ; ADC::ADC__sub_object(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
                  _ZN3ADCC1Ehhhhhhhhhh PROC ; ADC::ADC(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
;;;9      //constructor: ADC and DMA initialize
;;;10     ADC::ADC(u8 ch0Num, u8 ch1Num, u8 ch2Num, u8 ch3Num, u8 ch4Num, u8 ch5Num, u8 ch6Num, u8 ch7Num, u8 ch8Num, u8 ch9Num)
;;;11     {
;;;12     	//Step 1: set adc channel enable flag
;;;13     	if(ch0Num<MAX_ADC_CHANNEL) _enCh[ch0Num] = true;
;;;14     	if(ch1Num<MAX_ADC_CHANNEL) _enCh[ch1Num] = true;
;;;15     	if(ch2Num<MAX_ADC_CHANNEL) _enCh[ch2Num] = true;
;;;16     	if(ch3Num<MAX_ADC_CHANNEL) _enCh[ch3Num] = true;
;;;17     	if(ch4Num<MAX_ADC_CHANNEL) _enCh[ch4Num] = true;
;;;18     	if(ch5Num<MAX_ADC_CHANNEL) _enCh[ch5Num] = true;
;;;19     	if(ch6Num<MAX_ADC_CHANNEL) _enCh[ch6Num] = true;
;;;20     	if(ch7Num<MAX_ADC_CHANNEL) _enCh[ch7Num] = true;
;;;21     	if(ch8Num<MAX_ADC_CHANNEL) _enCh[ch8Num] = true;
;;;22     	if(ch9Num<MAX_ADC_CHANNEL) _enCh[ch9Num] = true;
;;;23     	
;;;24     	//Step 2: initialize rcc and gpio
;;;25     	u16 pinA = 0, pinB = 0, chCnt = 0;
;;;26     	
;;;27     	for(int i=0; i<MAX_ADC_CHANNEL; i++)
;;;28     	{
;;;29     		if(_enCh[i])//enabled adc channel
;;;30     		{
;;;31     			chCnt++;                 //count the total number of enabled adc channel
;;;32     			if(i<8)	pinA |= _pin[i]; //all enabled adc pin in GPIOA
;;;33     			else    pinB |= _pin[i]; //all enabled adc pin in GPIOB
;;;34     		}
;;;35     	}	
;;;36     	GPIO_InitTypeDef GPIO_InitStructure;
;;;37     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN; //gpio pin mode: anology input
;;;38     	if(pinA) //initialize rcc and gpio in GPIOA
;;;39     	{
;;;40     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//open the PinA clock
;;;41     		GPIO_InitStructure.GPIO_Pin = pinA;									//Pin
;;;42     		GPIO_Init(GPIOA,&GPIO_InitStructure);			
;;;43     	}
;;;44     	if(pinB) //initialize rcc and gpio in GPIOB
;;;45     	{
;;;46     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);	
;;;47     		GPIO_InitStructure.GPIO_Pin = pinB;									
;;;48     		GPIO_Init(GPIOB,&GPIO_InitStructure);					
;;;49     	}
;;;50     	
;;;51     	//Step 3: Initialize DMA
;;;52     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);                         //DMA1 clock
;;;53     	DMA_InitTypeDef  DMA_InitStructure;
;;;54     	DMA_DeInit(DMA1_Channel1);                                                 //default set DMA1
;;;55     	DMA_InitStructure.DMA_PeripheralBaseAddr = u32(&(ADC1->DR));							 //ADC1->DR address
;;;56     	DMA_InitStructure.DMA_MemoryBaseAddr = u32(_adcValue);	                   //first address for save adc value
;;;57     	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;												 //以外设为DMA源
;;;58     	DMA_InitStructure.DMA_BufferSize = chCnt;                                  //数据转移量为mAdcTotal（1路AD）
;;;59     	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	         //外设地址不递增
;;;60     	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;  			    				 //内存地址不递增
;;;61     	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;//接下来的跟采集一路AD一样
;;;62     	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
;;;63     	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;										
;;;64     	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
;;;65     	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;66     	DMA_Init(DMA1_Channel1, &DMA_InitStructure);            //Initialize DMA channel
;;;67     	DMA_Cmd(DMA1_Channel1, ENABLE);                         //enable DMA channel
;;;68     	
;;;69     	//Step 4: Initialize ADC
;;;70     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);		//ADC1 clock
;;;71     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);   //alternativ function clock
;;;72     	RCC_ADCCLKConfig(RCC_PCLK2_Div6);	                    //adc clock div, adc clock should less than 14M 
;;;73     	
;;;74     	ADC_InitTypeDef  ADC_InitStructure;
;;;75     	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;									//
;;;76     	ADC_InitStructure.ADC_ScanConvMode = ENABLE;												//
;;;77     	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE; 									//Continuous Convertion
;;;78     	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	//
;;;79     	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;							//
;;;80     	ADC_InitStructure.ADC_NbrOfChannel = chCnt;											    //total adc channel	
;;;81     	ADC_Init(ADC1,&ADC_InitStructure);
;;;82     	
;;;83     	for(int i=MAX_ADC_CHANNEL-1; i>=0; i--)
;;;84     	{
;;;85     		if(_enCh[i])
;;;86     		{
;;;87     			ADC_RegularChannelConfig(ADC1, i, chCnt--, ADC_SampleTime_239Cycles5);
;;;88     			_chMap[i] = chCnt;  //map adc channel number to adc value array index _adcValue[_chMap[ADC Channel Number]]
;;;89     		}
;;;90     	}
;;;91     	ADC_DMACmd(ADC1,ENABLE);                   //enable DMA for ADC1
;;;92     	ADC_Cmd(ADC1,ENABLE);                      //enable ADC1
;;;93     	ADC_ResetCalibration(ADC1);								 //reset ADC1
;;;94     	while(ADC_GetResetCalibrationStatus(ADC1));//waiting for adc1 reset complete
;;;95     	ADC_StartCalibration(ADC1);								 //calibrate adc1 
;;;96     	while(ADC_GetCalibrationStatus(ADC1));		 //waiting for adc1 calibrate complete
;;;97     	ADC_SoftwareStartConvCmd(ADC1,ENABLE);     //start adc1	
;;;98     }
;;;99     //get adc channel votage value
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b091              SUB      sp,sp,#0x44
000006  4683              MOV      r11,r0
000008  e9dda01f          LDRD     r10,r0,[sp,#0x7c]
00000c  e9dd541c          LDRD     r5,r4,[sp,#0x70]
000010  e9dd961a          LDRD     r9,r6,[sp,#0x68]
000014  4f77              LDR      r7,|L1.500|
000016  f8ddc078          LDR      r12,[sp,#0x78]
00001a  f04f0801          MOV      r8,#1
00001e  290a              CMP      r1,#0xa
000020  bf38              IT       CC
000022  f8078001          STRBCC   r8,[r7,r1]
000026  2a0a              CMP      r2,#0xa
000028  bf38              IT       CC
00002a  f8078002          STRBCC   r8,[r7,r2]
00002e  2b0a              CMP      r3,#0xa
000030  bf38              IT       CC
000032  f8078003          STRBCC   r8,[r7,r3]
000036  f1b90f0a          CMP      r9,#0xa
00003a  bf38              IT       CC
00003c  f8078009          STRBCC   r8,[r7,r9]
000040  2e0a              CMP      r6,#0xa
000042  bf38              IT       CC
000044  f8078006          STRBCC   r8,[r7,r6]
000048  2d0a              CMP      r5,#0xa
00004a  bf38              IT       CC
00004c  f8078005          STRBCC   r8,[r7,r5]
000050  2c0a              CMP      r4,#0xa
000052  bf38              IT       CC
000054  f8078004          STRBCC   r8,[r7,r4]
000058  f1bc0f0a          CMP      r12,#0xa
00005c  bf38              IT       CC
00005e  f807800c          STRBCC   r8,[r7,r12]
000062  f1ba0f0a          CMP      r10,#0xa
000066  bf38              IT       CC
000068  f807800a          STRBCC   r8,[r7,r10]
00006c  280a              CMP      r0,#0xa
00006e  bf38              IT       CC
000070  f8078000          STRBCC   r8,[r7,r0]
000074  2600              MOVS     r6,#0
000076  495f              LDR      r1,|L1.500|
000078  485f              LDR      r0,|L1.504|
00007a  4635              MOV      r5,r6
00007c  4634              MOV      r4,r6
00007e  4632              MOV      r2,r6
000080  f05f030a          MOVS.W   r3,#0xa
                  |L1.132|
000084  f811cb01          LDRB     r12,[r1],#1
000088  f1bc0f00          CMP      r12,#0
00008c  d00b              BEQ      |L1.166|
00008e  f1040c01          ADD      r12,r4,#1
000092  fa1ff48c          UXTH     r4,r12
000096  f8b0c000          LDRH     r12,[r0,#0]
00009a  2a08              CMP      r2,#8
00009c  bfac              ITE      GE
00009e  ea4c0505          ORRGE    r5,r12,r5
0000a2  ea4c0606          ORRLT    r6,r12,r6
                  |L1.166|
0000a6  1c80              ADDS     r0,r0,#2
0000a8  1c52              ADDS     r2,r2,#1
0000aa  1e5b              SUBS     r3,r3,#1
0000ac  d1ea              BNE      |L1.132|
0000ae  4699              MOV      r9,r3
0000b0  f88d9043          STRB     r9,[sp,#0x43]
0000b4  b14e              CBZ      r6,|L1.202|
0000b6  2101              MOVS     r1,#1
0000b8  2004              MOVS     r0,#4
0000ba  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000be  f8ad6040          STRH     r6,[sp,#0x40]
0000c2  a910              ADD      r1,sp,#0x40
0000c4  484d              LDR      r0,|L1.508|
0000c6  f7fffffe          BL       GPIO_Init
                  |L1.202|
0000ca  b14d              CBZ      r5,|L1.224|
0000cc  2101              MOVS     r1,#1
0000ce  2008              MOVS     r0,#8
0000d0  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000d4  f8ad5040          STRH     r5,[sp,#0x40]
0000d8  a910              ADD      r1,sp,#0x40
0000da  4849              LDR      r0,|L1.512|
0000dc  f7fffffe          BL       GPIO_Init
                  |L1.224|
0000e0  2101              MOVS     r1,#1
0000e2  4608              MOV      r0,r1
0000e4  f7fffffe          BL       RCC_AHBPeriphClockCmd
0000e8  4d46              LDR      r5,|L1.516|
0000ea  4628              MOV      r0,r5
0000ec  f7fffffe          BL       DMA_DeInit
0000f0  4845              LDR      r0,|L1.520|
0000f2  9000              STR      r0,[sp,#0]
0000f4  4845              LDR      r0,|L1.524|
0000f6  9403              STR      r4,[sp,#0xc]
0000f8  e9cd0901          STRD     r0,r9,[sp,#4]
0000fc  2080              MOVS     r0,#0x80
0000fe  e9cd9004          STRD     r9,r0,[sp,#0x10]
000102  0040              LSLS     r0,r0,#1
000104  9006              STR      r0,[sp,#0x18]
000106  0080              LSLS     r0,r0,#2
000108  9007              STR      r0,[sp,#0x1c]
00010a  2020              MOVS     r0,#0x20
00010c  9008              STR      r0,[sp,#0x20]
00010e  0200              LSLS     r0,r0,#8
000110  e9cd0909          STRD     r0,r9,[sp,#0x24]
000114  4669              MOV      r1,sp
000116  4628              MOV      r0,r5
000118  f7fffffe          BL       DMA_Init
00011c  2101              MOVS     r1,#1
00011e  4628              MOV      r0,r5
000120  f7fffffe          BL       DMA_Cmd
000124  2101              MOVS     r1,#1
000126  0248              LSLS     r0,r1,#9
000128  f7fffffe          BL       RCC_APB2PeriphClockCmd
00012c  2101              MOVS     r1,#1
00012e  4608              MOV      r0,r1
000130  f7fffffe          BL       RCC_APB2PeriphClockCmd
000134  f44f4000          MOV      r0,#0x8000
000138  f7fffffe          BL       RCC_ADCCLKConfig
00013c  f88d8030          STRB     r8,[sp,#0x30]
000140  f8cd902c          STR      r9,[sp,#0x2c]
000144  f88d8031          STRB     r8,[sp,#0x31]
000148  f44f2060          MOV      r0,#0xe0000
00014c  e9cd090d          STRD     r0,r9,[sp,#0x34]
000150  4e2f              LDR      r6,|L1.528|
000152  f88d403c          STRB     r4,[sp,#0x3c]
000156  a90b              ADD      r1,sp,#0x2c
000158  4630              MOV      r0,r6
00015a  f7fffffe          BL       ADC_Init
00015e  f8df80b4          LDR      r8,|L1.532|
000162  2509              MOVS     r5,#9
                  |L1.356|
000164  5d78              LDRB     r0,[r7,r5]
000166  b148              CBZ      r0,|L1.380|
000168  b2e2              UXTB     r2,r4
00016a  1e60              SUBS     r0,r4,#1
00016c  b284              UXTH     r4,r0
00016e  b2e9              UXTB     r1,r5
000170  2307              MOVS     r3,#7
000172  4630              MOV      r0,r6
000174  f7fffffe          BL       ADC_RegularChannelConfig
000178  f8084005          STRB     r4,[r8,r5]
                  |L1.380|
00017c  1e6d              SUBS     r5,r5,#1
00017e  d5f1              BPL      |L1.356|
000180  2101              MOVS     r1,#1
000182  4630              MOV      r0,r6
000184  f7fffffe          BL       ADC_DMACmd
000188  2101              MOVS     r1,#1
00018a  4630              MOV      r0,r6
00018c  f7fffffe          BL       ADC_Cmd
000190  4630              MOV      r0,r6
000192  f7fffffe          BL       ADC_ResetCalibration
                  |L1.406|
000196  4630              MOV      r0,r6
000198  f7fffffe          BL       ADC_GetResetCalibrationStatus
00019c  2800              CMP      r0,#0
00019e  d1fa              BNE      |L1.406|
0001a0  4630              MOV      r0,r6
0001a2  f7fffffe          BL       ADC_StartCalibration
                  |L1.422|
0001a6  4630              MOV      r0,r6
0001a8  f7fffffe          BL       ADC_GetCalibrationStatus
0001ac  2800              CMP      r0,#0
0001ae  d1fa              BNE      |L1.422|
0001b0  2101              MOVS     r1,#1
0001b2  4630              MOV      r0,r6
0001b4  f7fffffe          BL       ADC_SoftwareStartConvCmd
0001b8  b011              ADD      sp,sp,#0x44
0001ba  4658              MOV      r0,r11
0001bc  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  _ZN3ADCixEh PROC ; ADC::operator [](unsigned char)
;;;100    double ADC::operator[](u8 chNum)
0001c0  290a              CMP      r1,#0xa
;;;101    {
;;;102    	if(chNum >= MAX_ADC_CHANNEL)//adc channel number check
;;;103    		return 0;      
0001c2  bf22              ITTT     CS
0001c4  2000              MOVCS    r0,#0
0001c6  4601              MOVCS    r1,r0
;;;104    	if(_enCh[chNum]) //if adc channel enabled
;;;105    		return _adcValue[_chMap[chNum]]*0.0008056640625;// 0.0008056640625 = 3.3v / 4096
;;;106    	else             //adc channel not enabled
;;;107    		return 0;
;;;108    }
0001c8  4770              BXCS     lr
0001ca  b510              PUSH     {r4,lr}               ;101
0001cc  4809              LDR      r0,|L1.500|
0001ce  5c40              LDRB     r0,[r0,r1]            ;104
0001d0  2800              CMP      r0,#0                 ;104
0001d2  bf04              ITT      EQ                    ;107
0001d4  2100              MOVEQ    r1,#0                 ;107
0001d6  bd10              POPEQ    {r4,pc}
0001d8  480e              LDR      r0,|L1.532|
0001da  5c40              LDRB     r0,[r0,r1]            ;105
0001dc  490b              LDR      r1,|L1.524|
0001de  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;105
0001e2  f7fffffe          BL       __aeabi_ui2d
0001e6  e8bd4010          POP      {r4,lr}               ;105
0001ea  f04f3266          MOV      r2,#0x66666666        ;105
0001ee  4b0a              LDR      r3,|L1.536|
0001f0  f7ffbffe          B.W      __aeabi_dmul
;;;109    
                          ENDP

                  |L1.500|
                          DCD      ||.bss||
                  |L1.504|
                          DCD      ||.data||
                  |L1.508|
                          DCD      0x40010800
                  |L1.512|
                          DCD      0x40010c00
                  |L1.516|
                          DCD      0x40020008
                  |L1.520|
                          DCD      0x4001244c
                  |L1.524|
                          DCD      ||.bss||+0x14
                  |L1.528|
                          DCD      0x40012400
                  |L1.532|
                          DCD      ||.bss||+0xa
                  |L1.536|
                          DCD      0x3f4a6666

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  _ZN3ADC5_enChE ; ADC::_enCh
                          %        10
                  _ZN3ADC6_chMapE ; ADC::_chMap
                          %        10
                  _ZN3ADC9_adcValueE ; ADC::_adcValue
                          %        20

                          AREA ||.data||, DATA, ALIGN=1

                  _ZN3ADC4_pinE ; ADC::_pin
000000  00010002          DCW      0x0001,0x0002
000004  00040008          DCW      0x0004,0x0008
000008  00100020          DCW      0x0010,0x0020
00000c  00400080          DCW      0x0040,0x0080
000010  00010002          DCW      0x0001,0x0002
