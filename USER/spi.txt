; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o..\obj\spi.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\spi.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\spi.crf ..\C++LIB\OnChip\SPI\SPI.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN3SPI17RCC_ConfigurationEv PROC ; SPI::RCC_Configuration()
;;;174    
;;;175    void SPI::RCC_Configuration(){
000000  b510              PUSH     {r4,lr}
;;;176    
;;;177    	/**-------RCC Configuration--------**/
;;;178    	if (SPIx == SPI1){
000002  f8d000b8          LDR      r0,[r0,#0xb8]
000006  f1a04180          SUB      r1,r0,#0x40000000
00000a  f5b13198          SUBS     r1,r1,#0x13000
00000e  d003              BEQ      |L1.24|
;;;179    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
;;;180    	}
;;;181    	else if (SPIx == SPI2){
000010  f5114178          ADDS     r1,r1,#0xf800
000014  d005              BEQ      |L1.34|
000016  e008              B        |L1.42|
                  |L1.24|
000018  2101              MOVS     r1,#1                 ;179
00001a  0308              LSLS     r0,r1,#12             ;179
00001c  f7fffffe          BL       RCC_APB2PeriphClockCmd
000020  e003              B        |L1.42|
                  |L1.34|
;;;182    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
000022  2101              MOVS     r1,#1
000024  0388              LSLS     r0,r1,#14
000026  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L1.42|
;;;183    	}
;;;184    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  e8bd4010          POP      {r4,lr}
000030  4608              MOV      r0,r1
000032  f7ffbffe          B.W      RCC_APB2PeriphClockCmd
;;;185    }
;;;186    
                          ENDP

                  _ZN3SPIC2EP11SPI_TypeDefbhhhhh                  ; Alternate entry point ; SPI::SPI__sub_object(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
                  _ZN3SPIC1EP11SPI_TypeDefbhhhhh PROC ; SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
;;;5      
;;;6      SPI::SPI(SPI_TypeDef* SPI, bool useDMA, u8 mRemap, u8 Prioritygroup, uint8_t preemprionPriority, uint8_t subPriority, u8 dmaPriority) :isBusySend(0){
;;;7      
;;;8      	SPIx = SPI;
;;;9      	isBusySend = 0;
;;;10     	mUseDma = useDMA;
;;;11     	GPIO_TypeDef* GPIOx;
;;;12     	SPI_InitTypeDef SPI_InitStructure;
;;;13     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;14     	uint8_t spiIrqChannel, dmaTxIrqChannel;//中断通道，SPI TXDMA通道
;;;15     
;;;16     	//*RCC_Configuration*//
;;;17     	RCC_Configuration();
;;;18     
;;;19     	/*GPIO Configuration*/
;;;20     	if (SPIx == SPI1){
;;;21     		spiIrqChannel = SPI1_IRQn;
;;;22     		GPIOx    = (mRemap ? GPIOB 								: GPIOA								);
;;;23     		mGPIORcc = (mRemap ? RCC_APB2Periph_GPIOB : RCC_APB2Periph_GPIOA);
;;;24     		mCSNPin  = (mRemap ? GPIO_Pin_15 					: GPIO_Pin_4          );   //CSN Pin
;;;25     		mSCKPin  = (mRemap ? GPIO_Pin_3 					: GPIO_Pin_5          );   //SCK Pin
;;;26     		mMISOPin = (mRemap ? GPIO_Pin_4 					: GPIO_Pin_6          );   //MISO Pin
;;;27     		mMOSIPin = (mRemap ? GPIO_Pin_5 					: GPIO_Pin_7          );   //MOSI Pin
;;;28     		
;;;29     #ifdef USE_SPI1
;;;30     		pSPI1 = this;
;;;31     #endif
;;;32     
;;;33     #ifdef USE_SPI1_DMA
;;;34     		dmaTxChannel = DMA1_Channel3;
;;;35     		dmaTxIrqChannel = DMA1_Channel3_IRQn;
;;;36     		dmaGLFlagChannel = DMA1_IT_GL3;
;;;37     		dmaTCFlagChannel = DMA1_IT_TC3;
;;;38     		dmaTEFlagChannel = DMA1_IT_TE3;
;;;39     		pSPI1 = this;
;;;40     #endif
;;;41     	}
;;;42     	else if (SPIx == SPI2){
;;;43     		spiIrqChannel = SPI1_IRQn;
;;;44     		GPIOx    = (mRemap ? GPIOB 								: GPIOB								);
;;;45     		mGPIORcc = (mRemap ? RCC_APB2Periph_GPIOB : RCC_APB2Periph_GPIOB);
;;;46     		mCSNPin  = (mRemap ? GPIO_Pin_9 					: GPIO_Pin_12          );   //CSN Pin
;;;47     		mSCKPin  = (mRemap ? GPIO_Pin_10 					: GPIO_Pin_13          );   //SCK Pin
;;;48     		mMISOPin = (mRemap ? GPIO_Pin_2 					: GPIO_Pin_14          );   //MISO Pin
;;;49     		mMOSIPin = (mRemap ? GPIO_Pin_3 					: GPIO_Pin_15          );   //MOSI Pin
;;;50     		
;;;51     #ifdef USE_SPI2
;;;52     		pSPI2 = this;
;;;53     #endif
;;;54     
;;;55     #ifdef USE_SPI2_DMA
;;;56     		dmaTxChannel = DMA1_Channel5;
;;;57     		dmaTxIrqChannel = DMA1_Channel5_IRQn;
;;;58     		dmaGLFlagChannel = DMA1_IT_GL5;
;;;59     		dmaTCFlagChannel = DMA1_IT_TC5;
;;;60     		dmaTEFlagChannel = DMA1_IT_TE5;
;;;61     		pSPI2 = this;
;;;62     #endif
;;;63     	}
;;;64     
;;;65     	RCC_APB2PeriphClockCmd(mGPIORcc, ENABLE);
;;;66     
;;;67     	/*************  GPIO Init  SCKPin MOSIPin MISOPin *************/
;;;68     	GPIO_InitStructure.GPIO_Pin = mSCKPin | mMOSIPin | mMISOPin;
;;;69     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;70     	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
;;;71     	GPIO_Init(GPIOx, &GPIO_InitStructure);
;;;72      	GPIO_SetBits(GPIOx, mSCKPin | mMISOPin | mMOSIPin);  //mSCKPin | mMOSIPin | mMISOPin上拉
;;;73     
;;;74     	/********************* SPI Configuration ****************************/
;;;75     	SPI_InitStructure.SPI_CRCPolynomial = 7;
;;;76     	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
;;;77     	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
;;;78     	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
;;;79     	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
;;;80     	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
;;;81     	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
;;;82     	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
;;;83     	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
;;;84     	SPI_Init(SPIx, &SPI_InitStructure);
;;;85     	SPI_Cmd(SPIx, ENABLE);
;;;86     
;;;87     	if (mUseDma){
;;;88     
;;;89     		DMA_InitTypeDef DMA_InitStructure;
;;;90     		SPI_I2S_DMACmd(SPIx, SPI_I2S_DMAReq_Tx, ENABLE);
;;;91     		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);										 /*开启DMA时钟*/
;;;92     		DMA_InitStructure.DMA_BufferSize = 1;													 			   //传输DMA_BufferSize 初始值设置为1
;;;93     		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;						 				 //方向：从内存到外设
;;;94     		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;								 //内存地址自增
;;;95     		DMA_InitStructure.DMA_MemoryBaseAddr = (u32)bufferTxDma;/*dmaChannelTx->CMAR =  (u32)bufferTxDma;*///内存地址（要传输的变量指针）
;;;96     		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&SPIx->DR;				 //设置DMA源，SPI数据寄存器地址
;;;97     		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;			 //外设地址不增
;;;98     		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;				 //外设数据单位8bit
;;;99     		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;//外设数据单位
;;;100    		DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;													 //DMA模式：不循环
;;;101    		switch (dmaPriority){
;;;102    			case 0:
;;;103    				DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
;;;104    				break;
;;;105    			case 1:
;;;106    				DMA_InitStructure.DMA_Priority = DMA_Priority_High;
;;;107    				break;
;;;108    			case 2:
;;;109    				DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
;;;110    				break;
;;;111    			default:
;;;112    				DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
;;;113    				break;
;;;114    		}
;;;115    
;;;116    		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;//禁止内存到内存的传输
;;;117    		DMA_Init(dmaTxChannel, &DMA_InitStructure);//配置DMA1的通道 Tx通道
;;;118    		DMA_Cmd(dmaTxChannel, DISABLE);//使能DMA
;;;119    		DMA_ITConfig(dmaTxChannel, DMA_IT_TC | DMA_IT_TE, ENABLE);//打开传输完成中断，打开错误中断
;;;120    	}
;;;121    	else {
;;;122    		//使能SPI 接收缓冲区非空，和发送缓冲区空，错误中断
;;;123    		SPI_I2S_ITConfig(SPIx, SPI_I2S_IT_RXNE | SPI_I2S_IT_ERR, ENABLE);
;;;124    		SPI_I2S_ITConfig(SPIx, SPI_I2S_IT_TXE, DISABLE);
;;;125    		SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE | SPI_I2S_FLAG_RXNE);//清除标志
;;;126    		SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE | SPI_I2S_FLAG_RXNE);
;;;127    		SPI_I2S_GetITStatus(SPIx, SPI_I2S_IT_TXE | SPI_I2S_IT_RXNE);
;;;128    		SPI_I2S_ClearITPendingBit(SPIx, SPI_I2S_IT_TXE | SPI_I2S_IT_RXNE | SPI_I2S_IT_ERR);
;;;129    	}
;;;130    
;;;131    	//中断优先级设置
;;;132    	NVIC_InitTypeDef NVIC_InitStructure;
;;;133    	switch (Prioritygroup){
;;;134    	case 0:
;;;135    		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
;;;136    		break;
;;;137    	case 1:
;;;138    		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
;;;139    		break;
;;;140    	case 2:
;;;141    		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
;;;142    		break;
;;;143    	default:
;;;144    		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_3);
;;;145    		break;
;;;146    	case 4:
;;;147    		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
;;;148    		break;
;;;149    	}
;;;150    
;;;151    	/******************SPI 中断注册************************/
;;;152    	NVIC_InitStructure.NVIC_IRQChannel = spiIrqChannel;
;;;153    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemprionPriority;
;;;154    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = subPriority;
;;;155    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;156    	NVIC_Init(&NVIC_InitStructure);
;;;157    
;;;158    	/******************DMA 中断注册************************/
;;;159    	if (mUseDma){
;;;160    		NVIC_InitStructure.NVIC_IRQChannel = dmaTxIrqChannel;
;;;161    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemprionPriority;
;;;162    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = subPriority;
;;;163    		NVIC_Init(&NVIC_InitStructure);
;;;164    	}
;;;165    }
;;;166    
000036  e92d4ff0          PUSH     {r4-r11,lr}
00003a  b097              SUB      sp,sp,#0x5c
00003c  4698              MOV      r8,r3
00003e  e9dda921          LDRD     r10,r9,[sp,#0x84]
000042  2340              MOVS     r3,#0x40
000044  f8a03040          STRH     r3,[r0,#0x40]
000048  2500              MOVS     r5,#0
00004a  f8a05042          STRH     r5,[r0,#0x42]
00004e  f8a05044          STRH     r5,[r0,#0x44]
000052  4604              MOV      r4,r0
000054  f8a05046          STRH     r5,[r0,#0x46]
000058  3048              ADDS     r0,r0,#0x48
00005a  f8dfb43c          LDR      r11,|L1.1176|
00005e  f8a03040          STRH     r3,[r0,#0x40]
000062  f8a05042          STRH     r5,[r0,#0x42]
000066  f8a05044          STRH     r5,[r0,#0x44]
00006a  f8a05046          STRH     r5,[r0,#0x46]
00006e  f88450b4          STRB     r5,[r4,#0xb4]
000072  f8c410b8          STR      r1,[r4,#0xb8]
000076  f88420b5          STRB     r2,[r4,#0xb5]
00007a  4608              MOV      r0,r1
00007c  4559              CMP      r1,r11
00007e  d104              BNE      |L1.138|
000080  2101              MOVS     r1,#1
000082  0308              LSLS     r0,r1,#12
000084  f7fffffe          BL       RCC_APB2PeriphClockCmd
000088  e008              B        |L1.156|
                  |L1.138|
00008a  f1a04180          SUB      r1,r0,#0x40000000
00008e  f5b15160          SUBS     r1,r1,#0x3800
000092  d103              BNE      |L1.156|
000094  2101              MOVS     r1,#1
000096  0388              LSLS     r0,r1,#14
000098  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L1.156|
00009c  2101              MOVS     r1,#1
00009e  4608              MOV      r0,r1
0000a0  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000a4  46dc              MOV      r12,r11
0000a6  f8d430b8          LDR      r3,[r4,#0xb8]
0000aa  4afc              LDR      r2,|L1.1180|
0000ac  2004              MOVS     r0,#4
0000ae  2108              MOVS     r1,#8
0000b0  f04f0b10          MOV      r11,#0x10
0000b4  4563              CMP      r3,r12
0000b6  d11c              BNE      |L1.242|
0000b8  2723              MOVS     r7,#0x23
0000ba  f1b80f00          CMP      r8,#0
0000be  d00b              BEQ      |L1.216|
0000c0  4616              MOV      r6,r2
0000c2  0342              LSLS     r2,r0,#13
0000c4  f8c410bc          STR      r1,[r4,#0xbc]
0000c8  f8a420c0          STRH     r2,[r4,#0xc0]
0000cc  f8a410c2          STRH     r1,[r4,#0xc2]
0000d0  f8a4b0c4          STRH     r11,[r4,#0xc4]
0000d4  2120              MOVS     r1,#0x20
0000d6  e02e              B        |L1.310|
                  |L1.216|
0000d8  f8c400bc          STR      r0,[r4,#0xbc]
0000dc  f8a4b0c0          STRH     r11,[r4,#0xc0]
0000e0  2120              MOVS     r1,#0x20
0000e2  f8a410c2          STRH     r1,[r4,#0xc2]
0000e6  2040              MOVS     r0,#0x40
0000e8  4eed              LDR      r6,|L1.1184|
0000ea  f8a400c4          STRH     r0,[r4,#0xc4]
0000ee  2180              MOVS     r1,#0x80
0000f0  e021              B        |L1.310|
                  |L1.242|
0000f2  f1a34c80          SUB      r12,r3,#0x40000000
0000f6  f5bc5c60          SUBS     r12,r12,#0x3800
0000fa  d11e              BNE      |L1.314|
0000fc  2723              MOVS     r7,#0x23
0000fe  4616              MOV      r6,r2
000100  f8c410bc          STR      r1,[r4,#0xbc]
000104  f1b80f00          CMP      r8,#0
000108  d00a              BEQ      |L1.288|
00010a  f44f7200          MOV      r2,#0x200
00010e  f8a420c0          STRH     r2,[r4,#0xc0]
000112  0052              LSLS     r2,r2,#1
000114  f8a420c2          STRH     r2,[r4,#0xc2]
000118  f8a400c4          STRH     r0,[r4,#0xc4]
00011c  2108              MOVS     r1,#8
00011e  e00a              B        |L1.310|
                  |L1.288|
000120  f44f5280          MOV      r2,#0x1000
000124  f8a420c0          STRH     r2,[r4,#0xc0]
000128  0052              LSLS     r2,r2,#1
00012a  0050              LSLS     r0,r2,#1
00012c  f8a420c2          STRH     r2,[r4,#0xc2]
000130  f8a400c4          STRH     r0,[r4,#0xc4]
000134  0041              LSLS     r1,r0,#1
                  |L1.310|
000136  f8a410c6          STRH     r1,[r4,#0xc6]
                  |L1.314|
00013a  2101              MOVS     r1,#1
00013c  f8d400bc          LDR      r0,[r4,#0xbc]
000140  f7fffffe          BL       RCC_APB2PeriphClockCmd
000144  f8b410c2          LDRH     r1,[r4,#0xc2]
000148  f8b400c6          LDRH     r0,[r4,#0xc6]
00014c  f04f0818          MOV      r8,#0x18
000150  4301              ORRS     r1,r1,r0
000152  f8b400c4          LDRH     r0,[r4,#0xc4]
000156  4308              ORRS     r0,r0,r1
000158  f8ad0054          STRH     r0,[sp,#0x54]
00015c  2003              MOVS     r0,#3
00015e  f88d0056          STRB     r0,[sp,#0x56]
000162  f88d8057          STRB     r8,[sp,#0x57]
000166  a915              ADD      r1,sp,#0x54
000168  4630              MOV      r0,r6
00016a  f7fffffe          BL       GPIO_Init
00016e  f8b410c2          LDRH     r1,[r4,#0xc2]
000172  f8b400c4          LDRH     r0,[r4,#0xc4]
000176  4301              ORRS     r1,r1,r0
000178  f8b400c6          LDRH     r0,[r4,#0xc6]
00017c  4301              ORRS     r1,r1,r0
00017e  4630              MOV      r0,r6
000180  f7fffffe          BL       GPIO_SetBits
000184  2007              MOVS     r0,#7
000186  f8ad004c          STRH     r0,[sp,#0x4c]
00018a  f44f7000          MOV      r0,#0x200
00018e  f8ad0046          STRH     r0,[sp,#0x46]
000192  f44f7082          MOV      r0,#0x104
000196  f8ad5042          STRH     r5,[sp,#0x42]
00019a  f8ad003e          STRH     r0,[sp,#0x3e]
00019e  f8ad504a          STRH     r5,[sp,#0x4a]
0001a2  f8ad5044          STRH     r5,[sp,#0x44]
0001a6  f8ad5040          STRH     r5,[sp,#0x40]
0001aa  f8ad503c          STRH     r5,[sp,#0x3c]
0001ae  f8ad8048          STRH     r8,[sp,#0x48]
0001b2  a90f              ADD      r1,sp,#0x3c
0001b4  f8d400b8          LDR      r0,[r4,#0xb8]
0001b8  f7fffffe          BL       SPI_Init
0001bc  2101              MOVS     r1,#1
0001be  f8d400b8          LDR      r0,[r4,#0xb8]
0001c2  f7fffffe          BL       SPI_Cmd
0001c6  f89400b5          LDRB     r0,[r4,#0xb5]
0001ca  2601              MOVS     r6,#1
0001cc  2800              CMP      r0,#0
0001ce  f8d400b8          LDR      r0,[r4,#0xb8]
0001d2  4632              MOV      r2,r6
0001d4  d03a              BEQ      |L1.588|
0001d6  2102              MOVS     r1,#2
0001d8  f7fffffe          BL       SPI_I2S_DMACmd
0001dc  2101              MOVS     r1,#1
0001de  4608              MOV      r0,r1
0001e0  f7fffffe          BL       RCC_AHBPeriphClockCmd
0001e4  2080              MOVS     r0,#0x80
0001e6  9008              STR      r0,[sp,#0x20]
0001e8  f1040090          ADD      r0,r4,#0x90
0001ec  e9cd0b04          STRD     r0,r11,[sp,#0x10]
0001f0  9606              STR      r6,[sp,#0x18]
0001f2  f8d400b8          LDR      r0,[r4,#0xb8]
0001f6  950a              STR      r5,[sp,#0x28]
0001f8  300c              ADDS     r0,r0,#0xc
0001fa  9003              STR      r0,[sp,#0xc]
0001fc  9823              LDR      r0,[sp,#0x8c]
0001fe  9507              STR      r5,[sp,#0x1c]
000200  9509              STR      r5,[sp,#0x24]
000202  950b              STR      r5,[sp,#0x2c]
000204  2800              CMP      r0,#0
000206  bf08              IT       EQ
000208  f44f5040          MOVEQ    r0,#0x3000
00020c  d01c              BEQ      |L1.584|
00020e  2801              CMP      r0,#1
000210  bf08              IT       EQ
000212  f44f5000          MOVEQ    r0,#0x2000
000216  d017              BEQ      |L1.584|
000218  2802              CMP      r0,#2
00021a  bf12              ITEE     NE
00021c  950c              STRNE    r5,[sp,#0x30]
00021e  f44f5080          MOVEQ    r0,#0x1000
000222  900c              STREQ    r0,[sp,#0x30]
                  |L1.548|
000224  950d              STR      r5,[sp,#0x34]
000226  a903              ADD      r1,sp,#0xc
000228  f8d400a4          LDR      r0,[r4,#0xa4]
00022c  f7fffffe          BL       DMA_Init
000230  2100              MOVS     r1,#0
000232  f8d400a4          LDR      r0,[r4,#0xa4]
000236  f7fffffe          BL       DMA_Cmd
00023a  2201              MOVS     r2,#1
00023c  210a              MOVS     r1,#0xa
00023e  f8d400a4          LDR      r0,[r4,#0xa4]
000242  f7fffffe          BL       DMA_ITConfig
000246  e01e              B        |L1.646|
                  |L1.584|
000248  900c              STR      r0,[sp,#0x30]
00024a  e7eb              B        |L1.548|
                  |L1.588|
00024c  2170              MOVS     r1,#0x70
00024e  f7fffffe          BL       SPI_I2S_ITConfig
000252  2200              MOVS     r2,#0
000254  2171              MOVS     r1,#0x71
000256  f8d400b8          LDR      r0,[r4,#0xb8]
00025a  f7fffffe          BL       SPI_I2S_ITConfig
00025e  2103              MOVS     r1,#3
000260  f8d400b8          LDR      r0,[r4,#0xb8]
000264  f7fffffe          BL       SPI_I2S_ClearFlag
000268  2103              MOVS     r1,#3
00026a  f8d400b8          LDR      r0,[r4,#0xb8]
00026e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000272  2171              MOVS     r1,#0x71
000274  f8d400b8          LDR      r0,[r4,#0xb8]
000278  f7fffffe          BL       SPI_I2S_GetITStatus
00027c  2171              MOVS     r1,#0x71
00027e  f8d400b8          LDR      r0,[r4,#0xb8]
000282  f7fffffe          BL       SPI_I2S_ClearITPendingBit
                  |L1.646|
000286  9820              LDR      r0,[sp,#0x80]
000288  2800              CMP      r0,#0
00028a  bf08              IT       EQ
00028c  f44f60e0          MOVEQ    r0,#0x700
000290  d00e              BEQ      |L1.688|
000292  2801              CMP      r0,#1
000294  bf08              IT       EQ
000296  f44f60c0          MOVEQ    r0,#0x600
00029a  d009              BEQ      |L1.688|
00029c  2802              CMP      r0,#2
00029e  bf08              IT       EQ
0002a0  f44f60a0          MOVEQ    r0,#0x500
0002a4  d004              BEQ      |L1.688|
0002a6  2804              CMP      r0,#4
0002a8  bf18              IT       NE
0002aa  f44f6080          MOVNE    r0,#0x400
0002ae  d002              BEQ      |L1.694|
                  |L1.688|
0002b0  f7fffffe          BL       NVIC_PriorityGroupConfig
0002b4  e003              B        |L1.702|
                  |L1.694|
0002b6  f44f7040          MOV      r0,#0x300
0002ba  f7fffffe          BL       NVIC_PriorityGroupConfig
                  |L1.702|
0002be  f88d7008          STRB     r7,[sp,#8]
0002c2  f88da009          STRB     r10,[sp,#9]
0002c6  f88d900a          STRB     r9,[sp,#0xa]
0002ca  f88d600b          STRB     r6,[sp,#0xb]
0002ce  a802              ADD      r0,sp,#8
0002d0  f7fffffe          BL       NVIC_Init
0002d4  f89400b5          LDRB     r0,[r4,#0xb5]
0002d8  b140              CBZ      r0,|L1.748|
0002da  f88d4008          STRB     r4,[sp,#8]
0002de  f88da009          STRB     r10,[sp,#9]
0002e2  f88d900a          STRB     r9,[sp,#0xa]
0002e6  a802              ADD      r0,sp,#8
0002e8  f7fffffe          BL       NVIC_Init
                  |L1.748|
0002ec  b017              ADD      sp,sp,#0x5c
0002ee  4620              MOV      r0,r4
0002f0  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  _ZN3SPID2Ev                  ; Alternate entry point ; SPI::~SPI__sub_object()
                  _ZN3SPID1Ev PROC ; SPI::~SPI()
;;;318    
;;;319    SPI::~SPI(){
;;;320    	if(SPI1 == SPIx){
;;;321    #ifdef USE_SPI1
;;;322    		pSPI1 = this;
;;;323    #endif
;;;324    	}else if(SPI2 == SPIx){
;;;325    #ifdef USE_SPI2
;;;326    		pSPI2 = this;
;;;327    #endif
;;;328    	}
;;;329    }
;;;330    
0002f4  4770              BX       lr
                          ENDP

                  _ZN3SPI6SPI_RWEh PROC ; SPI::SPI_RW(unsigned char)
;;;186    
;;;187    u8 SPI::SPI_RW(u8 dat){
0002f6  b570              PUSH     {r4-r6,lr}
0002f8  460d              MOV      r5,r1
0002fa  4604              MOV      r4,r0
                  |L1.764|
;;;188    
;;;189    	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET); //当 SPI发送缓冲器非空时等待 
0002fc  2102              MOVS     r1,#2
0002fe  f8d400b8          LDR      r0,[r4,#0xb8]
000302  f7fffffe          BL       SPI_I2S_GetFlagStatus
000306  2800              CMP      r0,#0
000308  d0f8              BEQ      |L1.764|
;;;190    	SPI_I2S_SendData(SPIx, dat);	                                  //通过 SPIx发送一字节数据	
00030a  4629              MOV      r1,r5
00030c  f8d400b8          LDR      r0,[r4,#0xb8]
000310  f7fffffe          BL       SPI_I2S_SendData
                  |L1.788|
;;;191    	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);//当SPI接收缓冲器为空时等待
000314  2101              MOVS     r1,#1
000316  f8d400b8          LDR      r0,[r4,#0xb8]
00031a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00031e  2800              CMP      r0,#0
000320  d0f8              BEQ      |L1.788|
;;;192    	return SPI_I2S_ReceiveData(SPIx);                               //Return the byte read from the SPI bus
000322  f8d400b8          LDR      r0,[r4,#0xb8]
000326  f7fffffe          BL       SPI_I2S_ReceiveData
00032a  b2c0              UXTB     r0,r0
;;;193    }
00032c  bd70              POP      {r4-r6,pc}
;;;194    
                          ENDP

                  _ZN3SPI8SendDataEPhj PROC ; SPI::SendData(unsigned char*, unsigned)
;;;195    bool SPI::SendData(uint8_t *pbuffer, uint32_t size){
00032e  b570              PUSH     {r4-r6,lr}
;;;196    
;;;197    	isBusySend = false;
000330  2300              MOVS     r3,#0
000332  4604              MOV      r4,r0                 ;195
000334  f88030b4          STRB     r3,[r0,#0xb4]
000338  f8b00042          LDRH     r0,[r0,#0x42]
;;;198    	SPIbufferTx.Puts(pbuffer, size);//将发送的数据放入发送缓冲区队列
00033c  b292              UXTH     r2,r2
00033e  f8b4c040          LDRH     r12,[r4,#0x40]
000342  4410              ADD      r0,r0,r2
000344  4560              CMP      r0,r12
000346  d81d              BHI      |L1.900|
000348  2000              MOVS     r0,#0                 ;195
00034a  2a00              CMP      r2,#0                 ;195
00034c  d915              BLS      |L1.890|
                  |L1.846|
00034e  f8b46046          LDRH     r6,[r4,#0x46]         ;195
000352  5c0d              LDRB     r5,[r1,r0]            ;195
000354  55a5              STRB     r5,[r4,r6]            ;195
000356  f8b4c046          LDRH     r12,[r4,#0x46]        ;195
00035a  f10c0c01          ADD      r12,r12,#1            ;195
00035e  fa1ffc8c          UXTH     r12,r12               ;195
000362  f8a4c046          STRH     r12,[r4,#0x46]        ;195
000366  f8b45040          LDRH     r5,[r4,#0x40]         ;195
00036a  45ac              CMP      r12,r5                ;195
00036c  bf28              IT       CS                    ;195
00036e  f8a43046          STRHCS   r3,[r4,#0x46]         ;195
000372  1c40              ADDS     r0,r0,#1              ;195
000374  b280              UXTH     r0,r0                 ;195
000376  4290              CMP      r0,r2                 ;195
000378  d3e9              BCC      |L1.846|
                  |L1.890|
00037a  f8b40042          LDRH     r0,[r4,#0x42]         ;195
00037e  4410              ADD      r0,r0,r2              ;195
000380  f8a40042          STRH     r0,[r4,#0x42]         ;195
                  |L1.900|
;;;199    	if (mUseDma && !isBusySend){//使用DMA发送数据
000384  f89400b5          LDRB     r0,[r4,#0xb5]
;;;200    		if(SPIbufferTx.Size()>0){
;;;201    			isBusySend = true;
000388  2101              MOVS     r1,#1
00038a  2800              CMP      r0,#0                 ;199
;;;202    			if(SPIbufferTx.Size()<=SPI_DMA_TX_BUFFER_SIZE){
;;;203    				dmaTxChannel->CNDTR = SPIbufferTx.Size(); //设置DMA待传输数据数目
;;;204    				SPIbufferTx.Gets(bufferTxDma, SPIbufferTx.Size());//将剩下的数据放入DMA缓冲区
;;;205    			}else{
;;;206    				dmaTxChannel->CNDTR = SPI_DMA_TX_BUFFER_SIZE;
;;;207    				SPIbufferTx.Gets(bufferTxDma, SPI_DMA_TX_BUFFER_SIZE);//传输数据
;;;208    			}
;;;209    			DMA_Cmd(dmaTxChannel,ENABLE);
;;;210    		}
;;;211    	}
;;;212    	else if (!mUseDma && !isBusySend){//使用中断发送
00038c  f89400b4          LDRB     r0,[r4,#0xb4]
000390  d05d              BEQ      |L1.1102|
000392  2800              CMP      r0,#0                 ;199
000394  d15c              BNE      |L1.1104|
000396  f8b40042          LDRH     r0,[r4,#0x42]         ;200
00039a  2800              CMP      r0,#0                 ;200
00039c  d07b              BEQ      |L1.1174|
00039e  f88410b4          STRB     r1,[r4,#0xb4]         ;201
0003a2  2814              CMP      r0,#0x14              ;202
0003a4  d82d              BHI      |L1.1026|
0003a6  f8d410a4          LDR      r1,[r4,#0xa4]         ;203
0003aa  6048              STR      r0,[r1,#4]            ;203
0003ac  f8b41042          LDRH     r1,[r4,#0x42]         ;203
0003b0  2000              MOVS     r0,#0                 ;203
0003b2  f1040290          ADD      r2,r4,#0x90           ;204
0003b6  2900              CMP      r1,#0                 ;204
0003b8  d918              BLS      |L1.1004|
0003ba  bf00              NOP                            ;204
                  |L1.956|
0003bc  f8b45044          LDRH     r5,[r4,#0x44]         ;204
0003c0  f814c005          LDRB     r12,[r4,r5]           ;204
0003c4  f802c000          STRB     r12,[r2,r0]           ;204
0003c8  f8b4c044          LDRH     r12,[r4,#0x44]        ;204
0003cc  f10c0c01          ADD      r12,r12,#1            ;204
0003d0  fa1ffc8c          UXTH     r12,r12               ;204
0003d4  f8a4c044          STRH     r12,[r4,#0x44]        ;204
0003d8  f8b45040          LDRH     r5,[r4,#0x40]         ;204
0003dc  45ac              CMP      r12,r5                ;204
0003de  bf28              IT       CS                    ;204
0003e0  f8a43044          STRHCS   r3,[r4,#0x44]         ;204
0003e4  1c40              ADDS     r0,r0,#1              ;204
0003e6  b280              UXTH     r0,r0                 ;204
0003e8  4288              CMP      r0,r1                 ;204
0003ea  d3e7              BCC      |L1.956|
                  |L1.1004|
0003ec  f8b40042          LDRH     r0,[r4,#0x42]         ;204
0003f0  1a40              SUBS     r0,r0,r1              ;204
0003f2  f8a40042          STRH     r0,[r4,#0x42]         ;204
                  |L1.1014|
0003f6  2101              MOVS     r1,#1                 ;209
0003f8  f8d400a4          LDR      r0,[r4,#0xa4]         ;209
0003fc  f7fffffe          BL       DMA_Cmd
000400  e05f              B        |L1.1218|
                  |L1.1026|
000402  f8d410a4          LDR      r1,[r4,#0xa4]         ;206
000406  2014              MOVS     r0,#0x14              ;206
000408  6048              STR      r0,[r1,#4]            ;206
00040a  4601              MOV      r1,r0                 ;207
00040c  f8b40042          LDRH     r0,[r4,#0x42]         ;207
000410  f1040290          ADD      r2,r4,#0x90           ;207
000414  2814              CMP      r0,#0x14              ;207
000416  bf28              IT       CS                    ;207
000418  2000              MOVCS    r0,#0                 ;207
00041a  d3ec              BCC      |L1.1014|
                  |L1.1052|
00041c  f8b45044          LDRH     r5,[r4,#0x44]         ;207
000420  f814c005          LDRB     r12,[r4,r5]           ;207
000424  f802c000          STRB     r12,[r2,r0]           ;207
000428  f8b4c044          LDRH     r12,[r4,#0x44]        ;207
00042c  f10c0c01          ADD      r12,r12,#1            ;207
000430  fa1ffc8c          UXTH     r12,r12               ;207
000434  f8a4c044          STRH     r12,[r4,#0x44]        ;207
000438  f8b45040          LDRH     r5,[r4,#0x40]         ;207
00043c  45ac              CMP      r12,r5                ;207
00043e  bf28              IT       CS                    ;207
000440  f8a43044          STRHCS   r3,[r4,#0x44]         ;207
000444  1c40              ADDS     r0,r0,#1              ;207
000446  b280              UXTH     r0,r0                 ;207
000448  4288              CMP      r0,r1                 ;207
00044a  d3e7              BCC      |L1.1052|
00044c  e7ce              B        |L1.1004|
                  |L1.1102|
00044e  b108              CBZ      r0,|L1.1108|
                  |L1.1104|
;;;213    		if (SPIbufferTx.Size() > 0){
;;;214    			isBusySend = true;
;;;215    			static u8 dataToSend = 0;
;;;216    			SPIbufferTx.Get(dataToSend);
;;;217    			SPI_I2S_SendData(SPIx, dataToSend);
;;;218    			SPI_I2S_ClearITPendingBit(SPIx, SPI_I2S_IT_TXE);
;;;219    			SPI_I2S_ITConfig(SPIx, SPI_I2S_IT_TXE, ENABLE);
;;;220    			SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE);
;;;221    		}
;;;222    	}
;;;223    	else if (isBusySend){//正在发送数据 或者发生错误
;;;224    		return false;
000450  2000              MOVS     r0,#0
;;;225    	}
;;;226    	return true;
;;;227    }
000452  bd70              POP      {r4-r6,pc}
                  |L1.1108|
000454  f8b40042          LDRH     r0,[r4,#0x42]         ;213
000458  b1e8              CBZ      r0,|L1.1174|
00045a  f88410b4          STRB     r1,[r4,#0xb4]         ;214
00045e  f8b40044          LDRH     r0,[r4,#0x44]         ;214
000462  1c41              ADDS     r1,r0,#1              ;214
000464  b28a              UXTH     r2,r1                 ;214
000466  f8a42044          STRH     r2,[r4,#0x44]         ;214
00046a  5c21              LDRB     r1,[r4,r0]            ;214
00046c  480d              LDR      r0,|L1.1188|
00046e  7001              STRB     r1,[r0,#0]            ;214
000470  f8b40040          LDRH     r0,[r4,#0x40]         ;214
000474  4282              CMP      r2,r0                 ;214
000476  bf28              IT       CS                    ;214
000478  f8a43044          STRHCS   r3,[r4,#0x44]         ;214
00047c  f8b40042          LDRH     r0,[r4,#0x42]         ;214
000480  1e40              SUBS     r0,r0,#1              ;214
000482  f8a40042          STRH     r0,[r4,#0x42]         ;214
000486  f8d400b8          LDR      r0,[r4,#0xb8]         ;217
00048a  f7fffffe          BL       SPI_I2S_SendData
00048e  2171              MOVS     r1,#0x71              ;218
000490  f8d400b8          LDR      r0,[r4,#0xb8]         ;218
000494  e008              B        |L1.1192|
                  |L1.1174|
000496  e014              B        |L1.1218|
                  |L1.1176|
                          DCD      0x40013000
                  |L1.1180|
                          DCD      0x40010c00
                  |L1.1184|
                          DCD      0x40010800
                  |L1.1188|
                          DCD      ||.data||
                  |L1.1192|
0004a8  f7fffffe          BL       SPI_I2S_ClearITPendingBit
0004ac  2201              MOVS     r2,#1                 ;219
0004ae  2171              MOVS     r1,#0x71              ;219
0004b0  f8d400b8          LDR      r0,[r4,#0xb8]         ;219
0004b4  f7fffffe          BL       SPI_I2S_ITConfig
0004b8  2102              MOVS     r1,#2                 ;220
0004ba  f8d400b8          LDR      r0,[r4,#0xb8]         ;220
0004be  f7fffffe          BL       SPI_I2S_GetFlagStatus
                  |L1.1218|
0004c2  2001              MOVS     r0,#1                 ;226
0004c4  bd70              POP      {r4-r6,pc}
;;;228    
                          ENDP

                  _ZN3SPI15GetReceivedDataEPht PROC ; SPI::GetReceivedData(unsigned char*, unsigned short)
;;;229    bool SPI::GetReceivedData(u8* buffer, u16 number){
0004c6  f8b0308a          LDRH     r3,[r0,#0x8a]
;;;230    	if (SPIbufferRx.Size() < number){
0004ca  429a              CMP      r2,r3
;;;231    		return false;
0004cc  bf84              ITT      HI
0004ce  2000              MOVHI    r0,#0
;;;232    	} else {
;;;233    		SPIbufferRx.Gets(buffer, number);
;;;234    		return true;
;;;235    	}
;;;236    }
0004d0  4770              BXHI     lr
0004d2  b430              PUSH     {r4,r5}               ;229
0004d4  2300              MOVS     r3,#0                 ;229
0004d6  3048              ADDS     r0,r0,#0x48           ;229
0004d8  2a00              CMP      r2,#0                 ;229
0004da  bf88              IT       HI                    ;229
0004dc  2400              MOVHI    r4,#0                 ;229
0004de  d917              BLS      |L1.1296|
                  |L1.1248|
0004e0  f8b0c044          LDRH     r12,[r0,#0x44]        ;231
0004e4  f810c00c          LDRB     r12,[r0,r12]          ;231
0004e8  f801c003          STRB     r12,[r1,r3]           ;231
0004ec  f8b0c044          LDRH     r12,[r0,#0x44]        ;231
0004f0  f10c0c01          ADD      r12,r12,#1            ;231
0004f4  fa1ffc8c          UXTH     r12,r12               ;231
0004f8  f8a0c044          STRH     r12,[r0,#0x44]        ;231
0004fc  f8b05040          LDRH     r5,[r0,#0x40]         ;231
000500  45ac              CMP      r12,r5                ;231
000502  bf28              IT       CS                    ;231
000504  f8a04044          STRHCS   r4,[r0,#0x44]         ;231
000508  1c5b              ADDS     r3,r3,#1              ;231
00050a  b29b              UXTH     r3,r3                 ;231
00050c  4293              CMP      r3,r2                 ;231
00050e  d3e7              BCC      |L1.1248|
                  |L1.1296|
000510  f8b01042          LDRH     r1,[r0,#0x42]         ;231
000514  1a89              SUBS     r1,r1,r2              ;231
000516  f8a01042          STRH     r1,[r0,#0x42]         ;231
00051a  bc30              POP      {r4,r5}
00051c  2001              MOVS     r0,#1                 ;234
00051e  4770              BX       lr
;;;237    
                          ENDP

                  _ZN3SPI8SetSpeedEh PROC ; SPI::SetSpeed(unsigned char)
;;;166    
;;;167    void SPI::SetSpeed(u8 SPI_BaudRatePrescaler)
000520  488d              LDR      r0,|L1.1880|
;;;168    {
;;;169      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));
;;;170    	SPI1->CR1&=0XFFC7;
000522  8802              LDRH     r2,[r0,#0]
000524  f0220238          BIC      r2,r2,#0x38
000528  8002              STRH     r2,[r0,#0]
;;;171    	SPI1->CR1|=SPI_BaudRatePrescaler;	//设置SPI2速度 
00052a  8802              LDRH     r2,[r0,#0]
00052c  4311              ORRS     r1,r1,r2
00052e  8001              STRH     r1,[r0,#0]
;;;172    	SPI_Cmd(SPI1,ENABLE); 
000530  2101              MOVS     r1,#1
000532  f7ffbffe          B.W      SPI_Cmd
;;;173    } 
;;;174    
                          ENDP

                  _ZN3SPI17ReceiveBufferSizeEv PROC ; SPI::ReceiveBufferSize()
;;;302    
;;;303    u16 SPI::ReceiveBufferSize(){
000536  f8b0008a          LDRH     r0,[r0,#0x8a]
;;;304    	return SPIbufferRx.Size();
;;;305    }
00053a  4770              BX       lr
;;;306    
                          ENDP

                  _ZN3SPI14SendBufferSizeEv PROC ; SPI::SendBufferSize()
;;;307    u16 SPI::SendBufferSize(){
00053c  f8b00042          LDRH     r0,[r0,#0x42]
;;;308    	return SPIbufferTx.Size();
;;;309    }
000540  4770              BX       lr
;;;310    
                          ENDP

                  _ZN3SPI18ClearReceiveBufferEv PROC ; SPI::ClearReceiveBuffer()
;;;311    void SPI::ClearReceiveBuffer(){
000542  2100              MOVS     r1,#0
000544  f8a0108a          STRH     r1,[r0,#0x8a]
000548  f8a0108c          STRH     r1,[r0,#0x8c]
00054c  f8a0108e          STRH     r1,[r0,#0x8e]
;;;312    	SPIbufferRx.Clear();
;;;313    }
000550  4770              BX       lr
;;;314    
                          ENDP

                  _ZN3SPI15ClearSendBufferEv PROC ; SPI::ClearSendBuffer()
;;;315    void SPI::ClearSendBuffer(){
000552  2100              MOVS     r1,#0
000554  f8a01042          STRH     r1,[r0,#0x42]
000558  f8a01044          STRH     r1,[r0,#0x44]
00055c  f8a01046          STRH     r1,[r0,#0x46]
;;;316    	SPIbufferTx.Clear();
;;;317    }
000560  4770              BX       lr
;;;318    
                          ENDP

                  _ZN3SPI6SpiIrqEv PROC ; SPI::SpiIrq()
;;;237    
;;;238    SPIIrqType SPI::SpiIrq(){
000562  b570              PUSH     {r4-r6,lr}
000564  4604              MOV      r4,r0
;;;239    
;;;240    	SPIIrqType IrqType;
;;;241    	if (SPI_I2S_GetITStatus(SPIx, SPI_I2S_IT_RXNE) == SET){//接收缓冲区非空
000566  f8d000b8          LDR      r0,[r0,#0xb8]
00056a  2160              MOVS     r1,#0x60
00056c  f7fffffe          BL       SPI_I2S_GetITStatus
000570  2600              MOVS     r6,#0
000572  2801              CMP      r0,#1
000574  f8d400b8          LDR      r0,[r4,#0xb8]
000578  d00c              BEQ      |L1.1428|
;;;242    
;;;243    		SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE);
;;;244    		SPI_I2S_ClearITPendingBit(SPIx, SPI_I2S_IT_RXNE);//清除中断标志
;;;245    		SPIbufferRx.Put(SPI_I2S_ReceiveData(SPIx));
;;;246    		IrqType = SPI_RXNE_IRQ;
;;;247    	}
;;;248    	else if (SPI_I2S_GetITStatus(SPIx, SPI_I2S_IT_TXE) == SET){//发送缓冲区空
00057a  2171              MOVS     r1,#0x71
00057c  f7fffffe          BL       SPI_I2S_GetITStatus
000580  2801              CMP      r0,#1
000582  f8d400b8          LDR      r0,[r4,#0xb8]
000586  d02f              BEQ      |L1.1512|
;;;249    		
;;;250    		static u8 dataToSend = 0;
;;;251    		SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE);
;;;252    		SPI_I2S_ClearITPendingBit(SPIx, SPI_I2S_IT_TXE);//清除中断标志
;;;253    		if (SPIbufferTx.Size() > 0){
;;;254    			SPIbufferTx.Get(dataToSend);
;;;255    			SPI_I2S_SendData(SPIx, dataToSend);//发送缓冲区不为空，发送数据
;;;256    		}
;;;257    		else if (SPIbufferTx.Size() == 0){
;;;258    			SPI_I2S_ITConfig(SPIx, SPI_I2S_IT_TXE, DISABLE);//发送缓冲区空，关闭中断
;;;259    			isBusySend = false;
;;;260    		}
;;;261    		IrqType = SPI_TXE_IRQ;
;;;262    	}
;;;263    	else if (SPI_I2S_GetITStatus(SPIx, SPI_I2S_IT_ERR) == SET){//错误中断
000588  2150              MOVS     r1,#0x50
00058a  f7fffffe          BL       SPI_I2S_GetITStatus
00058e  2801              CMP      r0,#1
000590  d058              BEQ      |L1.1604|
000592  e064              B        |L1.1630|
                  |L1.1428|
000594  2101              MOVS     r1,#1                 ;243
000596  f7fffffe          BL       SPI_I2S_GetFlagStatus
00059a  2160              MOVS     r1,#0x60              ;244
00059c  f8d400b8          LDR      r0,[r4,#0xb8]         ;244
0005a0  f7fffffe          BL       SPI_I2S_ClearITPendingBit
0005a4  f1040548          ADD      r5,r4,#0x48           ;245
0005a8  f8d400b8          LDR      r0,[r4,#0xb8]         ;245
0005ac  f7fffffe          BL       SPI_I2S_ReceiveData
0005b0  f8b51042          LDRH     r1,[r5,#0x42]         ;245
0005b4  f8b52040          LDRH     r2,[r5,#0x40]         ;245
0005b8  b2c0              UXTB     r0,r0                 ;245
0005ba  4291              CMP      r1,r2                 ;245
0005bc  d212              BCS      |L1.1508|
0005be  f8b51046          LDRH     r1,[r5,#0x46]         ;245
0005c2  1c4a              ADDS     r2,r1,#1              ;245
0005c4  f8a52046          STRH     r2,[r5,#0x46]         ;245
0005c8  5468              STRB     r0,[r5,r1]            ;245
0005ca  f8b50046          LDRH     r0,[r5,#0x46]         ;245
0005ce  f8b51040          LDRH     r1,[r5,#0x40]         ;245
0005d2  4288              CMP      r0,r1                 ;245
0005d4  bf28              IT       CS                    ;245
0005d6  f8a56046          STRHCS   r6,[r5,#0x46]         ;245
0005da  f8b50042          LDRH     r0,[r5,#0x42]         ;245
0005de  1c40              ADDS     r0,r0,#1              ;245
0005e0  f8a50042          STRH     r0,[r5,#0x42]         ;245
                  |L1.1508|
0005e4  2500              MOVS     r5,#0                 ;246
0005e6  e03a              B        |L1.1630|
                  |L1.1512|
0005e8  2102              MOVS     r1,#2                 ;251
0005ea  f7fffffe          BL       SPI_I2S_GetFlagStatus
0005ee  2171              MOVS     r1,#0x71              ;252
0005f0  f8d400b8          LDR      r0,[r4,#0xb8]         ;252
0005f4  f7fffffe          BL       SPI_I2S_ClearITPendingBit
0005f8  f8b40042          LDRH     r0,[r4,#0x42]         ;253
0005fc  b1c0              CBZ      r0,|L1.1584|
0005fe  f8b41044          LDRH     r1,[r4,#0x44]         ;253
000602  4a56              LDR      r2,|L1.1884|
000604  1c48              ADDS     r0,r1,#1              ;253
000606  b280              UXTH     r0,r0                 ;253
000608  f8a40044          STRH     r0,[r4,#0x44]         ;253
00060c  5c61              LDRB     r1,[r4,r1]            ;253
00060e  7011              STRB     r1,[r2,#0]            ;253
000610  f8b42040          LDRH     r2,[r4,#0x40]         ;253
000614  4290              CMP      r0,r2                 ;253
000616  bf28              IT       CS                    ;253
000618  f8a46044          STRHCS   r6,[r4,#0x44]         ;253
00061c  f8b40042          LDRH     r0,[r4,#0x42]         ;253
000620  1e40              SUBS     r0,r0,#1              ;253
000622  f8a40042          STRH     r0,[r4,#0x42]         ;253
000626  f8d400b8          LDR      r0,[r4,#0xb8]         ;255
00062a  f7fffffe          BL       SPI_I2S_SendData
00062e  e007              B        |L1.1600|
                  |L1.1584|
000630  2200              MOVS     r2,#0                 ;258
000632  2171              MOVS     r1,#0x71              ;258
000634  f8d400b8          LDR      r0,[r4,#0xb8]         ;258
000638  f7fffffe          BL       SPI_I2S_ITConfig
00063c  f88460b4          STRB     r6,[r4,#0xb4]         ;259
                  |L1.1600|
000640  2501              MOVS     r5,#1                 ;261
000642  e00c              B        |L1.1630|
                  |L1.1604|
;;;264    
;;;265    		SPI_I2S_GetITStatus(SPIx, SPI_I2S_IT_ERR);
000644  2150              MOVS     r1,#0x50
000646  f8d400b8          LDR      r0,[r4,#0xb8]
00064a  f7fffffe          BL       SPI_I2S_GetITStatus
;;;266    		SPI_I2S_ClearITPendingBit(SPIx, SPI_I2S_IT_ERR);//清除中断标志
00064e  2150              MOVS     r1,#0x50
000650  f8d400b8          LDR      r0,[r4,#0xb8]
000654  f7fffffe          BL       SPI_I2S_ClearITPendingBit
;;;267    		IrqType = SPI_ERR_IRQ;
000658  2502              MOVS     r5,#2
;;;268    		isBusySend = false;
00065a  f88460b4          STRB     r6,[r4,#0xb4]
                  |L1.1630|
;;;269    	}
;;;270    	return IrqType;
00065e  4628              MOV      r0,r5
;;;271    }
000660  bd70              POP      {r4-r6,pc}
;;;272    
                          ENDP

                  _ZN3SPI6DmaIrqEv PROC ; SPI::DmaIrq()
;;;273    DMAIrqType SPI::DmaIrq(){
000662  b570              PUSH     {r4-r6,lr}
000664  4604              MOV      r4,r0
;;;274    	
;;;275    	DMAIrqType IrqType;
;;;276    	if(DMA_GetITStatus(dmaTCFlagChannel) == SET){//传输完成中断
000666  f8d000a8          LDR      r0,[r0,#0xa8]
00066a  f7fffffe          BL       DMA_GetITStatus
00066e  2500              MOVS     r5,#0
000670  2801              CMP      r0,#1
000672  d006              BEQ      |L1.1666|
;;;277    		
;;;278    		DMA_ClearITPendingBit(dmaTCFlagChannel);
;;;279    		DMA_ClearFlag(dmaTCFlagChannel);
;;;280    		IrqType = DMA_TE_IRQ;
;;;281    		DMA_Cmd(dmaTxChannel,DISABLE);
;;;282    		if(SPIbufferTx.Size()>0){
;;;283    			if(SPIbufferTx.Size()<=SPI_DMA_TX_BUFFER_SIZE){
;;;284    				dmaTxChannel->CNDTR = SPIbufferTx.Size(); //设置DMA待传输数据数目
;;;285    				SPIbufferTx.Gets(bufferTxDma, SPIbufferTx.Size());
;;;286    			}else{
;;;287    				dmaTxChannel->CNDTR = SPI_DMA_TX_BUFFER_SIZE;
;;;288    				SPIbufferTx.Gets(bufferTxDma, SPI_DMA_TX_BUFFER_SIZE);//传输数据
;;;289    			}
;;;290    		}else{
;;;291    			isBusySend = false;
;;;292    		}
;;;293    	}else if(DMA_GetITStatus(dmaTEFlagChannel) == SET){//错误中断
000674  f8d400b0          LDR      r0,[r4,#0xb0]
000678  f7fffffe          BL       DMA_GetITStatus
00067c  2801              CMP      r0,#1
00067e  d05e              BEQ      |L1.1854|
000680  e068              B        |L1.1876|
                  |L1.1666|
000682  f8d400a8          LDR      r0,[r4,#0xa8]         ;278
000686  f7fffffe          BL       DMA_ClearITPendingBit
00068a  f8d400a8          LDR      r0,[r4,#0xa8]         ;279
00068e  f7fffffe          BL       DMA_ClearFlag
000692  2602              MOVS     r6,#2                 ;280
000694  2100              MOVS     r1,#0                 ;281
000696  f8d400a4          LDR      r0,[r4,#0xa4]         ;281
00069a  f7fffffe          BL       DMA_Cmd
00069e  f8b40042          LDRH     r0,[r4,#0x42]         ;282
0006a2  2800              CMP      r0,#0                 ;282
0006a4  bf08              IT       EQ                    ;291
0006a6  f88450b4          STRBEQ   r5,[r4,#0xb4]         ;291
0006aa  d053              BEQ      |L1.1876|
0006ac  2814              CMP      r0,#0x14              ;283
0006ae  d823              BHI      |L1.1784|
0006b0  f8d410a4          LDR      r1,[r4,#0xa4]         ;284
0006b4  6048              STR      r0,[r1,#4]            ;284
0006b6  f8b41042          LDRH     r1,[r4,#0x42]         ;284
0006ba  2000              MOVS     r0,#0                 ;284
0006bc  f1040290          ADD      r2,r4,#0x90           ;285
0006c0  2900              CMP      r1,#0                 ;285
0006c2  d913              BLS      |L1.1772|
                  |L1.1732|
0006c4  f8b43044          LDRH     r3,[r4,#0x44]         ;285
0006c8  5ce3              LDRB     r3,[r4,r3]            ;285
0006ca  5413              STRB     r3,[r2,r0]            ;285
0006cc  f8b43044          LDRH     r3,[r4,#0x44]         ;285
0006d0  1c5b              ADDS     r3,r3,#1              ;285
0006d2  b29b              UXTH     r3,r3                 ;285
0006d4  f8a43044          STRH     r3,[r4,#0x44]         ;285
0006d8  f8b4c040          LDRH     r12,[r4,#0x40]        ;285
0006dc  4563              CMP      r3,r12                ;285
0006de  bf28              IT       CS                    ;285
0006e0  f8a45044          STRHCS   r5,[r4,#0x44]         ;285
0006e4  1c40              ADDS     r0,r0,#1              ;285
0006e6  b280              UXTH     r0,r0                 ;285
0006e8  4288              CMP      r0,r1                 ;285
0006ea  d3eb              BCC      |L1.1732|
                  |L1.1772|
0006ec  f8b40042          LDRH     r0,[r4,#0x42]         ;285
0006f0  1a40              SUBS     r0,r0,r1              ;285
0006f2  f8a40042          STRH     r0,[r4,#0x42]         ;285
0006f6  e02d              B        |L1.1876|
                  |L1.1784|
0006f8  f8d410a4          LDR      r1,[r4,#0xa4]         ;287
0006fc  2014              MOVS     r0,#0x14              ;287
0006fe  6048              STR      r0,[r1,#4]            ;287
000700  4601              MOV      r1,r0                 ;288
000702  f8b40042          LDRH     r0,[r4,#0x42]         ;288
000706  f1040290          ADD      r2,r4,#0x90           ;288
00070a  2814              CMP      r0,#0x14              ;288
00070c  bf28              IT       CS                    ;288
00070e  2000              MOVCS    r0,#0                 ;288
000710  d320              BCC      |L1.1876|
000712  bf00              NOP                            ;288
                  |L1.1812|
000714  f8b43044          LDRH     r3,[r4,#0x44]         ;288
000718  5ce3              LDRB     r3,[r4,r3]            ;288
00071a  5413              STRB     r3,[r2,r0]            ;288
00071c  f8b43044          LDRH     r3,[r4,#0x44]         ;288
000720  1c5b              ADDS     r3,r3,#1              ;288
000722  b29b              UXTH     r3,r3                 ;288
000724  f8a43044          STRH     r3,[r4,#0x44]         ;288
000728  f8b4c040          LDRH     r12,[r4,#0x40]        ;288
00072c  4563              CMP      r3,r12                ;288
00072e  bf28              IT       CS                    ;288
000730  f8a45044          STRHCS   r5,[r4,#0x44]         ;288
000734  1c40              ADDS     r0,r0,#1              ;288
000736  b280              UXTH     r0,r0                 ;288
000738  4288              CMP      r0,r1                 ;288
00073a  d3eb              BCC      |L1.1812|
00073c  e7d6              B        |L1.1772|
                  |L1.1854|
;;;294    	
;;;295    		DMA_ClearITPendingBit(dmaTEFlagChannel);
00073e  f8d400b0          LDR      r0,[r4,#0xb0]
000742  f7fffffe          BL       DMA_ClearITPendingBit
;;;296    		DMA_ClearFlag(dmaTEFlagChannel);
000746  f8d400b0          LDR      r0,[r4,#0xb0]
00074a  f7fffffe          BL       DMA_ClearFlag
;;;297    		IrqType = DMA_TE_IRQ;
00074e  2602              MOVS     r6,#2
;;;298    		isBusySend = false;  //暂时清除总线忙标志
000750  f88450b4          STRB     r5,[r4,#0xb4]
                  |L1.1876|
;;;299    	}
;;;300    	return IrqType;
000754  4630              MOV      r0,r6
;;;301    }
000756  bd70              POP      {r4-r6,pc}
;;;302    
                          ENDP

                  |L1.1880|
                          DCD      0x40013000
                  |L1.1884|
                          DCD      ||.data||+0x1

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=0

                  dataToSend
000000  00                DCB      0x00
                  |symbol_number.10|
000001  00                DCB      0x00
