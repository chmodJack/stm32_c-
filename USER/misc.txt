; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\obj\misc.o --asm_dir=.\ --list_dir=.\ --depend=..\obj\misc.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime -I..\CORE -I..\STM32F10x_FWLIB\inc -I..\USER -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\C++LIB\OnChip\GPIO -I..\C++LIB\ToolBox\Buffer -I..\C++LIB\System -I..\C++LIB\OnChip\IIC -I..\C++LIB\OffChip -I..\C++LIB\System\TaskManager -I..\C++LIB\System\Interrupt -I..\C++LIB\OnChip\SerialPort -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\obj\misc.crf ..\STM32F10x_FWLIB\src\misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  492c              LDR      r1,|L1.180|
;;;97     {
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  f04070fd          ORR      r0,r0,#0x1fa0000
000006  f0406080          ORR      r0,r0,#0x4000000
00000a  6008              STR      r0,[r1,#0]
;;;103    }
00000c  4770              BX       lr
;;;104    
                          ENDP

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
00000e  b410              PUSH     {r4}
;;;113    {
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000010  78c2              LDRB     r2,[r0,#3]
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;125        tmppre = (0x4 - tmppriority);
;;;126        tmpsub = tmpsub >> tmppriority;
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;130        tmppriority = tmppriority << 0x04;
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000012  7801              LDRB     r1,[r0,#0]
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000014  2301              MOVS     r3,#1
000016  b322              CBZ      r2,|L1.98|
000018  4a26              LDR      r2,|L1.180|
00001a  6812              LDR      r2,[r2,#0]            ;124
00001c  240f              MOVS     r4,#0xf               ;126
00001e  f40262e0          AND      r2,r2,#0x700          ;124
000022  f5c262e0          RSB      r2,r2,#0x700          ;124
000026  0a12              LSRS     r2,r2,#8              ;124
000028  f1c20c04          RSB      r12,r2,#4             ;125
00002c  fa24f202          LSR      r2,r4,r2              ;126
000030  7844              LDRB     r4,[r0,#1]            ;128
000032  f10121e0          ADD      r1,r1,#0xe000e000     ;130
000036  fa04fc0c          LSL      r12,r4,r12            ;128
00003a  7884              LDRB     r4,[r0,#2]            ;129
00003c  4022              ANDS     r2,r2,r4              ;129
00003e  ea42020c          ORR      r2,r2,r12             ;129
000042  0112              LSLS     r2,r2,#4              ;130
000044  f8812400          STRB     r2,[r1,#0x400]        ;132
000048  7800              LDRB     r0,[r0,#0]
00004a  f000011f          AND      r1,r0,#0x1f
00004e  fa03f101          LSL      r1,r3,r1
000052  0940              LSRS     r0,r0,#5
000054  0080              LSLS     r0,r0,#2
000056  f10020e0          ADD      r0,r0,#0xe000e000
00005a  f8c01100          STR      r1,[r0,#0x100]
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
00005e  bc10              POP      {r4}
000060  4770              BX       lr
                  |L1.98|
000062  f001001f          AND      r0,r1,#0x1f           ;141
000066  fa03f000          LSL      r0,r3,r0              ;141
00006a  0949              LSRS     r1,r1,#5              ;141
00006c  0089              LSLS     r1,r1,#2              ;141
00006e  f10121e0          ADD      r1,r1,#0xe000e000     ;141
000072  f8c10180          STR      r0,[r1,#0x180]        ;141
000076  bc10              POP      {r4}
000078  4770              BX       lr
;;;145    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;155      */
;;;156    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
00007a  f021017f          BIC      r1,r1,#0x7f
;;;157    { 
;;;158      /* Check the parameters */
;;;159      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;160      assert_param(IS_NVIC_OFFSET(Offset));  
;;;161       
;;;162      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
00007e  f0214160          BIC      r1,r1,#0xe0000000
000082  4308              ORRS     r0,r0,r1
000084  490c              LDR      r1,|L1.184|
000086  6008              STR      r0,[r1,#0]
;;;163    }
000088  4770              BX       lr
;;;164    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;174      */
;;;175    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
00008a  4a0c              LDR      r2,|L1.188|
;;;176    {
;;;177      /* Check the parameters */
;;;178      assert_param(IS_NVIC_LP(LowPowerMode));
;;;179      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;180      
;;;181      if (NewState != DISABLE)
00008c  2900              CMP      r1,#0
;;;182      {
;;;183        SCB->SCR |= LowPowerMode;
;;;184      }
;;;185      else
;;;186      {
;;;187        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
00008e  6811              LDR      r1,[r2,#0]
000090  bf14              ITE      NE                    ;183
000092  4308              ORRNE    r0,r0,r1              ;183
000094  ea210000          BICEQ    r0,r1,r0
000098  6010              STR      r0,[r2,#0]            ;183
;;;188      }
;;;189    }
00009a  4770              BX       lr
;;;190    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;198      */
;;;199    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
00009c  f04f21e0          MOV      r1,#0xe000e000
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;203      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
0000a0  2804              CMP      r0,#4
;;;204      {
;;;205        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;206      }
;;;207      else
;;;208      {
;;;209        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
0000a2  6908              LDR      r0,[r1,#0x10]
0000a4  bf0c              ITE      EQ                    ;205
0000a6  f0400004          ORREQ    r0,r0,#4              ;205
0000aa  f0200004          BICNE    r0,r0,#4
0000ae  6108              STR      r0,[r1,#0x10]         ;205
;;;210      }
;;;211    }
0000b0  4770              BX       lr
;;;212    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L1.180|
                          DCD      0xe000ed0c
                  |L1.184|
                          DCD      0xe000ed08
                  |L1.188|
                          DCD      0xe000ed10
